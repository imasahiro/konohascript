/*Generated by yukkiwakka >:3 */
/*============================================================*/
/* java package java.awt */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_awt_BufferCapabilities_FlipContents;
class Java_awt_Component_BaselineResizeBehavior;
class Java_awt_Desktop_Action;
class Java_awt_Dialog_ModalExclusionType;
class Java_awt_Dialog_ModalityType;
class Java_awt_GraphicsDevice_WindowTranslucency;
class Java_awt_JobAttributes_DefaultSelectionType;
class Java_awt_JobAttributes_DestinationType;
class Java_awt_JobAttributes_DialogType;
class Java_awt_JobAttributes_MultipleDocumentHandlingType;
class Java_awt_JobAttributes_SidesType;
class Java_awt_MultipleGradientPaint_ColorSpaceType;
class Java_awt_MultipleGradientPaint_CycleMethod;
class Java_awt_PageAttributes_ColorType;
class Java_awt_PageAttributes_MediaType;
class Java_awt_PageAttributes_OrientationRequestedType;
class Java_awt_PageAttributes_OriginType;
class Java_awt_PageAttributes_PrintQualityType;
class Java_awt_RenderingHints_Key;
class Java_awt_TrayIcon_MessageType;
class Java_awt_Window_Type;
class Java_awt_color_ColorSpace;
class Java_awt_datatransfer_Clipboard;
class Java_awt_dnd_DragGestureEvent;
class Java_awt_dnd_DragGestureListener;
class Java_awt_dnd_DragGestureRecognizer;
class Java_awt_dnd_DragSource;
class Java_awt_dnd_DropTarget;
class Java_awt_dnd_peer_DragSourceContextPeer;
class Java_awt_event_AWTEventListener;
class Java_awt_event_ActionEvent;
class Java_awt_event_ActionListener;
class Java_awt_event_AdjustmentEvent;
class Java_awt_event_AdjustmentListener;
class Java_awt_event_ComponentListener;
class Java_awt_event_ContainerEvent;
class Java_awt_event_ContainerListener;
class Java_awt_event_FocusEvent;
class Java_awt_event_FocusListener;
class Java_awt_event_HierarchyBoundsListener;
class Java_awt_event_HierarchyEvent;
class Java_awt_event_HierarchyListener;
class Java_awt_event_InputMethodEvent;
class Java_awt_event_InputMethodListener;
class Java_awt_event_ItemEvent;
class Java_awt_event_ItemListener;
class Java_awt_event_KeyEvent;
class Java_awt_event_KeyListener;
class Java_awt_event_MouseEvent;
class Java_awt_event_MouseListener;
class Java_awt_event_MouseMotionListener;
class Java_awt_event_MouseWheelEvent;
class Java_awt_event_MouseWheelListener;
class Java_awt_event_TextEvent;
class Java_awt_event_TextListener;
class Java_awt_event_WindowEvent;
class Java_awt_event_WindowFocusListener;
class Java_awt_event_WindowListener;
class Java_awt_event_WindowStateListener;
class Java_awt_font_FontRenderContext;
class Java_awt_font_GlyphVector;
class Java_awt_font_LineMetrics;
class Java_awt_geom_AffineTransform;
class Java_awt_geom_Dimension2D;
class Java_awt_geom_PathIterator;
class Java_awt_geom_Point2D;
class Java_awt_geom_Rectangle2D;
class Java_awt_im_InputContext;
class Java_awt_im_InputMethodHighlight;
class Java_awt_im_InputMethodRequests;
class Java_awt_image_BufferStrategy;
class Java_awt_image_BufferedImage;
class Java_awt_image_BufferedImageOp;
class Java_awt_image_ColorModel;
class Java_awt_image_ImageObserver;
class Java_awt_image_ImageProducer;
class Java_awt_image_Raster;
class Java_awt_image_RenderedImage;
class Java_awt_image_VolatileImage;
class Java_awt_image_WritableRaster;
class Java_awt_image_renderable_RenderableImage;
class Java_beans_PropertyChangeListener;
class Java_beans_VetoableChangeListener;
class Java_io_File;
class Java_io_FilenameFilter;
class Java_io_InputStream;
class Java_io_PrintStream;
class Java_io_PrintWriter;
class Java_io_Serializable;
class Java_lang_Character;
class Java_lang_Cloneable;
class Java_lang_Error;
class Java_lang_Exception;
class Java_lang_IllegalStateException;
class Java_lang_Runnable;
class Java_lang_UnsupportedOperationException;
class Java_net_URI;
class Java_net_URL;
class Java_security_BasicPermission;
class Java_text_AttributedCharacterIterator;
class Java_text_AttributedCharacterIterator_Attribute;
class Java_text_CharacterIterator;
class Java_util_Enumeration;
class Java_util_EventListener;
class Java_util_EventObject;
class Java_util_List;
class Java_util_Locale;
class Java_util_Map;
class Java_util_Properties;
class Java_util_Set;
class Javax_accessibility_AccessibleContext;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_awt_AWTError extends Java_lang_Error;
class Java_awt_AWTEvent extends Java_util_EventObject;
class Java_awt_AWTEventMulticaster extends Java_awt_event_ComponentListener;
class Java_awt_AWTException extends Java_lang_Exception;
class Java_awt_AWTKeyStroke extends Java_io_Serializable;
class Java_awt_AWTPermission extends Java_security_BasicPermission;
class Java_awt_ActiveEvent;
class Java_awt_Adjustable;
class Java_awt_Composite;
class Java_awt_AlphaComposite extends Java_awt_Composite;
class Java_awt_Stroke;
class Java_awt_BasicStroke extends Java_awt_Stroke;
class Java_awt_LayoutManager;
class Java_awt_LayoutManager2 extends Java_awt_LayoutManager;
class Java_awt_BorderLayout extends Java_awt_LayoutManager2;
class Java_awt_BufferCapabilities extends Java_lang_Cloneable;
class Java_awt_Component extends Java_awt_image_ImageObserver;
class Java_awt_Button extends Java_awt_Component;
class Java_awt_Canvas extends Java_awt_Component;
class Java_awt_CardLayout extends Java_awt_LayoutManager2;
class Java_awt_Checkbox extends Java_awt_Component;
class Java_awt_CheckboxGroup extends Java_io_Serializable;
class Java_awt_MenuComponent extends Java_io_Serializable;
class Java_awt_MenuItem extends Java_awt_MenuComponent;
class Java_awt_CheckboxMenuItem extends Java_awt_MenuItem;
class Java_awt_Choice extends Java_awt_Component;
class Java_awt_Transparency;
class Java_awt_Paint extends Java_awt_Transparency;
class Java_awt_Color extends Java_awt_Paint;
class Java_awt_ComponentOrientation extends Java_io_Serializable;
class Java_awt_CompositeContext;
class Java_awt_Container extends Java_awt_Component;
class Java_awt_FocusTraversalPolicy;
class Java_awt_ContainerOrderFocusTraversalPolicy extends Java_awt_FocusTraversalPolicy;
class Java_awt_Cursor extends Java_io_Serializable;
class Java_awt_DefaultFocusTraversalPolicy extends Java_awt_ContainerOrderFocusTraversalPolicy;
class Java_awt_KeyEventDispatcher;
class Java_awt_KeyboardFocusManager extends Java_awt_KeyEventDispatcher;
class Java_awt_DefaultKeyboardFocusManager extends Java_awt_KeyboardFocusManager;
class Java_awt_Desktop;
class Java_awt_Window extends Java_awt_Container;
class Java_awt_Dialog extends Java_awt_Window;
class Java_awt_Dimension extends Java_awt_geom_Dimension2D;
class Java_awt_DisplayMode;
class Java_awt_Event extends Java_io_Serializable;
class Java_awt_EventQueue;
class Java_awt_FileDialog extends Java_awt_Dialog;
class Java_awt_FlowLayout extends Java_awt_LayoutManager;
class Java_awt_Font extends Java_io_Serializable;
class Java_awt_FontFormatException extends Java_lang_Exception;
class Java_awt_FontMetrics extends Java_io_Serializable;
class Java_awt_Frame extends Java_awt_Window;
class Java_awt_GradientPaint extends Java_awt_Paint;
class Java_awt_Graphics;
class Java_awt_Graphics2D extends Java_awt_Graphics;
class Java_awt_GraphicsConfigTemplate extends Java_io_Serializable;
class Java_awt_GraphicsConfiguration;
class Java_awt_GraphicsDevice;
class Java_awt_GraphicsEnvironment;
class Java_awt_GridBagConstraints extends Java_lang_Cloneable;
class Java_awt_GridBagLayout extends Java_awt_LayoutManager2;
class Java_awt_GridBagLayoutInfo extends Java_io_Serializable;
class Java_awt_GridLayout extends Java_awt_LayoutManager;
class Java_awt_HeadlessException extends Java_lang_UnsupportedOperationException;
class Java_awt_IllegalComponentStateException extends Java_lang_IllegalStateException;
class Java_awt_Image;
class Java_awt_ImageCapabilities extends Java_lang_Cloneable;
class Java_awt_Insets extends Java_lang_Cloneable;
class Java_awt_ItemSelectable;
class Java_awt_JobAttributes extends Java_lang_Cloneable;
class Java_awt_KeyEventPostProcessor;
class Java_awt_Label extends Java_awt_Component;
class Java_awt_MultipleGradientPaint extends Java_awt_Paint;
class Java_awt_LinearGradientPaint extends Java_awt_MultipleGradientPaint;
class Java_awt_List extends Java_awt_Component;
class Java_awt_MediaTracker extends Java_io_Serializable;
class Java_awt_Menu extends Java_awt_MenuItem;
class Java_awt_MenuBar extends Java_awt_MenuComponent;
class Java_awt_MenuContainer;
class Java_awt_MenuShortcut extends Java_io_Serializable;
class Java_awt_MouseInfo;
class Java_awt_PageAttributes extends Java_lang_Cloneable;
class Java_awt_PaintContext;
class Java_awt_Panel extends Java_awt_Container;
class Java_awt_Point extends Java_awt_geom_Point2D;
class Java_awt_PointerInfo;
class Java_awt_Shape;
class Java_awt_Polygon extends Java_awt_Shape;
class Java_awt_PopupMenu extends Java_awt_Menu;
class Java_awt_PrintGraphics;
class Java_awt_PrintJob;
class Java_awt_RadialGradientPaint extends Java_awt_MultipleGradientPaint;
class Java_awt_Rectangle extends Java_awt_geom_Rectangle2D;
class Java_awt_RenderingHints extends Java_util_Map;
class Java_awt_Robot;
class Java_awt_ScrollPane extends Java_awt_Container;
class Java_awt_ScrollPaneAdjustable extends Java_awt_Adjustable;
class Java_awt_Scrollbar extends Java_awt_Component;
class Java_awt_SecondaryLoop;
class Java_awt_SplashScreen;
class Java_awt_SystemColor extends Java_awt_Color;
class Java_awt_SystemTray;
class Java_awt_TextComponent extends Java_awt_Component;
class Java_awt_TextArea extends Java_awt_TextComponent;
class Java_awt_TextField extends Java_awt_TextComponent;
class Java_awt_TexturePaint extends Java_awt_Paint;
class Java_awt_Toolkit;
class Java_awt_TrayIcon;

/*------------------------------------------------------------*/
/* class java.awt.AWTError */
class Java_awt_AWTError extends Java_lang_Error {
}
Java_awt_AWTError Java_awt_AWTError.new(String p0);

/* class java.awt.AWTEvent */
class Java_awt_AWTEvent extends Java_util_EventObject {
	/*-- Method --*/
	@Virtual @Overload String paramString();
	@Virtual @Overload int getID();
	@Virtual @Overload void setSource(Object p0);
}
@Overload Java_awt_AWTEvent Java_awt_AWTEvent.new(Java_awt_Event p0);
@Overload Java_awt_AWTEvent Java_awt_AWTEvent.new(Object p0, int p1);

/* class java.awt.AWTEventMulticaster */
class Java_awt_AWTEventMulticaster extends Java_awt_event_ComponentListener {
	/*-- Method --*/
	@Static @Overload Java_awt_event_ActionListener add(Java_awt_event_ActionListener p0, Java_awt_event_ActionListener p1);
	@Static @Overload Java_awt_event_ActionListener remove(Java_awt_event_ActionListener p0, Java_awt_event_ActionListener p1);
	@Static @Overload Java_awt_event_AdjustmentListener add(Java_awt_event_AdjustmentListener p0, Java_awt_event_AdjustmentListener p1);
	@Static @Overload Java_awt_event_AdjustmentListener remove(Java_awt_event_AdjustmentListener p0, Java_awt_event_AdjustmentListener p1);
	@Static @Overload Java_awt_event_ComponentListener add(Java_awt_event_ComponentListener p0, Java_awt_event_ComponentListener p1);
	@Static @Overload Java_awt_event_ComponentListener remove(Java_awt_event_ComponentListener p0, Java_awt_event_ComponentListener p1);
	@Static @Overload Java_awt_event_ContainerListener add(Java_awt_event_ContainerListener p0, Java_awt_event_ContainerListener p1);
	@Static @Overload Java_awt_event_ContainerListener remove(Java_awt_event_ContainerListener p0, Java_awt_event_ContainerListener p1);
	@Static @Overload Java_awt_event_FocusListener add(Java_awt_event_FocusListener p0, Java_awt_event_FocusListener p1);
	@Static @Overload Java_awt_event_FocusListener remove(Java_awt_event_FocusListener p0, Java_awt_event_FocusListener p1);
	@Static @Overload Java_awt_event_HierarchyBoundsListener add(Java_awt_event_HierarchyBoundsListener p0, Java_awt_event_HierarchyBoundsListener p1);
	@Static @Overload Java_awt_event_HierarchyBoundsListener remove(Java_awt_event_HierarchyBoundsListener p0, Java_awt_event_HierarchyBoundsListener p1);
	@Static @Overload Java_awt_event_HierarchyListener add(Java_awt_event_HierarchyListener p0, Java_awt_event_HierarchyListener p1);
	@Static @Overload Java_awt_event_HierarchyListener remove(Java_awt_event_HierarchyListener p0, Java_awt_event_HierarchyListener p1);
	@Static @Overload Java_awt_event_InputMethodListener add(Java_awt_event_InputMethodListener p0, Java_awt_event_InputMethodListener p1);
	@Static @Overload Java_awt_event_InputMethodListener remove(Java_awt_event_InputMethodListener p0, Java_awt_event_InputMethodListener p1);
	@Static @Overload Java_awt_event_ItemListener add(Java_awt_event_ItemListener p0, Java_awt_event_ItemListener p1);
	@Static @Overload Java_awt_event_ItemListener remove(Java_awt_event_ItemListener p0, Java_awt_event_ItemListener p1);
	@Static @Overload Java_awt_event_KeyListener add(Java_awt_event_KeyListener p0, Java_awt_event_KeyListener p1);
	@Static @Overload Java_awt_event_KeyListener remove(Java_awt_event_KeyListener p0, Java_awt_event_KeyListener p1);
	@Static @Overload Java_awt_event_MouseListener add(Java_awt_event_MouseListener p0, Java_awt_event_MouseListener p1);
	@Static @Overload Java_awt_event_MouseListener remove(Java_awt_event_MouseListener p0, Java_awt_event_MouseListener p1);
	@Static @Overload Java_awt_event_MouseMotionListener add(Java_awt_event_MouseMotionListener p0, Java_awt_event_MouseMotionListener p1);
	@Static @Overload Java_awt_event_MouseMotionListener remove(Java_awt_event_MouseMotionListener p0, Java_awt_event_MouseMotionListener p1);
	@Static @Overload Java_awt_event_MouseWheelListener add(Java_awt_event_MouseWheelListener p0, Java_awt_event_MouseWheelListener p1);
	@Static @Overload Java_awt_event_MouseWheelListener remove(Java_awt_event_MouseWheelListener p0, Java_awt_event_MouseWheelListener p1);
	@Static @Overload Java_awt_event_TextListener add(Java_awt_event_TextListener p0, Java_awt_event_TextListener p1);
	@Static @Overload Java_awt_event_TextListener remove(Java_awt_event_TextListener p0, Java_awt_event_TextListener p1);
	@Static @Overload Java_awt_event_WindowFocusListener add(Java_awt_event_WindowFocusListener p0, Java_awt_event_WindowFocusListener p1);
	@Static @Overload Java_awt_event_WindowFocusListener remove(Java_awt_event_WindowFocusListener p0, Java_awt_event_WindowFocusListener p1);
	@Static @Overload Java_awt_event_WindowListener add(Java_awt_event_WindowListener p0, Java_awt_event_WindowListener p1);
	@Static @Overload Java_awt_event_WindowListener remove(Java_awt_event_WindowListener p0, Java_awt_event_WindowListener p1);
	@Static @Overload Java_awt_event_WindowStateListener add(Java_awt_event_WindowStateListener p0, Java_awt_event_WindowStateListener p1);
	@Static @Overload Java_awt_event_WindowStateListener remove(Java_awt_event_WindowStateListener p0, Java_awt_event_WindowStateListener p1);
	@Static @Overload Java_util_EventListener[] getListeners(Java_util_EventListener p0, Class p1);
	@Virtual @Overload void actionPerformed(Java_awt_event_ActionEvent p0);
	@Virtual @Overload void adjustmentValueChanged(Java_awt_event_AdjustmentEvent p0);
	@Virtual @Overload void ancestorMoved(Java_awt_event_HierarchyEvent p0);
	@Virtual @Overload void ancestorResized(Java_awt_event_HierarchyEvent p0);
	@Virtual @Overload void caretPositionChanged(Java_awt_event_InputMethodEvent p0);
	@Virtual @Overload void componentAdded(Java_awt_event_ContainerEvent p0);
	@Virtual @Overload void componentRemoved(Java_awt_event_ContainerEvent p0);
	@Virtual @Overload void focusGained(Java_awt_event_FocusEvent p0);
	@Virtual @Overload void focusLost(Java_awt_event_FocusEvent p0);
	@Virtual @Overload void hierarchyChanged(Java_awt_event_HierarchyEvent p0);
	@Virtual @Overload void inputMethodTextChanged(Java_awt_event_InputMethodEvent p0);
	@Virtual @Overload void itemStateChanged(Java_awt_event_ItemEvent p0);
	@Virtual @Overload void keyPressed(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void keyReleased(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void keyTyped(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void mouseClicked(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseDragged(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseEntered(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseExited(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseMoved(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mousePressed(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseReleased(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseWheelMoved(Java_awt_event_MouseWheelEvent p0);
	@Virtual @Overload void textValueChanged(Java_awt_event_TextEvent p0);
	@Virtual @Overload void windowActivated(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowClosed(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowClosing(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowDeactivated(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowDeiconified(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowGainedFocus(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowIconified(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowLostFocus(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowOpened(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowStateChanged(Java_awt_event_WindowEvent p0);
}

/* class java.awt.AWTException */
class Java_awt_AWTException extends Java_lang_Exception {
}
Java_awt_AWTException Java_awt_AWTException.new(String p0);

/* class java.awt.AWTKeyStroke */
class Java_awt_AWTKeyStroke extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStroke(Java_lang_Character p0, int p1);
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStroke(String p0);
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStroke(int p0);
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStroke(int p0, int p1);
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStroke(int p0, int p1, boolean p2);
	@Static @Overload Java_awt_AWTKeyStroke getAWTKeyStrokeForEvent(Java_awt_event_KeyEvent p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isOnKeyRelease();
	@Virtual @Overload int getKeyChar();
	@Virtual @Overload int getKeyCode();
	@Virtual @Overload int getKeyEventType();
	@Virtual @Overload int getModifiers();
}

/* class java.awt.AWTPermission */
class Java_awt_AWTPermission extends Java_security_BasicPermission {
}
@Overload Java_awt_AWTPermission Java_awt_AWTPermission.new(String p0);
@Overload Java_awt_AWTPermission Java_awt_AWTPermission.new(String p0, String p1);

/* interface java.awt.ActiveEvent */
class Java_awt_ActiveEvent {
	/*-- Method --*/
	@Virtual @Overload void dispatch();
}

/* interface java.awt.Adjustable */
class Java_awt_Adjustable {
	/*-- Method --*/
	@Virtual @Overload int getBlockIncrement();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload int getUnitIncrement();
	@Virtual @Overload int getValue();
	@Virtual @Overload int getVisibleAmount();
	@Virtual @Overload void addAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void removeAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void setBlockIncrement(int p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setUnitIncrement(int p0);
	@Virtual @Overload void setValue(int p0);
	@Virtual @Overload void setVisibleAmount(int p0);
}

/* interface java.awt.Composite */
class Java_awt_Composite {
	/*-- Method --*/
	@Virtual @Overload Java_awt_CompositeContext createContext(Java_awt_image_ColorModel p0, Java_awt_image_ColorModel p1, Java_awt_RenderingHints p2);
}

/* class java.awt.AlphaComposite */
class Java_awt_AlphaComposite extends Java_awt_Composite {
	/*-- Method --*/
	@Static @Overload Java_awt_AlphaComposite getInstance(int p0);
	@Static @Overload Java_awt_AlphaComposite getInstance(int p0, float p1);
	@Virtual @Overload Java_awt_AlphaComposite derive(float p0);
	@Virtual @Overload Java_awt_AlphaComposite derive(int p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload float getAlpha();
	@Virtual @Overload int getRule();
}

/* interface java.awt.Stroke */
class Java_awt_Stroke {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Shape createStrokedShape(Java_awt_Shape p0);
}

/* class java.awt.BasicStroke */
class Java_awt_BasicStroke extends Java_awt_Stroke {
	/*-- Method --*/
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload float getDashPhase();
	@Virtual @Overload float getLineWidth();
	@Virtual @Overload float getMiterLimit();
	@Virtual @Overload float[] getDashArray();
	@Virtual @Overload int getEndCap();
	@Virtual @Overload int getLineJoin();
}
@Overload Java_awt_BasicStroke Java_awt_BasicStroke.new(float p0, int p1, int p2, float p3, float[] p4, float p5);
@Overload Java_awt_BasicStroke Java_awt_BasicStroke.new(float p0, int p1, int p2, float p3);
@Overload Java_awt_BasicStroke Java_awt_BasicStroke.new(float p0, int p1, int p2);
@Overload Java_awt_BasicStroke Java_awt_BasicStroke.new(float p0);
@Overload Java_awt_BasicStroke Java_awt_BasicStroke.new();

/* interface java.awt.LayoutManager */
class Java_awt_LayoutManager {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension minimumLayoutSize(Java_awt_Container p0);
	@Virtual @Overload Java_awt_Dimension preferredLayoutSize(Java_awt_Container p0);
	@Virtual @Overload void addLayoutComponent(String p0, Java_awt_Component p1);
	@Virtual @Overload void layoutContainer(Java_awt_Container p0);
	@Virtual @Overload void removeLayoutComponent(Java_awt_Component p0);
}

/* interface java.awt.LayoutManager2 */
class Java_awt_LayoutManager2 extends Java_awt_LayoutManager {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension maximumLayoutSize(Java_awt_Container p0);
	@Virtual @Overload float getLayoutAlignmentX(Java_awt_Container p0);
	@Virtual @Overload float getLayoutAlignmentY(Java_awt_Container p0);
	@Virtual @Overload void addLayoutComponent(Java_awt_Component p0, Object p1);
	@Virtual @Overload void invalidateLayout(Java_awt_Container p0);
}

/* class java.awt.BorderLayout */
class Java_awt_BorderLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getLayoutComponent(Java_awt_Container p0, Object p1);
	@Virtual @Overload Java_awt_Component getLayoutComponent(Object p0);
	@Virtual @Overload Object getConstraints(Java_awt_Component p0);
	@Virtual @Overload String toString();
	@Virtual @Overload int getHgap();
	@Virtual @Overload int getVgap();
	@Virtual @Overload void setHgap(int p0);
	@Virtual @Overload void setVgap(int p0);
}
@Overload Java_awt_BorderLayout Java_awt_BorderLayout.new();
@Overload Java_awt_BorderLayout Java_awt_BorderLayout.new(int p0, int p1);

/* class java.awt.BufferCapabilities */
class Java_awt_BufferCapabilities extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_BufferCapabilities_FlipContents getFlipContents();
	@Virtual @Overload Java_awt_ImageCapabilities getBackBufferCapabilities();
	@Virtual @Overload Java_awt_ImageCapabilities getFrontBufferCapabilities();
	@Virtual @Overload Object clone();
	@Virtual @Overload boolean isFullScreenRequired();
	@Virtual @Overload boolean isMultiBufferAvailable();
	@Virtual @Overload boolean isPageFlipping();
}
Java_awt_BufferCapabilities Java_awt_BufferCapabilities.new(Java_awt_ImageCapabilities p0, Java_awt_ImageCapabilities p1, Java_awt_BufferCapabilities_FlipContents p2);

/* class java.awt.Component */
class Java_awt_Component extends Java_awt_image_ImageObserver {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getBackground();
	@Virtual @Overload Java_awt_Color getForeground();
	@Virtual @Overload Java_awt_Component getComponentAt(Java_awt_Point p0);
	@Virtual @Overload Java_awt_Component getComponentAt(int p0, int p1);
	@Virtual @Overload Java_awt_ComponentOrientation getComponentOrientation();
	@Virtual @Overload Java_awt_Component_BaselineResizeBehavior getBaselineResizeBehavior();
	@Virtual @Overload Java_awt_Container getFocusCycleRootAncestor();
	@Virtual @Overload Java_awt_Container getParent();
	@Virtual @Overload Java_awt_Cursor getCursor();
	@Virtual @Overload Java_awt_Dimension getMaximumSize();
	@Virtual @Overload Java_awt_Dimension getMinimumSize();
	@Virtual @Overload Java_awt_Dimension getPreferredSize();
	@Virtual @Overload Java_awt_Dimension getSize();
	@Virtual @Overload Java_awt_Dimension getSize(Java_awt_Dimension p0);
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload Java_awt_FontMetrics getFontMetrics(Java_awt_Font p0);
	@Virtual @Overload Java_awt_Graphics getGraphics();
	@Virtual @Overload Java_awt_GraphicsConfiguration getGraphicsConfiguration();
	@Virtual @Overload Java_awt_Image createImage(Java_awt_image_ImageProducer p0);
	@Virtual @Overload Java_awt_Image createImage(int p0, int p1);
	@Virtual @Overload Java_awt_Point getLocation();
	@Virtual @Overload Java_awt_Point getLocation(Java_awt_Point p0);
	@Virtual @Overload Java_awt_Point getLocationOnScreen();
	@Virtual @Overload Java_awt_Point getMousePosition();
	@Virtual @Overload Java_awt_Rectangle getBounds();
	@Virtual @Overload Java_awt_Rectangle getBounds(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_Toolkit getToolkit();
	@Virtual @Overload Java_awt_dnd_DropTarget getDropTarget();
	@Virtual @Overload Java_awt_event_ComponentListener[] getComponentListeners();
	@Virtual @Overload Java_awt_event_FocusListener[] getFocusListeners();
	@Virtual @Overload Java_awt_event_HierarchyBoundsListener[] getHierarchyBoundsListeners();
	@Virtual @Overload Java_awt_event_HierarchyListener[] getHierarchyListeners();
	@Virtual @Overload Java_awt_event_InputMethodListener[] getInputMethodListeners();
	@Virtual @Overload Java_awt_event_KeyListener[] getKeyListeners();
	@Virtual @Overload Java_awt_event_MouseListener[] getMouseListeners();
	@Virtual @Overload Java_awt_event_MouseMotionListener[] getMouseMotionListeners();
	@Virtual @Overload Java_awt_event_MouseWheelListener[] getMouseWheelListeners();
	@Virtual @Overload Java_awt_im_InputContext getInputContext();
	@Virtual @Overload Java_awt_im_InputMethodRequests getInputMethodRequests();
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_awt_image_VolatileImage createVolatileImage(int p0, int p1);
	@Virtual @Overload Java_awt_image_VolatileImage createVolatileImage(int p0, int p1, Java_awt_ImageCapabilities p2);
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners(String p0);
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Java_util_Locale getLocale();
	@Virtual @Overload Java_util_Set getFocusTraversalKeys(int p0);
	@Virtual @Overload Javax_accessibility_AccessibleContext getAccessibleContext();
	@Virtual @Overload Object getTreeLock();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean areFocusTraversalKeysSet(int p0);
	@Virtual @Overload boolean contains(Java_awt_Point p0);
	@Virtual @Overload boolean contains(int p0, int p1);
	@Virtual @Overload boolean getFocusTraversalKeysEnabled();
	@Virtual @Overload boolean getIgnoreRepaint();
	@Virtual @Overload boolean hasFocus();
	@Virtual @Overload boolean isBackgroundSet();
	@Virtual @Overload boolean isCursorSet();
	@Virtual @Overload boolean isDisplayable();
	@Virtual @Overload boolean isDoubleBuffered();
	@Virtual @Overload boolean isEnabled();
	@Virtual @Overload boolean isFocusCycleRoot(Java_awt_Container p0);
	@Virtual @Overload boolean isFocusOwner();
	@Virtual @Overload boolean isFocusable();
	@Virtual @Overload boolean isFontSet();
	@Virtual @Overload boolean isForegroundSet();
	@Virtual @Overload boolean isLightweight();
	@Virtual @Overload boolean isMaximumSizeSet();
	@Virtual @Overload boolean isMinimumSizeSet();
	@Virtual @Overload boolean isOpaque();
	@Virtual @Overload boolean isPreferredSizeSet();
	@Virtual @Overload boolean isShowing();
	@Virtual @Overload boolean isValid();
	@Virtual @Overload boolean isVisible();
	@Virtual @Overload boolean prepareImage(Java_awt_Image p0, Java_awt_image_ImageObserver p1);
	@Virtual @Overload boolean prepareImage(Java_awt_Image p0, int p1, int p2, Java_awt_image_ImageObserver p3);
	@Virtual @Overload boolean requestFocusInWindow();
	@Virtual @Overload float getAlignmentX();
	@Virtual @Overload float getAlignmentY();
	@Virtual @Overload int checkImage(Java_awt_Image p0, Java_awt_image_ImageObserver p1);
	@Virtual @Overload int checkImage(Java_awt_Image p0, int p1, int p2, Java_awt_image_ImageObserver p3);
	@Virtual @Overload int getBaseline(int p0, int p1);
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int getX();
	@Virtual @Overload int getY();
	@Virtual @Overload void add(Java_awt_PopupMenu p0);
	@Virtual @Overload void addComponentListener(Java_awt_event_ComponentListener p0);
	@Virtual @Overload void addFocusListener(Java_awt_event_FocusListener p0);
	@Virtual @Overload void addHierarchyBoundsListener(Java_awt_event_HierarchyBoundsListener p0);
	@Virtual @Overload void addHierarchyListener(Java_awt_event_HierarchyListener p0);
	@Virtual @Overload void addInputMethodListener(Java_awt_event_InputMethodListener p0);
	@Virtual @Overload void addKeyListener(Java_awt_event_KeyListener p0);
	@Virtual @Overload void addMouseListener(Java_awt_event_MouseListener p0);
	@Virtual @Overload void addMouseMotionListener(Java_awt_event_MouseMotionListener p0);
	@Virtual @Overload void addMouseWheelListener(Java_awt_event_MouseWheelListener p0);
	@Virtual @Overload void addNotify();
	@Virtual @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void addPropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void applyComponentOrientation(Java_awt_ComponentOrientation p0);
	@Virtual @Overload void dispatchEvent(Java_awt_AWTEvent p0);
	@Virtual @Overload void doLayout();
	@Virtual @Overload void enableInputMethods(boolean p0);
	@Virtual @Overload void firePropertyChange(String p0, float p1, float p2);
	@Virtual @Overload void firePropertyChange(String p0, int p1, int p2);
	@Virtual @Overload void invalidate();
	@Virtual @Overload void list();
	@Virtual @Overload void list(Java_io_PrintStream p0);
	@Virtual @Overload void list(Java_io_PrintStream p0, int p1);
	@Virtual @Overload void list(Java_io_PrintWriter p0);
	@Virtual @Overload void list(Java_io_PrintWriter p0, int p1);
	@Virtual @Overload void paint(Java_awt_Graphics p0);
	@Virtual @Overload void paintAll(Java_awt_Graphics p0);
	@Virtual @Overload void printAll(Java_awt_Graphics p0);
	@Virtual @Overload void remove(Java_awt_MenuComponent p0);
	@Virtual @Overload void removeComponentListener(Java_awt_event_ComponentListener p0);
	@Virtual @Overload void removeFocusListener(Java_awt_event_FocusListener p0);
	@Virtual @Overload void removeHierarchyBoundsListener(Java_awt_event_HierarchyBoundsListener p0);
	@Virtual @Overload void removeHierarchyListener(Java_awt_event_HierarchyListener p0);
	@Virtual @Overload void removeInputMethodListener(Java_awt_event_InputMethodListener p0);
	@Virtual @Overload void removeKeyListener(Java_awt_event_KeyListener p0);
	@Virtual @Overload void removeMouseListener(Java_awt_event_MouseListener p0);
	@Virtual @Overload void removeMouseMotionListener(Java_awt_event_MouseMotionListener p0);
	@Virtual @Overload void removeMouseWheelListener(Java_awt_event_MouseWheelListener p0);
	@Virtual @Overload void removeNotify();
	@Virtual @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void removePropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void repaint();
	@Virtual @Overload void repaint(int p0);
	@Virtual @Overload void repaint(int p0, int p1, int p2, int p3);
	@Virtual @Overload void repaint(int p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void requestFocus();
	@Virtual @Overload void revalidate();
	@Virtual @Overload void setBackground(Java_awt_Color p0);
	@Virtual @Overload void setBounds(Java_awt_Rectangle p0);
	@Virtual @Overload void setBounds(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setComponentOrientation(Java_awt_ComponentOrientation p0);
	@Virtual @Overload void setCursor(Java_awt_Cursor p0);
	@Virtual @Overload void setDropTarget(Java_awt_dnd_DropTarget p0);
	@Virtual @Overload void setEnabled(boolean p0);
	@Virtual @Overload void setFocusTraversalKeys(int p0, Java_util_Set p1);
	@Virtual @Overload void setFocusTraversalKeysEnabled(boolean p0);
	@Virtual @Overload void setFocusable(boolean p0);
	@Virtual @Overload void setFont(Java_awt_Font p0);
	@Virtual @Overload void setForeground(Java_awt_Color p0);
	@Virtual @Overload void setIgnoreRepaint(boolean p0);
	@Virtual @Overload void setLocale(Java_util_Locale p0);
	@Virtual @Overload void setLocation(Java_awt_Point p0);
	@Virtual @Overload void setLocation(int p0, int p1);
	@Virtual @Overload void setMaximumSize(Java_awt_Dimension p0);
	@Virtual @Overload void setMinimumSize(Java_awt_Dimension p0);
	@Virtual @Overload void setName(String p0);
	@Virtual @Overload void setPreferredSize(Java_awt_Dimension p0);
	@Virtual @Overload void setSize(Java_awt_Dimension p0);
	@Virtual @Overload void setSize(int p0, int p1);
	@Virtual @Overload void setVisible(boolean p0);
	@Virtual @Overload void transferFocus();
	@Virtual @Overload void transferFocusBackward();
	@Virtual @Overload void transferFocusUpCycle();
	@Virtual @Overload void update(Java_awt_Graphics p0);
	@Virtual @Overload void validate();
}

/* class java.awt.Button */
class Java_awt_Button extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload String getLabel();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setLabel(String p0);
}
@Overload Java_awt_Button Java_awt_Button.new();
@Overload Java_awt_Button Java_awt_Button.new(String p0);

/* class java.awt.Canvas */
class Java_awt_Canvas extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_BufferStrategy getBufferStrategy();
	@Virtual @Overload void createBufferStrategy(int p0);
	@Virtual @Overload void createBufferStrategy(int p0, Java_awt_BufferCapabilities p1);
}
@Overload Java_awt_Canvas Java_awt_Canvas.new();
@Overload Java_awt_Canvas Java_awt_Canvas.new(Java_awt_GraphicsConfiguration p0);

/* class java.awt.CardLayout */
class Java_awt_CardLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload int getHgap();
	@Virtual @Overload int getVgap();
	@Virtual @Overload void first(Java_awt_Container p0);
	@Virtual @Overload void last(Java_awt_Container p0);
	@Virtual @Overload void next(Java_awt_Container p0);
	@Virtual @Overload void previous(Java_awt_Container p0);
	@Virtual @Overload void setHgap(int p0);
	@Virtual @Overload void setVgap(int p0);
	@Virtual @Overload void show(Java_awt_Container p0, String p1);
}
@Overload Java_awt_CardLayout Java_awt_CardLayout.new();
@Overload Java_awt_CardLayout Java_awt_CardLayout.new(int p0, int p1);

/* class java.awt.Checkbox */
class Java_awt_Checkbox extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_CheckboxGroup getCheckboxGroup();
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload String getLabel();
	@Virtual @Overload boolean getState();
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void setCheckboxGroup(Java_awt_CheckboxGroup p0);
	@Virtual @Overload void setLabel(String p0);
	@Virtual @Overload void setState(boolean p0);
}
@Overload Java_awt_Checkbox Java_awt_Checkbox.new();
@Overload Java_awt_Checkbox Java_awt_Checkbox.new(String p0);
@Overload Java_awt_Checkbox Java_awt_Checkbox.new(String p0, boolean p1);
@Overload Java_awt_Checkbox Java_awt_Checkbox.new(String p0, boolean p1, Java_awt_CheckboxGroup p2);
@Overload Java_awt_Checkbox Java_awt_Checkbox.new(String p0, Java_awt_CheckboxGroup p1, boolean p2);

/* class java.awt.CheckboxGroup */
class Java_awt_CheckboxGroup extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Checkbox getSelectedCheckbox();
	@Virtual @Overload String toString();
	@Virtual @Overload void setSelectedCheckbox(Java_awt_Checkbox p0);
}
Java_awt_CheckboxGroup Java_awt_CheckboxGroup.new();

/* class java.awt.MenuComponent */
class Java_awt_MenuComponent extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload Java_awt_MenuContainer getParent();
	@Virtual @Overload Javax_accessibility_AccessibleContext getAccessibleContext();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload void dispatchEvent(Java_awt_AWTEvent p0);
	@Virtual @Overload void removeNotify();
	@Virtual @Overload void setFont(Java_awt_Font p0);
	@Virtual @Overload void setName(String p0);
}
Java_awt_MenuComponent Java_awt_MenuComponent.new();

/* class java.awt.MenuItem */
class Java_awt_MenuItem extends Java_awt_MenuComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_MenuShortcut getShortcut();
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload String getLabel();
	@Virtual @Overload String paramString();
	@Virtual @Overload boolean isEnabled();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addNotify();
	@Virtual @Overload void deleteShortcut();
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setEnabled(boolean p0);
	@Virtual @Overload void setLabel(String p0);
	@Virtual @Overload void setShortcut(Java_awt_MenuShortcut p0);
}
@Overload Java_awt_MenuItem Java_awt_MenuItem.new();
@Overload Java_awt_MenuItem Java_awt_MenuItem.new(String p0);
@Overload Java_awt_MenuItem Java_awt_MenuItem.new(String p0, Java_awt_MenuShortcut p1);

/* class java.awt.CheckboxMenuItem */
class Java_awt_CheckboxMenuItem extends Java_awt_MenuItem {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload boolean getState();
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void setState(boolean p0);
}
@Overload Java_awt_CheckboxMenuItem Java_awt_CheckboxMenuItem.new();
@Overload Java_awt_CheckboxMenuItem Java_awt_CheckboxMenuItem.new(String p0);
@Overload Java_awt_CheckboxMenuItem Java_awt_CheckboxMenuItem.new(String p0, boolean p1);

/* class java.awt.Choice */
class Java_awt_Choice extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload String getItem(int p0);
	@Virtual @Overload String getSelectedItem();
	@Virtual @Overload int getItemCount();
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload void add(String p0);
	@Virtual @Overload void addItem(String p0);
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void insert(String p0, int p1);
	@Virtual @Overload void remove(String p0);
	@Virtual @Overload void remove(int p0);
	@Virtual @Overload void removeAll();
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void select(String p0);
	@Virtual @Overload void select(int p0);
}
Java_awt_Choice Java_awt_Choice.new();

/* interface java.awt.Transparency */
class Java_awt_Transparency {
	/*-- Method --*/
	@Virtual @Overload int getTransparency();
}

/* interface java.awt.Paint */
class Java_awt_Paint extends Java_awt_Transparency {
	/*-- Method --*/
	@Virtual @Overload Java_awt_PaintContext createContext(Java_awt_image_ColorModel p0, Java_awt_Rectangle p1, Java_awt_geom_Rectangle2D p2, Java_awt_geom_AffineTransform p3, Java_awt_RenderingHints p4);
}

/* class java.awt.Color */
class Java_awt_Color extends Java_awt_Paint {
	/*-- Method --*/
	@Static @Overload Java_awt_Color decode(String p0);
	@Static @Overload Java_awt_Color getColor(String p0);
	@Static @Overload Java_awt_Color getColor(String p0, Java_awt_Color p1);
	@Static @Overload Java_awt_Color getColor(String p0, int p1);
	@Static @Overload Java_awt_Color getHSBColor(float p0, float p1, float p2);
	@Static @Overload float[] rgbtohsb(int p0, int p1, int p2, float[] p3);
	@Static @Overload int hsbtorgb(float p0, float p1, float p2);
	@Virtual @Overload Java_awt_Color brighter();
	@Virtual @Overload Java_awt_Color darker();
	@Virtual @Overload Java_awt_color_ColorSpace getColorSpace();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload float[] getColorComponents(Java_awt_color_ColorSpace p0, float[] p1);
	@Virtual @Overload float[] getColorComponents(float[] p0);
	@Virtual @Overload float[] getComponents(Java_awt_color_ColorSpace p0, float[] p1);
	@Virtual @Overload float[] getComponents(float[] p0);
	@Virtual @Overload float[] getRGBColorComponents(float[] p0);
	@Virtual @Overload float[] getRGBComponents(float[] p0);
	@Virtual @Overload int getAlpha();
	@Virtual @Overload int getBlue();
	@Virtual @Overload int getGreen();
	@Virtual @Overload int getRGB();
	@Virtual @Overload int getRed();
}
@Overload Java_awt_Color Java_awt_Color.new(int p0, int p1, int p2);
@Overload Java_awt_Color Java_awt_Color.new(int p0, int p1, int p2, int p3);
@Overload Java_awt_Color Java_awt_Color.new(int p0);
@Overload Java_awt_Color Java_awt_Color.new(int p0, boolean p1);
@Overload Java_awt_Color Java_awt_Color.new(float p0, float p1, float p2);
@Overload Java_awt_Color Java_awt_Color.new(float p0, float p1, float p2, float p3);
@Overload Java_awt_Color Java_awt_Color.new(Java_awt_color_ColorSpace p0, float[] p1, float p2);

/* class java.awt.ComponentOrientation */
class Java_awt_ComponentOrientation extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_ComponentOrientation getOrientation(Java_util_Locale p0);
	@Virtual @Overload boolean isHorizontal();
	@Virtual @Overload boolean isLeftToRight();
}

/* interface java.awt.CompositeContext */
class Java_awt_CompositeContext {
	/*-- Method --*/
	@Virtual @Overload void compose(Java_awt_image_Raster p0, Java_awt_image_Raster p1, Java_awt_image_WritableRaster p2);
	@Virtual @Overload void dispose();
}

/* class java.awt.Container */
class Java_awt_Container extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component add(Java_awt_Component p0);
	@Virtual @Overload Java_awt_Component add(Java_awt_Component p0, int p1);
	@Virtual @Overload Java_awt_Component add(String p0, Java_awt_Component p1);
	@Virtual @Overload Java_awt_Component findComponentAt(Java_awt_Point p0);
	@Virtual @Overload Java_awt_Component findComponentAt(int p0, int p1);
	@Virtual @Overload Java_awt_Component getComponent(int p0);
	@Virtual @Overload Java_awt_Component[] getComponents();
	@Virtual @Overload Java_awt_FocusTraversalPolicy getFocusTraversalPolicy();
	@Virtual @Overload Java_awt_Insets getInsets();
	@Virtual @Overload Java_awt_LayoutManager getLayout();
	@Virtual @Overload Java_awt_Point getMousePosition(boolean p0);
	@Virtual @Overload Java_awt_event_ContainerListener[] getContainerListeners();
	@Virtual @Overload boolean isAncestorOf(Java_awt_Component p0);
	@Virtual @Overload boolean isFocusCycleRoot();
	@Virtual @Overload boolean isFocusTraversalPolicyProvider();
	@Virtual @Overload boolean isFocusTraversalPolicySet();
	@Virtual @Overload boolean isValidateRoot();
	@Virtual @Overload int getComponentCount();
	@Virtual @Overload int getComponentZOrder(Java_awt_Component p0);
	@Virtual @Overload void add(Java_awt_Component p0, Object p1);
	@Virtual @Overload void add(Java_awt_Component p0, Object p1, int p2);
	@Virtual @Overload void addContainerListener(Java_awt_event_ContainerListener p0);
	@Virtual @Overload void paintComponents(Java_awt_Graphics p0);
	@Virtual @Overload void printComponents(Java_awt_Graphics p0);
	@Virtual @Overload void remove(Java_awt_Component p0);
	@Virtual @Overload void remove(int p0);
	@Virtual @Overload void removeAll();
	@Virtual @Overload void removeContainerListener(Java_awt_event_ContainerListener p0);
	@Virtual @Overload void setComponentZOrder(Java_awt_Component p0, int p1);
	@Virtual @Overload void setFocusCycleRoot(boolean p0);
	@Virtual @Overload void setFocusTraversalPolicy(Java_awt_FocusTraversalPolicy p0);
	@Virtual @Overload void setFocusTraversalPolicyProvider(boolean p0);
	@Virtual @Overload void setLayout(Java_awt_LayoutManager p0);
	@Virtual @Overload void transferFocusDownCycle();
}
Java_awt_Container Java_awt_Container.new();

/* class java.awt.FocusTraversalPolicy */
class Java_awt_FocusTraversalPolicy {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponentAfter(Java_awt_Container p0, Java_awt_Component p1);
	@Virtual @Overload Java_awt_Component getComponentBefore(Java_awt_Container p0, Java_awt_Component p1);
	@Virtual @Overload Java_awt_Component getDefaultComponent(Java_awt_Container p0);
	@Virtual @Overload Java_awt_Component getFirstComponent(Java_awt_Container p0);
	@Virtual @Overload Java_awt_Component getInitialComponent(Java_awt_Window p0);
	@Virtual @Overload Java_awt_Component getLastComponent(Java_awt_Container p0);
}
Java_awt_FocusTraversalPolicy Java_awt_FocusTraversalPolicy.new();

/* class java.awt.ContainerOrderFocusTraversalPolicy */
class Java_awt_ContainerOrderFocusTraversalPolicy extends Java_awt_FocusTraversalPolicy {
	/*-- Method --*/
	@Virtual @Overload boolean getImplicitDownCycleTraversal();
	@Virtual @Overload void setImplicitDownCycleTraversal(boolean p0);
}
Java_awt_ContainerOrderFocusTraversalPolicy Java_awt_ContainerOrderFocusTraversalPolicy.new();

/* class java.awt.Cursor */
class Java_awt_Cursor extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_Cursor getDefaultCursor();
	@Static @Overload Java_awt_Cursor getPredefinedCursor(int p0);
	@Static @Overload Java_awt_Cursor getSystemCustomCursor(String p0);
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload int getType();
}
Java_awt_Cursor Java_awt_Cursor.new(int p0);

/* class java.awt.DefaultFocusTraversalPolicy */
class Java_awt_DefaultFocusTraversalPolicy extends Java_awt_ContainerOrderFocusTraversalPolicy {
}
Java_awt_DefaultFocusTraversalPolicy Java_awt_DefaultFocusTraversalPolicy.new();

/* interface java.awt.KeyEventDispatcher */
class Java_awt_KeyEventDispatcher {
	/*-- Method --*/
	@Virtual @Overload boolean dispatchKeyEvent(Java_awt_event_KeyEvent p0);
}

/* class java.awt.KeyboardFocusManager */
class Java_awt_KeyboardFocusManager extends Java_awt_KeyEventDispatcher {
	/*-- Method --*/
	@Static @Overload Java_awt_KeyboardFocusManager getCurrentKeyboardFocusManager();
	@Static @Overload void setCurrentKeyboardFocusManager(Java_awt_KeyboardFocusManager p0);
	@Virtual @Overload Java_awt_Component getFocusOwner();
	@Virtual @Overload Java_awt_Component getPermanentFocusOwner();
	@Virtual @Overload Java_awt_Container getCurrentFocusCycleRoot();
	@Virtual @Overload Java_awt_FocusTraversalPolicy getDefaultFocusTraversalPolicy();
	@Virtual @Overload Java_awt_Window getActiveWindow();
	@Virtual @Overload Java_awt_Window getFocusedWindow();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners(String p0);
	@Virtual @Overload Java_beans_VetoableChangeListener[] getVetoableChangeListeners();
	@Virtual @Overload Java_beans_VetoableChangeListener[] getVetoableChangeListeners(String p0);
	@Virtual @Overload Java_util_Set getDefaultFocusTraversalKeys(int p0);
	@Virtual @Overload boolean dispatchEvent(Java_awt_AWTEvent p0);
	@Virtual @Overload boolean postProcessKeyEvent(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void addKeyEventDispatcher(Java_awt_KeyEventDispatcher p0);
	@Virtual @Overload void addKeyEventPostProcessor(Java_awt_KeyEventPostProcessor p0);
	@Virtual @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void addPropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void addVetoableChangeListener(Java_beans_VetoableChangeListener p0);
	@Virtual @Overload void addVetoableChangeListener(String p0, Java_beans_VetoableChangeListener p1);
	@Virtual @Overload void clearGlobalFocusOwner();
	@Virtual @Overload void downFocusCycle();
	@Virtual @Overload void downFocusCycle(Java_awt_Container p0);
	@Virtual @Overload void focusNextComponent();
	@Virtual @Overload void focusNextComponent(Java_awt_Component p0);
	@Virtual @Overload void focusPreviousComponent();
	@Virtual @Overload void focusPreviousComponent(Java_awt_Component p0);
	@Virtual @Overload void processKeyEvent(Java_awt_Component p0, Java_awt_event_KeyEvent p1);
	@Virtual @Overload void redispatchEvent(Java_awt_Component p0, Java_awt_AWTEvent p1);
	@Virtual @Overload void removeKeyEventDispatcher(Java_awt_KeyEventDispatcher p0);
	@Virtual @Overload void removeKeyEventPostProcessor(Java_awt_KeyEventPostProcessor p0);
	@Virtual @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void removePropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void removeVetoableChangeListener(Java_beans_VetoableChangeListener p0);
	@Virtual @Overload void removeVetoableChangeListener(String p0, Java_beans_VetoableChangeListener p1);
	@Virtual @Overload void setDefaultFocusTraversalKeys(int p0, Java_util_Set p1);
	@Virtual @Overload void setDefaultFocusTraversalPolicy(Java_awt_FocusTraversalPolicy p0);
	@Virtual @Overload void setGlobalCurrentFocusCycleRoot(Java_awt_Container p0);
	@Virtual @Overload void upFocusCycle();
	@Virtual @Overload void upFocusCycle(Java_awt_Component p0);
}
Java_awt_KeyboardFocusManager Java_awt_KeyboardFocusManager.new();

/* class java.awt.DefaultKeyboardFocusManager */
class Java_awt_DefaultKeyboardFocusManager extends Java_awt_KeyboardFocusManager {
}
Java_awt_DefaultKeyboardFocusManager Java_awt_DefaultKeyboardFocusManager.new();

/* class java.awt.Desktop */
class Java_awt_Desktop {
	/*-- Method --*/
	@Static @Overload Java_awt_Desktop getDesktop();
	@Static @Overload boolean isDesktopSupported();
	@Virtual @Overload boolean isSupported(Java_awt_Desktop_Action p0);
	@Virtual @Overload void browse(Java_net_URI p0);
	@Virtual @Overload void edit(Java_io_File p0);
	@Virtual @Overload void mail();
	@Virtual @Overload void mail(Java_net_URI p0);
	@Virtual @Overload void open(Java_io_File p0);
}

/* class java.awt.Window */
class Java_awt_Window extends Java_awt_Container {
	/*-- Method --*/
	@Static @Overload Java_awt_Window[] getOwnerlessWindows();
	@Static @Overload Java_awt_Window[] getWindows();
	@Virtual @Overload Java_awt_Component getFocusOwner();
	@Virtual @Overload Java_awt_Component getMostRecentFocusOwner();
	@Virtual @Overload Java_awt_Dialog_ModalExclusionType getModalExclusionType();
	@Virtual @Overload Java_awt_Shape getShape();
	@Virtual @Overload Java_awt_Window getOwner();
	@Virtual @Overload Java_awt_Window[] getOwnedWindows();
	@Virtual @Overload Java_awt_Window_Type getType();
	@Virtual @Overload Java_awt_event_WindowFocusListener[] getWindowFocusListeners();
	@Virtual @Overload Java_awt_event_WindowListener[] getWindowListeners();
	@Virtual @Overload Java_awt_event_WindowStateListener[] getWindowStateListeners();
	@Virtual @Overload Java_awt_image_BufferStrategy getBufferStrategy();
	@Virtual @Overload Java_util_List getIconImages();
	@Virtual @Overload String getWarningString();
	@Virtual @Overload boolean getFocusableWindowState();
	@Virtual @Overload boolean isActive();
	@Virtual @Overload boolean isAlwaysOnTop();
	@Virtual @Overload boolean isAlwaysOnTopSupported();
	@Virtual @Overload boolean isAutoRequestFocus();
	@Virtual @Overload boolean isFocusableWindow();
	@Virtual @Overload boolean isFocused();
	@Virtual @Overload boolean isLocationByPlatform();
	@Virtual @Overload float getOpacity();
	@Virtual @Overload void addWindowFocusListener(Java_awt_event_WindowFocusListener p0);
	@Virtual @Overload void addWindowListener(Java_awt_event_WindowListener p0);
	@Virtual @Overload void addWindowStateListener(Java_awt_event_WindowStateListener p0);
	@Virtual @Overload void createBufferStrategy(int p0);
	@Virtual @Overload void createBufferStrategy(int p0, Java_awt_BufferCapabilities p1);
	@Virtual @Overload void dispose();
	@Virtual @Overload void pack();
	@Virtual @Overload void removeWindowFocusListener(Java_awt_event_WindowFocusListener p0);
	@Virtual @Overload void removeWindowListener(Java_awt_event_WindowListener p0);
	@Virtual @Overload void removeWindowStateListener(Java_awt_event_WindowStateListener p0);
	@Virtual @Overload void setAlwaysOnTop(boolean p0);
	@Virtual @Overload void setAutoRequestFocus(boolean p0);
	@Virtual @Overload void setFocusableWindowState(boolean p0);
	@Virtual @Overload void setIconImage(Java_awt_Image p0);
	@Virtual @Overload void setIconImages(Java_util_List p0);
	@Virtual @Overload void setLocationByPlatform(boolean p0);
	@Virtual @Overload void setLocationRelativeTo(Java_awt_Component p0);
	@Virtual @Overload void setModalExclusionType(Java_awt_Dialog_ModalExclusionType p0);
	@Virtual @Overload void setOpacity(float p0);
	@Virtual @Overload void setShape(Java_awt_Shape p0);
	@Virtual @Overload void setType(Java_awt_Window_Type p0);
	@Virtual @Overload void toBack();
	@Virtual @Overload void toFront();
}
@Overload Java_awt_Window Java_awt_Window.new(Java_awt_Frame p0);
@Overload Java_awt_Window Java_awt_Window.new(Java_awt_Window p0);
@Overload Java_awt_Window Java_awt_Window.new(Java_awt_Window p0, Java_awt_GraphicsConfiguration p1);

/* class java.awt.Dialog */
class Java_awt_Dialog extends Java_awt_Window {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dialog_ModalityType getModalityType();
	@Virtual @Overload String getTitle();
	@Virtual @Overload boolean isModal();
	@Virtual @Overload boolean isResizable();
	@Virtual @Overload boolean isUndecorated();
	@Virtual @Overload void setModal(boolean p0);
	@Virtual @Overload void setModalityType(Java_awt_Dialog_ModalityType p0);
	@Virtual @Overload void setResizable(boolean p0);
	@Virtual @Overload void setTitle(String p0);
	@Virtual @Overload void setUndecorated(boolean p0);
}
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Frame p0);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Frame p0, boolean p1);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Frame p0, String p1);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Frame p0, String p1, boolean p2);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Frame p0, String p1, boolean p2, Java_awt_GraphicsConfiguration p3);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Dialog p0);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Dialog p0, String p1);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Dialog p0, String p1, boolean p2);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Dialog p0, String p1, boolean p2, Java_awt_GraphicsConfiguration p3);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Window p0);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Window p0, String p1);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Window p0, Java_awt_Dialog_ModalityType p1);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Window p0, String p1, Java_awt_Dialog_ModalityType p2);
@Overload Java_awt_Dialog Java_awt_Dialog.new(Java_awt_Window p0, String p1, Java_awt_Dialog_ModalityType p2, Java_awt_GraphicsConfiguration p3);

/* class java.awt.Dimension */
class Java_awt_Dimension extends Java_awt_geom_Dimension2D {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getSize();
	@Virtual @Overload void setSize(Java_awt_Dimension p0);
	@Virtual @Overload void setSize(int p0, int p1);
}
@Overload Java_awt_Dimension Java_awt_Dimension.new();
@Overload Java_awt_Dimension Java_awt_Dimension.new(Java_awt_Dimension p0);
@Overload Java_awt_Dimension Java_awt_Dimension.new(int p0, int p1);

/* class java.awt.DisplayMode */
class Java_awt_DisplayMode {
	/*-- Method --*/
	@Virtual @Overload boolean equals(Java_awt_DisplayMode p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int getBitDepth();
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getRefreshRate();
	@Virtual @Overload int getWidth();
}
Java_awt_DisplayMode Java_awt_DisplayMode.new(int p0, int p1, int p2, int p3);

/* class java.awt.Event */
class Java_awt_Event extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean controlDown();
	@Virtual @Overload boolean metaDown();
	@Virtual @Overload boolean shiftDown();
	@Virtual @Overload void translate(int p0, int p1);
}
@Overload Java_awt_Event Java_awt_Event.new(Object p0, int p1, int p2, int p3, int p4, int p5, int p6, Object p7);
@Overload Java_awt_Event Java_awt_Event.new(Object p0, int p1, int p2, int p3, int p4, int p5, int p6);
@Overload Java_awt_Event Java_awt_Event.new(Object p0, int p1, Object p2);

/* class java.awt.EventQueue */
class Java_awt_EventQueue {
	/*-- Method --*/
	@Static @Overload Java_awt_AWTEvent getCurrentEvent();
	@Static @Overload boolean isDispatchThread();
	@Static @Overload int getMostRecentEventTime();
	@Static @Overload void invokeAndWait(Java_lang_Runnable p0);
	@Static @Overload void invokeLater(Java_lang_Runnable p0);
	@Virtual @Overload Java_awt_AWTEvent getNextEvent();
	@Virtual @Overload Java_awt_AWTEvent peekEvent();
	@Virtual @Overload Java_awt_AWTEvent peekEvent(int p0);
	@Virtual @Overload Java_awt_SecondaryLoop createSecondaryLoop();
	@Virtual @Overload void postEvent(Java_awt_AWTEvent p0);
	@Virtual @Overload void push(Java_awt_EventQueue p0);
}
Java_awt_EventQueue Java_awt_EventQueue.new();

/* class java.awt.FileDialog */
class Java_awt_FileDialog extends Java_awt_Dialog {
	/*-- Method --*/
	@Virtual @Overload Java_io_File[] getFiles();
	@Virtual @Overload Java_io_FilenameFilter getFilenameFilter();
	@Virtual @Overload String getDirectory();
	@Virtual @Overload String getFile();
	@Virtual @Overload boolean isMultipleMode();
	@Virtual @Overload int getMode();
	@Virtual @Overload void setDirectory(String p0);
	@Virtual @Overload void setFile(String p0);
	@Virtual @Overload void setFilenameFilter(Java_io_FilenameFilter p0);
	@Virtual @Overload void setMode(int p0);
	@Virtual @Overload void setMultipleMode(boolean p0);
}
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Frame p0);
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Frame p0, String p1);
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Frame p0, String p1, int p2);
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Dialog p0);
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Dialog p0, String p1);
@Overload Java_awt_FileDialog Java_awt_FileDialog.new(Java_awt_Dialog p0, String p1, int p2);

/* class java.awt.FlowLayout */
class Java_awt_FlowLayout extends Java_awt_LayoutManager {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getAlignOnBaseline();
	@Virtual @Overload int getAlignment();
	@Virtual @Overload int getHgap();
	@Virtual @Overload int getVgap();
	@Virtual @Overload void setAlignOnBaseline(boolean p0);
	@Virtual @Overload void setAlignment(int p0);
	@Virtual @Overload void setHgap(int p0);
	@Virtual @Overload void setVgap(int p0);
}
@Overload Java_awt_FlowLayout Java_awt_FlowLayout.new();
@Overload Java_awt_FlowLayout Java_awt_FlowLayout.new(int p0);
@Overload Java_awt_FlowLayout Java_awt_FlowLayout.new(int p0, int p1, int p2);

/* class java.awt.Font */
class Java_awt_Font extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_Font createFont(int p0, Java_io_File p1);
	@Static @Overload Java_awt_Font createFont(int p0, Java_io_InputStream p1);
	@Static @Overload Java_awt_Font decode(String p0);
	@Static @Overload Java_awt_Font getFont(Java_util_Map p0);
	@Static @Overload Java_awt_Font getFont(String p0);
	@Static @Overload Java_awt_Font getFont(String p0, Java_awt_Font p1);
	@Virtual @Overload Java_awt_Font deriveFont(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload Java_awt_Font deriveFont(Java_util_Map p0);
	@Virtual @Overload Java_awt_Font deriveFont(float p0);
	@Virtual @Overload Java_awt_Font deriveFont(int p0);
	@Virtual @Overload Java_awt_Font deriveFont(int p0, Java_awt_geom_AffineTransform p1);
	@Virtual @Overload Java_awt_Font deriveFont(int p0, float p1);
	@Virtual @Overload Java_awt_font_GlyphVector createGlyphVector(Java_awt_font_FontRenderContext p0, Java_text_CharacterIterator p1);
	@Virtual @Overload Java_awt_font_GlyphVector createGlyphVector(Java_awt_font_FontRenderContext p0, String p1);
	@Virtual @Overload Java_awt_font_GlyphVector createGlyphVector(Java_awt_font_FontRenderContext p0, int[] p1);
	@Virtual @Overload Java_awt_font_GlyphVector layoutGlyphVector(Java_awt_font_FontRenderContext p0, int[] p1, int p2, int p3, int p4);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(Java_text_CharacterIterator p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(String p0, Java_awt_font_FontRenderContext p1);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(String p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(int[] p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload Java_awt_geom_Rectangle2D getMaxCharBounds(Java_awt_font_FontRenderContext p0);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(Java_text_CharacterIterator p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(String p0, Java_awt_font_FontRenderContext p1);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(String p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(int[] p0, int p1, int p2, Java_awt_font_FontRenderContext p3);
	@Virtual @Overload Java_text_AttributedCharacterIterator_Attribute[] getAvailableAttributes();
	@Virtual @Overload Java_util_Map getAttributes();
	@Virtual @Overload String getFamily();
	@Virtual @Overload String getFamily(Java_util_Locale p0);
	@Virtual @Overload String getFontName();
	@Virtual @Overload String getFontName(Java_util_Locale p0);
	@Virtual @Overload String getName();
	@Virtual @Overload String getPSName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean canDisplay(int p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean hasLayoutAttributes();
	@Virtual @Overload boolean hasUniformLineMetrics();
	@Virtual @Overload boolean isBold();
	@Virtual @Overload boolean isItalic();
	@Virtual @Overload boolean isPlain();
	@Virtual @Overload boolean isTransformed();
	@Virtual @Overload float getItalicAngle();
	@Virtual @Overload float getSize2D();
	@Virtual @Overload int canDisplayUpTo(Java_text_CharacterIterator p0, int p1, int p2);
	@Virtual @Overload int canDisplayUpTo(String p0);
	@Virtual @Overload int canDisplayUpTo(int[] p0, int p1, int p2);
	@Virtual @Overload int getBaselineFor(int p0);
	@Virtual @Overload int getMissingGlyphCode();
	@Virtual @Overload int getNumGlyphs();
	@Virtual @Overload int getSize();
	@Virtual @Overload int getStyle();
}
@Overload Java_awt_Font Java_awt_Font.new(String p0, int p1, int p2);
@Overload Java_awt_Font Java_awt_Font.new(Java_util_Map p0);

/* class java.awt.FontFormatException */
class Java_awt_FontFormatException extends Java_lang_Exception {
}
Java_awt_FontFormatException Java_awt_FontFormatException.new(String p0);

/* class java.awt.FontMetrics */
class Java_awt_FontMetrics extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload Java_awt_font_FontRenderContext getFontRenderContext();
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(Java_text_CharacterIterator p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(String p0, Java_awt_Graphics p1);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(String p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload Java_awt_font_LineMetrics getLineMetrics(int[] p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload Java_awt_geom_Rectangle2D getMaxCharBounds(Java_awt_Graphics p0);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(Java_text_CharacterIterator p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(String p0, Java_awt_Graphics p1);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(String p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload Java_awt_geom_Rectangle2D getStringBounds(int[] p0, int p1, int p2, Java_awt_Graphics p3);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean hasUniformLineMetrics();
	@Virtual @Overload int bytesWidth(int[] p0, int p1, int p2);
	@Virtual @Overload int charWidth(int p0);
	@Virtual @Overload int charsWidth(int[] p0, int p1, int p2);
	@Virtual @Overload int getAscent();
	@Virtual @Overload int getDescent();
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getLeading();
	@Virtual @Overload int getMaxAdvance();
	@Virtual @Overload int getMaxAscent();
	@Virtual @Overload int getMaxDescent();
	@Virtual @Overload int stringWidth(String p0);
	@Virtual @Overload int[] getWidths();
}

/* class java.awt.Frame */
class Java_awt_Frame extends Java_awt_Window {
	/*-- Method --*/
	@Static @Overload Java_awt_Frame[] getFrames();
	@Virtual @Overload Java_awt_Image getIconImage();
	@Virtual @Overload Java_awt_MenuBar getMenuBar();
	@Virtual @Overload Java_awt_Rectangle getMaximizedBounds();
	@Virtual @Overload String getTitle();
	@Virtual @Overload boolean isResizable();
	@Virtual @Overload boolean isUndecorated();
	@Virtual @Overload int getExtendedState();
	@Virtual @Overload int getState();
	@Virtual @Overload void setExtendedState(int p0);
	@Virtual @Overload void setMaximizedBounds(Java_awt_Rectangle p0);
	@Virtual @Overload void setMenuBar(Java_awt_MenuBar p0);
	@Virtual @Overload void setResizable(boolean p0);
	@Virtual @Overload void setState(int p0);
	@Virtual @Overload void setTitle(String p0);
	@Virtual @Overload void setUndecorated(boolean p0);
}
@Overload Java_awt_Frame Java_awt_Frame.new();
@Overload Java_awt_Frame Java_awt_Frame.new(Java_awt_GraphicsConfiguration p0);
@Overload Java_awt_Frame Java_awt_Frame.new(String p0);
@Overload Java_awt_Frame Java_awt_Frame.new(String p0, Java_awt_GraphicsConfiguration p1);

/* class java.awt.GradientPaint */
class Java_awt_GradientPaint extends Java_awt_Paint {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getColor1();
	@Virtual @Overload Java_awt_Color getColor2();
	@Virtual @Overload Java_awt_geom_Point2D getPoint1();
	@Virtual @Overload Java_awt_geom_Point2D getPoint2();
	@Virtual @Overload boolean isCyclic();
}
@Overload Java_awt_GradientPaint Java_awt_GradientPaint.new(float p0, float p1, Java_awt_Color p2, float p3, float p4, Java_awt_Color p5);
@Overload Java_awt_GradientPaint Java_awt_GradientPaint.new(Java_awt_geom_Point2D p0, Java_awt_Color p1, Java_awt_geom_Point2D p2, Java_awt_Color p3);
@Overload Java_awt_GradientPaint Java_awt_GradientPaint.new(float p0, float p1, Java_awt_Color p2, float p3, float p4, Java_awt_Color p5, boolean p6);
@Overload Java_awt_GradientPaint Java_awt_GradientPaint.new(Java_awt_geom_Point2D p0, Java_awt_Color p1, Java_awt_geom_Point2D p2, Java_awt_Color p3, boolean p4);

/* class java.awt.Graphics */
class Java_awt_Graphics {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getColor();
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload Java_awt_FontMetrics getFontMetrics();
	@Virtual @Overload Java_awt_FontMetrics getFontMetrics(Java_awt_Font p0);
	@Virtual @Overload Java_awt_Graphics create();
	@Virtual @Overload Java_awt_Graphics create(int p0, int p1, int p2, int p3);
	@Virtual @Overload Java_awt_Rectangle getClipBounds();
	@Virtual @Overload Java_awt_Rectangle getClipBounds(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_Shape getClip();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, Java_awt_Color p3, Java_awt_image_ImageObserver p4);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, Java_awt_image_ImageObserver p3);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, int p3, int p4, Java_awt_Color p5, Java_awt_image_ImageObserver p6);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, int p3, int p4, Java_awt_image_ImageObserver p5);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, Java_awt_Color p9, Java_awt_image_ImageObserver p10);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, Java_awt_image_ImageObserver p9);
	@Virtual @Overload boolean hitClip(int p0, int p1, int p2, int p3);
	@Virtual @Overload void clearRect(int p0, int p1, int p2, int p3);
	@Virtual @Overload void clipRect(int p0, int p1, int p2, int p3);
	@Virtual @Overload void copyArea(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void dispose();
	@Virtual @Overload void draw3DRect(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void drawArc(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void drawBytes(int[] p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void drawChars(int[] p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void drawLine(int p0, int p1, int p2, int p3);
	@Virtual @Overload void drawOval(int p0, int p1, int p2, int p3);
	@Virtual @Overload void drawPolygon(Java_awt_Polygon p0);
	@Virtual @Overload void drawPolygon(int[] p0, int[] p1, int p2);
	@Virtual @Overload void drawPolyline(int[] p0, int[] p1, int p2);
	@Virtual @Overload void drawRect(int p0, int p1, int p2, int p3);
	@Virtual @Overload void drawRoundRect(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void drawString(Java_text_AttributedCharacterIterator p0, int p1, int p2);
	@Virtual @Overload void drawString(String p0, int p1, int p2);
	@Virtual @Overload void fill3DRect(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void fillArc(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void fillOval(int p0, int p1, int p2, int p3);
	@Virtual @Overload void fillPolygon(Java_awt_Polygon p0);
	@Virtual @Overload void fillPolygon(int[] p0, int[] p1, int p2);
	@Virtual @Overload void fillRect(int p0, int p1, int p2, int p3);
	@Virtual @Overload void fillRoundRect(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void finalize();
	@Virtual @Overload void setClip(Java_awt_Shape p0);
	@Virtual @Overload void setClip(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setColor(Java_awt_Color p0);
	@Virtual @Overload void setFont(Java_awt_Font p0);
	@Virtual @Overload void setPaintMode();
	@Virtual @Overload void setXORMode(Java_awt_Color p0);
	@Virtual @Overload void translate(int p0, int p1);
}

/* class java.awt.Graphics2D */
class Java_awt_Graphics2D extends Java_awt_Graphics {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getBackground();
	@Virtual @Overload Java_awt_Composite getComposite();
	@Virtual @Overload Java_awt_GraphicsConfiguration getDeviceConfiguration();
	@Virtual @Overload Java_awt_Paint getPaint();
	@Virtual @Overload Java_awt_RenderingHints getRenderingHints();
	@Virtual @Overload Java_awt_Stroke getStroke();
	@Virtual @Overload Java_awt_font_FontRenderContext getFontRenderContext();
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload Object getRenderingHint(Java_awt_RenderingHints_Key p0);
	@Virtual @Overload boolean drawImage(Java_awt_Image p0, Java_awt_geom_AffineTransform p1, Java_awt_image_ImageObserver p2);
	@Virtual @Overload boolean hit(Java_awt_Rectangle p0, Java_awt_Shape p1, boolean p2);
	@Virtual @Overload void addRenderingHints(Java_util_Map p0);
	@Virtual @Overload void clip(Java_awt_Shape p0);
	@Virtual @Overload void draw(Java_awt_Shape p0);
	@Virtual @Overload void drawGlyphVector(Java_awt_font_GlyphVector p0, float p1, float p2);
	@Virtual @Overload void drawImage(Java_awt_image_BufferedImage p0, Java_awt_image_BufferedImageOp p1, int p2, int p3);
	@Virtual @Overload void drawRenderableImage(Java_awt_image_renderable_RenderableImage p0, Java_awt_geom_AffineTransform p1);
	@Virtual @Overload void drawRenderedImage(Java_awt_image_RenderedImage p0, Java_awt_geom_AffineTransform p1);
	@Virtual @Overload void drawString(Java_text_AttributedCharacterIterator p0, float p1, float p2);
	@Virtual @Overload void drawString(String p0, float p1, float p2);
	@Virtual @Overload void fill(Java_awt_Shape p0);
	@Virtual @Overload void rotate(float p0);
	@Virtual @Overload void rotate(float p0, float p1, float p2);
	@Virtual @Overload void scale(float p0, float p1);
	@Virtual @Overload void setBackground(Java_awt_Color p0);
	@Virtual @Overload void setComposite(Java_awt_Composite p0);
	@Virtual @Overload void setPaint(Java_awt_Paint p0);
	@Virtual @Overload void setRenderingHint(Java_awt_RenderingHints_Key p0, Object p1);
	@Virtual @Overload void setRenderingHints(Java_util_Map p0);
	@Virtual @Overload void setStroke(Java_awt_Stroke p0);
	@Virtual @Overload void setTransform(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload void shear(float p0, float p1);
	@Virtual @Overload void transform(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload void translate(float p0, float p1);
}

/* class java.awt.GraphicsConfigTemplate */
class Java_awt_GraphicsConfigTemplate extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_GraphicsConfiguration getBestConfiguration(Java_awt_GraphicsConfiguration[] p0);
	@Virtual @Overload boolean isGraphicsConfigSupported(Java_awt_GraphicsConfiguration p0);
}
Java_awt_GraphicsConfigTemplate Java_awt_GraphicsConfigTemplate.new();

/* class java.awt.GraphicsConfiguration */
class Java_awt_GraphicsConfiguration {
	/*-- Method --*/
	@Virtual @Overload Java_awt_BufferCapabilities getBufferCapabilities();
	@Virtual @Overload Java_awt_GraphicsDevice getDevice();
	@Virtual @Overload Java_awt_ImageCapabilities getImageCapabilities();
	@Virtual @Overload Java_awt_Rectangle getBounds();
	@Virtual @Overload Java_awt_geom_AffineTransform getDefaultTransform();
	@Virtual @Overload Java_awt_geom_AffineTransform getNormalizingTransform();
	@Virtual @Overload Java_awt_image_BufferedImage createCompatibleImage(int p0, int p1);
	@Virtual @Overload Java_awt_image_BufferedImage createCompatibleImage(int p0, int p1, int p2);
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_awt_image_ColorModel getColorModel(int p0);
	@Virtual @Overload Java_awt_image_VolatileImage createCompatibleVolatileImage(int p0, int p1);
	@Virtual @Overload Java_awt_image_VolatileImage createCompatibleVolatileImage(int p0, int p1, Java_awt_ImageCapabilities p2);
	@Virtual @Overload Java_awt_image_VolatileImage createCompatibleVolatileImage(int p0, int p1, Java_awt_ImageCapabilities p2, int p3);
	@Virtual @Overload Java_awt_image_VolatileImage createCompatibleVolatileImage(int p0, int p1, int p2);
	@Virtual @Overload boolean isTranslucencyCapable();
}

/* class java.awt.GraphicsDevice */
class Java_awt_GraphicsDevice {
	/*-- Method --*/
	@Virtual @Overload Java_awt_DisplayMode getDisplayMode();
	@Virtual @Overload Java_awt_DisplayMode[] getDisplayModes();
	@Virtual @Overload Java_awt_GraphicsConfiguration getBestConfiguration(Java_awt_GraphicsConfigTemplate p0);
	@Virtual @Overload Java_awt_GraphicsConfiguration getDefaultConfiguration();
	@Virtual @Overload Java_awt_GraphicsConfiguration[] getConfigurations();
	@Virtual @Overload Java_awt_Window getFullScreenWindow();
	@Virtual @Overload String getIDstring();
	@Virtual @Overload boolean isDisplayChangeSupported();
	@Virtual @Overload boolean isFullScreenSupported();
	@Virtual @Overload boolean isWindowTranslucencySupported(Java_awt_GraphicsDevice_WindowTranslucency p0);
	@Virtual @Overload int getAvailableAcceleratedMemory();
	@Virtual @Overload int getType();
	@Virtual @Overload void setDisplayMode(Java_awt_DisplayMode p0);
	@Virtual @Overload void setFullScreenWindow(Java_awt_Window p0);
}

/* class java.awt.GraphicsEnvironment */
class Java_awt_GraphicsEnvironment {
	/*-- Method --*/
	@Static @Overload Java_awt_GraphicsEnvironment getLocalGraphicsEnvironment();
	@Static @Overload boolean isHeadless();
	@Virtual @Overload Java_awt_Font[] getAllFonts();
	@Virtual @Overload Java_awt_Graphics2D createGraphics(Java_awt_image_BufferedImage p0);
	@Virtual @Overload Java_awt_GraphicsDevice getDefaultScreenDevice();
	@Virtual @Overload Java_awt_GraphicsDevice[] getScreenDevices();
	@Virtual @Overload Java_awt_Point getCenterPoint();
	@Virtual @Overload Java_awt_Rectangle getMaximumWindowBounds();
	@Virtual @Overload String[] getAvailableFontFamilyNames();
	@Virtual @Overload String[] getAvailableFontFamilyNames(Java_util_Locale p0);
	@Virtual @Overload boolean isHeadlessInstance();
	@Virtual @Overload boolean registerFont(Java_awt_Font p0);
	@Virtual @Overload void preferLocaleFonts();
	@Virtual @Overload void preferProportionalFonts();
}

/* class java.awt.GridBagConstraints */
class Java_awt_GridBagConstraints extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Object clone();
}
@Overload Java_awt_GridBagConstraints Java_awt_GridBagConstraints.new();
@Overload Java_awt_GridBagConstraints Java_awt_GridBagConstraints.new(int p0, int p1, int p2, int p3, float p4, float p5, int p6, int p7, Java_awt_Insets p8, int p9, int p10);

/* class java.awt.GridBagLayout */
class Java_awt_GridBagLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Java_awt_GridBagConstraints getConstraints(Java_awt_Component p0);
	@Virtual @Overload Java_awt_Point getLayoutOrigin();
	@Virtual @Overload Java_awt_Point location(int p0, int p1);
	@Virtual @Overload String toString();
	@Virtual @Overload float[][] getLayoutWeights();
	@Virtual @Overload int[][] getLayoutDimensions();
	@Virtual @Overload void setConstraints(Java_awt_Component p0, Java_awt_GridBagConstraints p1);
}
Java_awt_GridBagLayout Java_awt_GridBagLayout.new();

/* class java.awt.GridBagLayoutInfo */
class Java_awt_GridBagLayoutInfo extends Java_io_Serializable {
}

/* class java.awt.GridLayout */
class Java_awt_GridLayout extends Java_awt_LayoutManager {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload int getColumns();
	@Virtual @Overload int getHgap();
	@Virtual @Overload int getRows();
	@Virtual @Overload int getVgap();
	@Virtual @Overload void setColumns(int p0);
	@Virtual @Overload void setHgap(int p0);
	@Virtual @Overload void setRows(int p0);
	@Virtual @Overload void setVgap(int p0);
}
@Overload Java_awt_GridLayout Java_awt_GridLayout.new();
@Overload Java_awt_GridLayout Java_awt_GridLayout.new(int p0, int p1);
@Overload Java_awt_GridLayout Java_awt_GridLayout.new(int p0, int p1, int p2, int p3);

/* class java.awt.HeadlessException */
class Java_awt_HeadlessException extends Java_lang_UnsupportedOperationException {
}
@Overload Java_awt_HeadlessException Java_awt_HeadlessException.new();
@Overload Java_awt_HeadlessException Java_awt_HeadlessException.new(String p0);

/* class java.awt.IllegalComponentStateException */
class Java_awt_IllegalComponentStateException extends Java_lang_IllegalStateException {
}
@Overload Java_awt_IllegalComponentStateException Java_awt_IllegalComponentStateException.new();
@Overload Java_awt_IllegalComponentStateException Java_awt_IllegalComponentStateException.new(String p0);

/* class java.awt.Image */
class Java_awt_Image {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Graphics getGraphics();
	@Virtual @Overload Java_awt_Image getScaledInstance(int p0, int p1, int p2);
	@Virtual @Overload Java_awt_ImageCapabilities getCapabilities(Java_awt_GraphicsConfiguration p0);
	@Virtual @Overload Java_awt_image_ImageProducer getSource();
	@Virtual @Overload Object getProperty(String p0, Java_awt_image_ImageObserver p1);
	@Virtual @Overload float getAccelerationPriority();
	@Virtual @Overload int getHeight(Java_awt_image_ImageObserver p0);
	@Virtual @Overload int getWidth(Java_awt_image_ImageObserver p0);
	@Virtual @Overload void flush();
	@Virtual @Overload void setAccelerationPriority(float p0);
}
Java_awt_Image Java_awt_Image.new();

/* class java.awt.ImageCapabilities */
class Java_awt_ImageCapabilities extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload boolean isAccelerated();
	@Virtual @Overload boolean isTrueVolatile();
}
Java_awt_ImageCapabilities Java_awt_ImageCapabilities.new(boolean p0);

/* class java.awt.Insets */
class Java_awt_Insets extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload void set(int p0, int p1, int p2, int p3);
}
Java_awt_Insets Java_awt_Insets.new(int p0, int p1, int p2, int p3);

/* interface java.awt.ItemSelectable */
class Java_awt_ItemSelectable {
	/*-- Method --*/
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
}

/* class java.awt.JobAttributes */
class Java_awt_JobAttributes extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_JobAttributes_DefaultSelectionType getDefaultSelection();
	@Virtual @Overload Java_awt_JobAttributes_DestinationType getDestination();
	@Virtual @Overload Java_awt_JobAttributes_DialogType getDialog();
	@Virtual @Overload Java_awt_JobAttributes_MultipleDocumentHandlingType getMultipleDocumentHandling();
	@Virtual @Overload Java_awt_JobAttributes_SidesType getSides();
	@Virtual @Overload Object clone();
	@Virtual @Overload String getFileName();
	@Virtual @Overload String getPrinter();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int getCopies();
	@Virtual @Overload int getFromPage();
	@Virtual @Overload int getMaxPage();
	@Virtual @Overload int getMinPage();
	@Virtual @Overload int getToPage();
	@Virtual @Overload int[][] getPageRanges();
	@Virtual @Overload void set(Java_awt_JobAttributes p0);
	@Virtual @Overload void setCopies(int p0);
	@Virtual @Overload void setCopiesToDefault();
	@Virtual @Overload void setDefaultSelection(Java_awt_JobAttributes_DefaultSelectionType p0);
	@Virtual @Overload void setDestination(Java_awt_JobAttributes_DestinationType p0);
	@Virtual @Overload void setDialog(Java_awt_JobAttributes_DialogType p0);
	@Virtual @Overload void setFileName(String p0);
	@Virtual @Overload void setFromPage(int p0);
	@Virtual @Overload void setMaxPage(int p0);
	@Virtual @Overload void setMinPage(int p0);
	@Virtual @Overload void setMultipleDocumentHandling(Java_awt_JobAttributes_MultipleDocumentHandlingType p0);
	@Virtual @Overload void setMultipleDocumentHandlingToDefault();
	@Virtual @Overload void setPageRanges(int[][] p0);
	@Virtual @Overload void setPrinter(String p0);
	@Virtual @Overload void setSides(Java_awt_JobAttributes_SidesType p0);
	@Virtual @Overload void setSidesToDefault();
	@Virtual @Overload void setToPage(int p0);
}
@Overload Java_awt_JobAttributes Java_awt_JobAttributes.new();
@Overload Java_awt_JobAttributes Java_awt_JobAttributes.new(Java_awt_JobAttributes p0);
@Overload Java_awt_JobAttributes Java_awt_JobAttributes.new(int p0, Java_awt_JobAttributes_DefaultSelectionType p1, Java_awt_JobAttributes_DestinationType p2, Java_awt_JobAttributes_DialogType p3, String p4, int p5, int p6, Java_awt_JobAttributes_MultipleDocumentHandlingType p7, int[][] p8, String p9, Java_awt_JobAttributes_SidesType p10);

/* interface java.awt.KeyEventPostProcessor */
class Java_awt_KeyEventPostProcessor {
	/*-- Method --*/
	@Virtual @Overload boolean postProcessKeyEvent(Java_awt_event_KeyEvent p0);
}

/* class java.awt.Label */
class Java_awt_Label extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload String getText();
	@Virtual @Overload int getAlignment();
	@Virtual @Overload void setAlignment(int p0);
	@Virtual @Overload void setText(String p0);
}
@Overload Java_awt_Label Java_awt_Label.new();
@Overload Java_awt_Label Java_awt_Label.new(String p0);
@Overload Java_awt_Label Java_awt_Label.new(String p0, int p1);

/* class java.awt.MultipleGradientPaint */
class Java_awt_MultipleGradientPaint extends Java_awt_Paint {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color[] getColors();
	@Virtual @Overload Java_awt_MultipleGradientPaint_ColorSpaceType getColorSpace();
	@Virtual @Overload Java_awt_MultipleGradientPaint_CycleMethod getCycleMethod();
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload float[] getFractions();
}

/* class java.awt.LinearGradientPaint */
class Java_awt_LinearGradientPaint extends Java_awt_MultipleGradientPaint {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Point2D getEndPoint();
	@Virtual @Overload Java_awt_geom_Point2D getStartPoint();
}
@Overload Java_awt_LinearGradientPaint Java_awt_LinearGradientPaint.new(float p0, float p1, float p2, float p3, float[] p4, Java_awt_Color[] p5);
@Overload Java_awt_LinearGradientPaint Java_awt_LinearGradientPaint.new(float p0, float p1, float p2, float p3, float[] p4, Java_awt_Color[] p5, Java_awt_MultipleGradientPaint_CycleMethod p6);
@Overload Java_awt_LinearGradientPaint Java_awt_LinearGradientPaint.new(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1, float[] p2, Java_awt_Color[] p3);
@Overload Java_awt_LinearGradientPaint Java_awt_LinearGradientPaint.new(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1, float[] p2, Java_awt_Color[] p3, Java_awt_MultipleGradientPaint_CycleMethod p4);
@Overload Java_awt_LinearGradientPaint Java_awt_LinearGradientPaint.new(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1, float[] p2, Java_awt_Color[] p3, Java_awt_MultipleGradientPaint_CycleMethod p4, Java_awt_MultipleGradientPaint_ColorSpaceType p5, Java_awt_geom_AffineTransform p6);

/* class java.awt.List */
class Java_awt_List extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getMinimumSize(int p0);
	@Virtual @Overload Java_awt_Dimension getPreferredSize(int p0);
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload String getItem(int p0);
	@Virtual @Overload String getSelectedItem();
	@Virtual @Overload String[] getItems();
	@Virtual @Overload String[] getSelectedItems();
	@Virtual @Overload boolean isIndexSelected(int p0);
	@Virtual @Overload boolean isMultipleMode();
	@Virtual @Overload int getItemCount();
	@Virtual @Overload int getRows();
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload int getVisibleIndex();
	@Virtual @Overload int[] getSelectedIndexes();
	@Virtual @Overload void add(String p0);
	@Virtual @Overload void add(String p0, int p1);
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void deselect(int p0);
	@Virtual @Overload void makeVisible(int p0);
	@Virtual @Overload void remove(String p0);
	@Virtual @Overload void remove(int p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeAll();
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void replaceItem(String p0, int p1);
	@Virtual @Overload void select(int p0);
	@Virtual @Overload void setMultipleMode(boolean p0);
}
@Overload Java_awt_List Java_awt_List.new();
@Overload Java_awt_List Java_awt_List.new(int p0);
@Overload Java_awt_List Java_awt_List.new(int p0, boolean p1);

/* class java.awt.MediaTracker */
class Java_awt_MediaTracker extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Object[] getErrorsAny();
	@Virtual @Overload Object[] getErrorsID(int p0);
	@Virtual @Overload boolean checkAll();
	@Virtual @Overload boolean checkAll(boolean p0);
	@Virtual @Overload boolean checkID(int p0);
	@Virtual @Overload boolean checkID(int p0, boolean p1);
	@Virtual @Overload boolean isErrorAny();
	@Virtual @Overload boolean isErrorID(int p0);
	@Virtual @Overload boolean waitForAll(int p0);
	@Virtual @Overload boolean waitForID(int p0, int p1);
	@Virtual @Overload int statusAll(boolean p0);
	@Virtual @Overload int statusID(int p0, boolean p1);
	@Virtual @Overload void addImage(Java_awt_Image p0, int p1);
	@Virtual @Overload void addImage(Java_awt_Image p0, int p1, int p2, int p3);
	@Virtual @Overload void removeImage(Java_awt_Image p0);
	@Virtual @Overload void removeImage(Java_awt_Image p0, int p1);
	@Virtual @Overload void removeImage(Java_awt_Image p0, int p1, int p2, int p3);
	@Virtual @Overload void waitForAll();
	@Virtual @Overload void waitForID(int p0);
}
Java_awt_MediaTracker Java_awt_MediaTracker.new(Java_awt_Component p0);

/* class java.awt.Menu */
class Java_awt_Menu extends Java_awt_MenuItem {
	/*-- Method --*/
	@Virtual @Overload Java_awt_MenuItem add(Java_awt_MenuItem p0);
	@Virtual @Overload Java_awt_MenuItem getItem(int p0);
	@Virtual @Overload boolean isTearOff();
	@Virtual @Overload int getItemCount();
	@Virtual @Overload void add(String p0);
	@Virtual @Overload void addSeparator();
	@Virtual @Overload void insert(Java_awt_MenuItem p0, int p1);
	@Virtual @Overload void insert(String p0, int p1);
	@Virtual @Overload void insertSeparator(int p0);
	@Virtual @Overload void remove(Java_awt_MenuComponent p0);
	@Virtual @Overload void remove(int p0);
	@Virtual @Overload void removeAll();
}
@Overload Java_awt_Menu Java_awt_Menu.new();
@Overload Java_awt_Menu Java_awt_Menu.new(String p0);
@Overload Java_awt_Menu Java_awt_Menu.new(String p0, boolean p1);

/* class java.awt.MenuBar */
class Java_awt_MenuBar extends Java_awt_MenuComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Menu add(Java_awt_Menu p0);
	@Virtual @Overload Java_awt_Menu getHelpMenu();
	@Virtual @Overload Java_awt_Menu getMenu(int p0);
	@Virtual @Overload Java_awt_MenuItem getShortcutMenuItem(Java_awt_MenuShortcut p0);
	@Virtual @Overload Java_util_Enumeration shortcuts();
	@Virtual @Overload int getMenuCount();
	@Virtual @Overload void addNotify();
	@Virtual @Overload void deleteShortcut(Java_awt_MenuShortcut p0);
	@Virtual @Overload void remove(Java_awt_MenuComponent p0);
	@Virtual @Overload void remove(int p0);
	@Virtual @Overload void setHelpMenu(Java_awt_Menu p0);
}
Java_awt_MenuBar Java_awt_MenuBar.new();

/* interface java.awt.MenuContainer */
class Java_awt_MenuContainer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload void remove(Java_awt_MenuComponent p0);
}

/* class java.awt.MenuShortcut */
class Java_awt_MenuShortcut extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Java_awt_MenuShortcut p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean usesShiftModifier();
	@Virtual @Overload int getKey();
}
@Overload Java_awt_MenuShortcut Java_awt_MenuShortcut.new(int p0);
@Overload Java_awt_MenuShortcut Java_awt_MenuShortcut.new(int p0, boolean p1);

/* class java.awt.MouseInfo */
class Java_awt_MouseInfo {
	/*-- Method --*/
	@Static @Overload Java_awt_PointerInfo getPointerInfo();
	@Static @Overload int getNumberOfButtons();
}

/* class java.awt.PageAttributes */
class Java_awt_PageAttributes extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_PageAttributes_ColorType getColor();
	@Virtual @Overload Java_awt_PageAttributes_MediaType getMedia();
	@Virtual @Overload Java_awt_PageAttributes_OrientationRequestedType getOrientationRequested();
	@Virtual @Overload Java_awt_PageAttributes_OriginType getOrigin();
	@Virtual @Overload Java_awt_PageAttributes_PrintQualityType getPrintQuality();
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int[] getPrinterResolution();
	@Virtual @Overload void set(Java_awt_PageAttributes p0);
	@Virtual @Overload void setColor(Java_awt_PageAttributes_ColorType p0);
	@Virtual @Overload void setMedia(Java_awt_PageAttributes_MediaType p0);
	@Virtual @Overload void setMediaToDefault();
	@Virtual @Overload void setOrientationRequested(Java_awt_PageAttributes_OrientationRequestedType p0);
	@Virtual @Overload void setOrientationRequested(int p0);
	@Virtual @Overload void setOrientationRequestedToDefault();
	@Virtual @Overload void setOrigin(Java_awt_PageAttributes_OriginType p0);
	@Virtual @Overload void setPrintQuality(Java_awt_PageAttributes_PrintQualityType p0);
	@Virtual @Overload void setPrintQuality(int p0);
	@Virtual @Overload void setPrintQualityToDefault();
	@Virtual @Overload void setPrinterResolution(int p0);
	@Virtual @Overload void setPrinterResolution(int[] p0);
	@Virtual @Overload void setPrinterResolutionToDefault();
}
@Overload Java_awt_PageAttributes Java_awt_PageAttributes.new();
@Overload Java_awt_PageAttributes Java_awt_PageAttributes.new(Java_awt_PageAttributes p0);
@Overload Java_awt_PageAttributes Java_awt_PageAttributes.new(Java_awt_PageAttributes_ColorType p0, Java_awt_PageAttributes_MediaType p1, Java_awt_PageAttributes_OrientationRequestedType p2, Java_awt_PageAttributes_OriginType p3, Java_awt_PageAttributes_PrintQualityType p4, int[] p5);

/* interface java.awt.PaintContext */
class Java_awt_PaintContext {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_awt_image_Raster getRaster(int p0, int p1, int p2, int p3);
	@Virtual @Overload void dispose();
}

/* class java.awt.Panel */
class Java_awt_Panel extends Java_awt_Container {
}
@Overload Java_awt_Panel Java_awt_Panel.new();
@Overload Java_awt_Panel Java_awt_Panel.new(Java_awt_LayoutManager p0);

/* class java.awt.Point */
class Java_awt_Point extends Java_awt_geom_Point2D {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Point getLocation();
	@Virtual @Overload void move(int p0, int p1);
	@Virtual @Overload void setLocation(Java_awt_Point p0);
	@Virtual @Overload void setLocation(int p0, int p1);
	@Virtual @Overload void translate(int p0, int p1);
}
@Overload Java_awt_Point Java_awt_Point.new();
@Overload Java_awt_Point Java_awt_Point.new(Java_awt_Point p0);
@Overload Java_awt_Point Java_awt_Point.new(int p0, int p1);

/* class java.awt.PointerInfo */
class Java_awt_PointerInfo {
	/*-- Method --*/
	@Virtual @Overload Java_awt_GraphicsDevice getDevice();
	@Virtual @Overload Java_awt_Point getLocation();
}

/* interface java.awt.Shape */
class Java_awt_Shape {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Rectangle getBounds();
	@Virtual @Overload Java_awt_geom_PathIterator getPathIterator(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload Java_awt_geom_PathIterator getPathIterator(Java_awt_geom_AffineTransform p0, float p1);
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D();
	@Virtual @Overload boolean contains(Java_awt_geom_Point2D p0);
	@Virtual @Overload boolean contains(Java_awt_geom_Rectangle2D p0);
	@Virtual @Overload boolean contains(float p0, float p1);
	@Virtual @Overload boolean contains(float p0, float p1, float p2, float p3);
	@Virtual @Overload boolean intersects(Java_awt_geom_Rectangle2D p0);
	@Virtual @Overload boolean intersects(float p0, float p1, float p2, float p3);
}

/* class java.awt.Polygon */
class Java_awt_Polygon extends Java_awt_Shape {
	/*-- Method --*/
	@Virtual @Overload boolean contains(Java_awt_Point p0);
	@Virtual @Overload boolean contains(int p0, int p1);
	@Virtual @Overload void addPoint(int p0, int p1);
	@Virtual @Overload void invalidate();
	@Virtual @Overload void reset();
	@Virtual @Overload void translate(int p0, int p1);
}
@Overload Java_awt_Polygon Java_awt_Polygon.new();
@Overload Java_awt_Polygon Java_awt_Polygon.new(int[] p0, int[] p1, int p2);

/* class java.awt.PopupMenu */
class Java_awt_PopupMenu extends Java_awt_Menu {
	/*-- Method --*/
	@Virtual @Overload void show(Java_awt_Component p0, int p1, int p2);
}
@Overload Java_awt_PopupMenu Java_awt_PopupMenu.new();
@Overload Java_awt_PopupMenu Java_awt_PopupMenu.new(String p0);

/* interface java.awt.PrintGraphics */
class Java_awt_PrintGraphics {
	/*-- Method --*/
	@Virtual @Overload Java_awt_PrintJob getPrintJob();
}

/* class java.awt.PrintJob */
class Java_awt_PrintJob {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getPageDimension();
	@Virtual @Overload Java_awt_Graphics getGraphics();
	@Virtual @Overload boolean lastPageFirst();
	@Virtual @Overload int getPageResolution();
	@Virtual @Overload void end();
	@Virtual @Overload void finalize();
}
Java_awt_PrintJob Java_awt_PrintJob.new();

/* class java.awt.RadialGradientPaint */
class Java_awt_RadialGradientPaint extends Java_awt_MultipleGradientPaint {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Point2D getCenterPoint();
	@Virtual @Overload Java_awt_geom_Point2D getFocusPoint();
	@Virtual @Overload float getRadius();
}
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(float p0, float p1, float p2, float[] p3, Java_awt_Color[] p4);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(Java_awt_geom_Point2D p0, float p1, float[] p2, Java_awt_Color[] p3);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(float p0, float p1, float p2, float[] p3, Java_awt_Color[] p4, Java_awt_MultipleGradientPaint_CycleMethod p5);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(Java_awt_geom_Point2D p0, float p1, float[] p2, Java_awt_Color[] p3, Java_awt_MultipleGradientPaint_CycleMethod p4);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(float p0, float p1, float p2, float p3, float p4, float[] p5, Java_awt_Color[] p6, Java_awt_MultipleGradientPaint_CycleMethod p7);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(Java_awt_geom_Point2D p0, float p1, Java_awt_geom_Point2D p2, float[] p3, Java_awt_Color[] p4, Java_awt_MultipleGradientPaint_CycleMethod p5);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(Java_awt_geom_Point2D p0, float p1, Java_awt_geom_Point2D p2, float[] p3, Java_awt_Color[] p4, Java_awt_MultipleGradientPaint_CycleMethod p5, Java_awt_MultipleGradientPaint_ColorSpaceType p6, Java_awt_geom_AffineTransform p7);
@Overload Java_awt_RadialGradientPaint Java_awt_RadialGradientPaint.new(Java_awt_geom_Rectangle2D p0, float[] p1, Java_awt_Color[] p2, Java_awt_MultipleGradientPaint_CycleMethod p3);

/* class java.awt.Rectangle */
class Java_awt_Rectangle extends Java_awt_geom_Rectangle2D {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getSize();
	@Virtual @Overload Java_awt_Point getLocation();
	@Virtual @Overload Java_awt_Rectangle intersection(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_Rectangle union(Java_awt_Rectangle p0);
	@Virtual @Overload boolean contains(Java_awt_Point p0);
	@Virtual @Overload boolean contains(Java_awt_Rectangle p0);
	@Virtual @Overload boolean contains(int p0, int p1);
	@Virtual @Overload boolean contains(int p0, int p1, int p2, int p3);
	@Virtual @Overload boolean intersects(Java_awt_Rectangle p0);
	@Virtual @Overload void add(Java_awt_Point p0);
	@Virtual @Overload void add(Java_awt_Rectangle p0);
	@Virtual @Overload void add(int p0, int p1);
	@Virtual @Overload void grow(int p0, int p1);
	@Virtual @Overload void setBounds(Java_awt_Rectangle p0);
	@Virtual @Overload void setBounds(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setLocation(Java_awt_Point p0);
	@Virtual @Overload void setLocation(int p0, int p1);
	@Virtual @Overload void setSize(Java_awt_Dimension p0);
	@Virtual @Overload void setSize(int p0, int p1);
	@Virtual @Overload void translate(int p0, int p1);
}
@Overload Java_awt_Rectangle Java_awt_Rectangle.new();
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(Java_awt_Rectangle p0);
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(int p0, int p1, int p2, int p3);
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(int p0, int p1);
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(Java_awt_Point p0, Java_awt_Dimension p1);
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(Java_awt_Point p0);
@Overload Java_awt_Rectangle Java_awt_Rectangle.new(Java_awt_Dimension p0);

/* class java.awt.RenderingHints */
class Java_awt_RenderingHints extends Java_util_Map {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload void add(Java_awt_RenderingHints p0);
}
@Overload Java_awt_RenderingHints Java_awt_RenderingHints.new(Java_util_Map p0);
@Overload Java_awt_RenderingHints Java_awt_RenderingHints.new(Java_awt_RenderingHints_Key p0, Object p1);

/* class java.awt.Robot */
class Java_awt_Robot {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getPixelColor(int p0, int p1);
	@Virtual @Overload Java_awt_image_BufferedImage createScreenCapture(Java_awt_Rectangle p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isAutoWaitForIdle();
	@Virtual @Overload int getAutoDelay();
	@Virtual @Overload void delay(int p0);
	@Virtual @Overload void keyPress(int p0);
	@Virtual @Overload void keyRelease(int p0);
	@Virtual @Overload void mouseMove(int p0, int p1);
	@Virtual @Overload void mousePress(int p0);
	@Virtual @Overload void mouseRelease(int p0);
	@Virtual @Overload void mouseWheel(int p0);
	@Virtual @Overload void setAutoDelay(int p0);
	@Virtual @Overload void setAutoWaitForIdle(boolean p0);
	@Virtual @Overload void waitForIdle();
}
@Overload Java_awt_Robot Java_awt_Robot.new();
@Overload Java_awt_Robot Java_awt_Robot.new(Java_awt_GraphicsDevice p0);

/* class java.awt.ScrollPane */
class Java_awt_ScrollPane extends Java_awt_Container {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Adjustable getHAdjustable();
	@Virtual @Overload Java_awt_Adjustable getVAdjustable();
	@Virtual @Overload Java_awt_Dimension getViewportSize();
	@Virtual @Overload Java_awt_Point getScrollPosition();
	@Virtual @Overload String paramString();
	@Virtual @Overload boolean isWheelScrollingEnabled();
	@Virtual @Overload int getHScrollbarHeight();
	@Virtual @Overload int getScrollbarDisplayPolicy();
	@Virtual @Overload int getVScrollbarWidth();
	@Virtual @Overload void setScrollPosition(Java_awt_Point p0);
	@Virtual @Overload void setScrollPosition(int p0, int p1);
	@Virtual @Overload void setWheelScrollingEnabled(boolean p0);
}
@Overload Java_awt_ScrollPane Java_awt_ScrollPane.new();
@Overload Java_awt_ScrollPane Java_awt_ScrollPane.new(int p0);

/* class java.awt.ScrollPaneAdjustable */
class Java_awt_ScrollPaneAdjustable extends Java_awt_Adjustable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_AdjustmentListener[] getAdjustmentListeners();
	@Virtual @Overload String paramString();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
}

/* class java.awt.Scrollbar */
class Java_awt_Scrollbar extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_AdjustmentListener[] getAdjustmentListeners();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload int getBlockIncrement();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload int getUnitIncrement();
	@Virtual @Overload int getValue();
	@Virtual @Overload int getVisibleAmount();
	@Virtual @Overload void addAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void removeAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void setBlockIncrement(int p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setUnitIncrement(int p0);
	@Virtual @Overload void setValue(int p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
	@Virtual @Overload void setValues(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setVisibleAmount(int p0);
}
@Overload Java_awt_Scrollbar Java_awt_Scrollbar.new();
@Overload Java_awt_Scrollbar Java_awt_Scrollbar.new(int p0);
@Overload Java_awt_Scrollbar Java_awt_Scrollbar.new(int p0, int p1, int p2, int p3, int p4);

/* interface java.awt.SecondaryLoop */
class Java_awt_SecondaryLoop {
	/*-- Method --*/
	@Virtual @Overload boolean enter();
	@Virtual @Overload boolean exit();
}

/* class java.awt.SplashScreen */
class Java_awt_SplashScreen {
	/*-- Method --*/
	@Static @Overload Java_awt_SplashScreen getSplashScreen();
	@Virtual @Overload Java_awt_Dimension getSize();
	@Virtual @Overload Java_awt_Graphics2D createGraphics();
	@Virtual @Overload Java_awt_Rectangle getBounds();
	@Virtual @Overload Java_net_URL getImageURL();
	@Virtual @Overload boolean isVisible();
	@Virtual @Overload void close();
	@Virtual @Overload void setImageURL(Java_net_URL p0);
	@Virtual @Overload void update();
}

/* class java.awt.SystemColor */
class Java_awt_SystemColor extends Java_awt_Color {
}

/* class java.awt.SystemTray */
class Java_awt_SystemTray {
	/*-- Method --*/
	@Static @Overload Java_awt_SystemTray getSystemTray();
	@Static @Overload boolean isSupported();
	@Virtual @Overload Java_awt_Dimension getTrayIconSize();
	@Virtual @Overload Java_awt_TrayIcon[] getTrayIcons();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners(String p0);
	@Virtual @Overload void add(Java_awt_TrayIcon p0);
	@Virtual @Overload void addPropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void remove(Java_awt_TrayIcon p0);
	@Virtual @Overload void removePropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
}

/* class java.awt.TextComponent */
class Java_awt_TextComponent extends Java_awt_Component {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_TextListener[] getTextListeners();
	@Virtual @Overload String getSelectedText();
	@Virtual @Overload String getText();
	@Virtual @Overload boolean isEditable();
	@Virtual @Overload int getCaretPosition();
	@Virtual @Overload int getSelectionEnd();
	@Virtual @Overload int getSelectionStart();
	@Virtual @Overload void addTextListener(Java_awt_event_TextListener p0);
	@Virtual @Overload void removeTextListener(Java_awt_event_TextListener p0);
	@Virtual @Overload void select(int p0, int p1);
	@Virtual @Overload void selectAll();
	@Virtual @Overload void setCaretPosition(int p0);
	@Virtual @Overload void setEditable(boolean p0);
	@Virtual @Overload void setSelectionEnd(int p0);
	@Virtual @Overload void setSelectionStart(int p0);
	@Virtual @Overload void setText(String p0);
}

/* class java.awt.TextArea */
class Java_awt_TextArea extends Java_awt_TextComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getMinimumSize(int p0, int p1);
	@Virtual @Overload Java_awt_Dimension getPreferredSize(int p0, int p1);
	@Virtual @Overload int getColumns();
	@Virtual @Overload int getRows();
	@Virtual @Overload int getScrollbarVisibility();
	@Virtual @Overload void append(String p0);
	@Virtual @Overload void insert(String p0, int p1);
	@Virtual @Overload void replaceRange(String p0, int p1, int p2);
	@Virtual @Overload void setColumns(int p0);
	@Virtual @Overload void setRows(int p0);
}
@Overload Java_awt_TextArea Java_awt_TextArea.new();
@Overload Java_awt_TextArea Java_awt_TextArea.new(String p0);
@Overload Java_awt_TextArea Java_awt_TextArea.new(int p0, int p1);
@Overload Java_awt_TextArea Java_awt_TextArea.new(String p0, int p1, int p2);
@Overload Java_awt_TextArea Java_awt_TextArea.new(String p0, int p1, int p2, int p3);

/* class java.awt.TextField */
class Java_awt_TextField extends Java_awt_TextComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getMinimumSize(int p0);
	@Virtual @Overload Java_awt_Dimension getPreferredSize(int p0);
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload boolean echoCharIsSet();
	@Virtual @Overload int getColumns();
	@Virtual @Overload int getEchoChar();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void setColumns(int p0);
	@Virtual @Overload void setEchoChar(int p0);
}
@Overload Java_awt_TextField Java_awt_TextField.new();
@Overload Java_awt_TextField Java_awt_TextField.new(String p0);
@Overload Java_awt_TextField Java_awt_TextField.new(int p0);
@Overload Java_awt_TextField Java_awt_TextField.new(String p0, int p1);

/* class java.awt.TexturePaint */
class Java_awt_TexturePaint extends Java_awt_Paint {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Rectangle2D getAnchorRect();
	@Virtual @Overload Java_awt_image_BufferedImage getImage();
}
Java_awt_TexturePaint Java_awt_TexturePaint.new(Java_awt_image_BufferedImage p0, Java_awt_geom_Rectangle2D p1);

/* class java.awt.Toolkit */
class Java_awt_Toolkit {
	/*-- Method --*/
	@Static @Overload Java_awt_Toolkit getDefaultToolkit();
	@Static @Overload String getProperty(String p0, String p1);
	@Virtual @Overload Java_awt_Cursor createCustomCursor(Java_awt_Image p0, Java_awt_Point p1, String p2);
	@Virtual @Overload Java_awt_Dimension getBestCursorSize(int p0, int p1);
	@Virtual @Overload Java_awt_Dimension getScreenSize();
	@Virtual @Overload Java_awt_EventQueue getSystemEventQueue();
	@Virtual @Overload Java_awt_Image createImage(Java_awt_image_ImageProducer p0);
	@Virtual @Overload Java_awt_Image createImage(Java_net_URL p0);
	@Virtual @Overload Java_awt_Image createImage(String p0);
	@Virtual @Overload Java_awt_Image createImage(int[] p0);
	@Virtual @Overload Java_awt_Image createImage(int[] p0, int p1, int p2);
	@Virtual @Overload Java_awt_Image getImage(Java_net_URL p0);
	@Virtual @Overload Java_awt_Image getImage(String p0);
	@Virtual @Overload Java_awt_Insets getScreenInsets(Java_awt_GraphicsConfiguration p0);
	@Virtual @Overload Java_awt_PrintJob getPrintJob(Java_awt_Frame p0, String p1, Java_awt_JobAttributes p2, Java_awt_PageAttributes p3);
	@Virtual @Overload Java_awt_PrintJob getPrintJob(Java_awt_Frame p0, String p1, Java_util_Properties p2);
	@Virtual @Overload Java_awt_datatransfer_Clipboard getSystemClipboard();
	@Virtual @Overload Java_awt_datatransfer_Clipboard getSystemSelection();
	@Virtual @Overload Java_awt_dnd_DragGestureRecognizer createDragGestureRecognizer(Class p0, Java_awt_dnd_DragSource p1, Java_awt_Component p2, int p3, Java_awt_dnd_DragGestureListener p4);
	@Virtual @Overload Java_awt_dnd_peer_DragSourceContextPeer createDragSourceContextPeer(Java_awt_dnd_DragGestureEvent p0);
	@Virtual @Overload Java_awt_event_AWTEventListener[] getAWTEventListeners();
	@Virtual @Overload Java_awt_event_AWTEventListener[] getAWTEventListeners(int p0);
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners(String p0);
	@Virtual @Overload Java_util_Map mapInputMethodHighlight(Java_awt_im_InputMethodHighlight p0);
	@Virtual @Overload Object getDesktopProperty(String p0);
	@Virtual @Overload boolean areExtraMouseButtonsEnabled();
	@Virtual @Overload boolean getLockingKeyState(int p0);
	@Virtual @Overload boolean isAlwaysOnTopSupported();
	@Virtual @Overload boolean isDynamicLayoutActive();
	@Virtual @Overload boolean isFrameStateSupported(int p0);
	@Virtual @Overload boolean isModalExclusionTypeSupported(Java_awt_Dialog_ModalExclusionType p0);
	@Virtual @Overload boolean isModalityTypeSupported(Java_awt_Dialog_ModalityType p0);
	@Virtual @Overload boolean prepareImage(Java_awt_Image p0, int p1, int p2, Java_awt_image_ImageObserver p3);
	@Virtual @Overload int checkImage(Java_awt_Image p0, int p1, int p2, Java_awt_image_ImageObserver p3);
	@Virtual @Overload int getMaximumCursorColors();
	@Virtual @Overload int getMenuShortcutKeyMask();
	@Virtual @Overload int getScreenResolution();
	@Virtual @Overload void addAWTEventListener(Java_awt_event_AWTEventListener p0, int p1);
	@Virtual @Overload void addPropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void beep();
	@Virtual @Overload void removeAWTEventListener(Java_awt_event_AWTEventListener p0);
	@Virtual @Overload void removePropertyChangeListener(String p0, Java_beans_PropertyChangeListener p1);
	@Virtual @Overload void setDynamicLayout(boolean p0);
	@Virtual @Overload void setLockingKeyState(int p0, boolean p1);
	@Virtual @Overload void sync();
}
Java_awt_Toolkit Java_awt_Toolkit.new();

/* class java.awt.TrayIcon */
class Java_awt_TrayIcon {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getSize();
	@Virtual @Overload Java_awt_Image getImage();
	@Virtual @Overload Java_awt_PopupMenu getPopupMenu();
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_awt_event_MouseListener[] getMouseListeners();
	@Virtual @Overload Java_awt_event_MouseMotionListener[] getMouseMotionListeners();
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload String getToolTip();
	@Virtual @Overload boolean isImageAutoSize();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addMouseListener(Java_awt_event_MouseListener p0);
	@Virtual @Overload void addMouseMotionListener(Java_awt_event_MouseMotionListener p0);
	@Virtual @Overload void displayMessage(String p0, String p1, Java_awt_TrayIcon_MessageType p2);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeMouseListener(Java_awt_event_MouseListener p0);
	@Virtual @Overload void removeMouseMotionListener(Java_awt_event_MouseMotionListener p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setImage(Java_awt_Image p0);
	@Virtual @Overload void setImageAutoSize(boolean p0);
	@Virtual @Overload void setPopupMenu(Java_awt_PopupMenu p0);
	@Virtual @Overload void setToolTip(String p0);
}
@Overload Java_awt_TrayIcon Java_awt_TrayIcon.new(Java_awt_Image p0);
@Overload Java_awt_TrayIcon Java_awt_TrayIcon.new(Java_awt_Image p0, String p1);
@Overload Java_awt_TrayIcon Java_awt_TrayIcon.new(Java_awt_Image p0, String p1, Java_awt_PopupMenu p2);

/*============================================================*/
/* java package java.awt.event */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_awt_AWTEvent;
class Java_awt_Adjustable;
class Java_awt_Component;
class Java_awt_Container;
class Java_awt_ItemSelectable;
class Java_awt_Point;
class Java_awt_Rectangle;
class Java_awt_Window;
class Java_awt_font_TextHitInfo;
class Java_lang_Exception;
class Java_lang_Runnable;
class Java_lang_Throwable;
class Java_text_AttributedCharacterIterator;
class Java_util_EventListener;
class Java_util_EventListenerProxy;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_awt_event_AWTEventListener extends Java_util_EventListener;
class Java_awt_event_AWTEventListenerProxy extends Java_util_EventListenerProxy;
class Java_awt_event_ActionEvent extends Java_awt_AWTEvent;
class Java_awt_event_ActionListener extends Java_util_EventListener;
class Java_awt_event_AdjustmentEvent extends Java_awt_AWTEvent;
class Java_awt_event_AdjustmentListener extends Java_util_EventListener;
class Java_awt_event_ComponentListener extends Java_util_EventListener;
class Java_awt_event_ComponentAdapter extends Java_awt_event_ComponentListener;
class Java_awt_event_ComponentEvent extends Java_awt_AWTEvent;
class Java_awt_event_ContainerListener extends Java_util_EventListener;
class Java_awt_event_ContainerAdapter extends Java_awt_event_ContainerListener;
class Java_awt_event_ContainerEvent extends Java_awt_event_ComponentEvent;
class Java_awt_event_FocusListener extends Java_util_EventListener;
class Java_awt_event_FocusAdapter extends Java_awt_event_FocusListener;
class Java_awt_event_FocusEvent extends Java_awt_event_ComponentEvent;
class Java_awt_event_HierarchyBoundsListener extends Java_util_EventListener;
class Java_awt_event_HierarchyBoundsAdapter extends Java_awt_event_HierarchyBoundsListener;
class Java_awt_event_HierarchyEvent extends Java_awt_AWTEvent;
class Java_awt_event_HierarchyListener extends Java_util_EventListener;
class Java_awt_event_InputEvent extends Java_awt_event_ComponentEvent;
class Java_awt_event_InputMethodEvent extends Java_awt_AWTEvent;
class Java_awt_event_InputMethodListener extends Java_util_EventListener;
class Java_awt_event_InvocationEvent extends Java_awt_AWTEvent;
class Java_awt_event_ItemEvent extends Java_awt_AWTEvent;
class Java_awt_event_ItemListener extends Java_util_EventListener;
class Java_awt_event_KeyListener extends Java_util_EventListener;
class Java_awt_event_KeyAdapter extends Java_awt_event_KeyListener;
class Java_awt_event_KeyEvent extends Java_awt_event_InputEvent;
class Java_awt_event_MouseListener extends Java_util_EventListener;
class Java_awt_event_MouseAdapter extends Java_awt_event_MouseListener;
class Java_awt_event_MouseEvent extends Java_awt_event_InputEvent;
class Java_awt_event_MouseMotionListener extends Java_util_EventListener;
class Java_awt_event_MouseMotionAdapter extends Java_awt_event_MouseMotionListener;
class Java_awt_event_MouseWheelEvent extends Java_awt_event_MouseEvent;
class Java_awt_event_MouseWheelListener extends Java_util_EventListener;
class Java_awt_event_PaintEvent extends Java_awt_event_ComponentEvent;
class Java_awt_event_TextEvent extends Java_awt_AWTEvent;
class Java_awt_event_TextListener extends Java_util_EventListener;
class Java_awt_event_WindowListener extends Java_util_EventListener;
class Java_awt_event_WindowAdapter extends Java_awt_event_WindowListener;
class Java_awt_event_WindowEvent extends Java_awt_event_ComponentEvent;
class Java_awt_event_WindowFocusListener extends Java_util_EventListener;
class Java_awt_event_WindowStateListener extends Java_util_EventListener;

/*------------------------------------------------------------*/
/* interface java.awt.event.AWTEventListener */
class Java_awt_event_AWTEventListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void eventDispatched(Java_awt_AWTEvent p0);
}

/* class java.awt.event.AWTEventListenerProxy */
class Java_awt_event_AWTEventListenerProxy extends Java_util_EventListenerProxy {
	/*-- Method --*/
	@Virtual @Overload int getEventMask();
	@Virtual @Overload void eventDispatched(Java_awt_AWTEvent p0);
}
Java_awt_event_AWTEventListenerProxy Java_awt_event_AWTEventListenerProxy.new(int p0, Java_awt_event_AWTEventListener p1);

/* class java.awt.event.ActionEvent */
class Java_awt_event_ActionEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload int getModifiers();
	@Virtual @Overload int getWhen();
}
@Overload Java_awt_event_ActionEvent Java_awt_event_ActionEvent.new(Object p0, int p1, String p2);
@Overload Java_awt_event_ActionEvent Java_awt_event_ActionEvent.new(Object p0, int p1, String p2, int p3);
@Overload Java_awt_event_ActionEvent Java_awt_event_ActionEvent.new(Object p0, int p1, String p2, int p3, int p4);

/* interface java.awt.event.ActionListener */
class Java_awt_event_ActionListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void actionPerformed(Java_awt_event_ActionEvent p0);
}

/* class java.awt.event.AdjustmentEvent */
class Java_awt_event_AdjustmentEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Adjustable getAdjustable();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload int getAdjustmentType();
	@Virtual @Overload int getValue();
}
@Overload Java_awt_event_AdjustmentEvent Java_awt_event_AdjustmentEvent.new(Java_awt_Adjustable p0, int p1, int p2, int p3);
@Overload Java_awt_event_AdjustmentEvent Java_awt_event_AdjustmentEvent.new(Java_awt_Adjustable p0, int p1, int p2, int p3, boolean p4);

/* interface java.awt.event.AdjustmentListener */
class Java_awt_event_AdjustmentListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void adjustmentValueChanged(Java_awt_event_AdjustmentEvent p0);
}

/* interface java.awt.event.ComponentListener */
class Java_awt_event_ComponentListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void componentHidden(Java_awt_event_ComponentEvent p0);
	@Virtual @Overload void componentMoved(Java_awt_event_ComponentEvent p0);
	@Virtual @Overload void componentResized(Java_awt_event_ComponentEvent p0);
	@Virtual @Overload void componentShown(Java_awt_event_ComponentEvent p0);
}

/* class java.awt.event.ComponentAdapter */
class Java_awt_event_ComponentAdapter extends Java_awt_event_ComponentListener {
}
Java_awt_event_ComponentAdapter Java_awt_event_ComponentAdapter.new();

/* class java.awt.event.ComponentEvent */
class Java_awt_event_ComponentEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
}
Java_awt_event_ComponentEvent Java_awt_event_ComponentEvent.new(Java_awt_Component p0, int p1);

/* interface java.awt.event.ContainerListener */
class Java_awt_event_ContainerListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void componentAdded(Java_awt_event_ContainerEvent p0);
	@Virtual @Overload void componentRemoved(Java_awt_event_ContainerEvent p0);
}

/* class java.awt.event.ContainerAdapter */
class Java_awt_event_ContainerAdapter extends Java_awt_event_ContainerListener {
}
Java_awt_event_ContainerAdapter Java_awt_event_ContainerAdapter.new();

/* class java.awt.event.ContainerEvent */
class Java_awt_event_ContainerEvent extends Java_awt_event_ComponentEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getChild();
	@Virtual @Overload Java_awt_Container getContainer();
}
Java_awt_event_ContainerEvent Java_awt_event_ContainerEvent.new(Java_awt_Component p0, int p1, Java_awt_Component p2);

/* interface java.awt.event.FocusListener */
class Java_awt_event_FocusListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void focusGained(Java_awt_event_FocusEvent p0);
	@Virtual @Overload void focusLost(Java_awt_event_FocusEvent p0);
}

/* class java.awt.event.FocusAdapter */
class Java_awt_event_FocusAdapter extends Java_awt_event_FocusListener {
}
Java_awt_event_FocusAdapter Java_awt_event_FocusAdapter.new();

/* class java.awt.event.FocusEvent */
class Java_awt_event_FocusEvent extends Java_awt_event_ComponentEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getOppositeComponent();
	@Virtual @Overload boolean isTemporary();
}
@Overload Java_awt_event_FocusEvent Java_awt_event_FocusEvent.new(Java_awt_Component p0, int p1, boolean p2, Java_awt_Component p3);
@Overload Java_awt_event_FocusEvent Java_awt_event_FocusEvent.new(Java_awt_Component p0, int p1, boolean p2);
@Overload Java_awt_event_FocusEvent Java_awt_event_FocusEvent.new(Java_awt_Component p0, int p1);

/* interface java.awt.event.HierarchyBoundsListener */
class Java_awt_event_HierarchyBoundsListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void ancestorMoved(Java_awt_event_HierarchyEvent p0);
	@Virtual @Overload void ancestorResized(Java_awt_event_HierarchyEvent p0);
}

/* class java.awt.event.HierarchyBoundsAdapter */
class Java_awt_event_HierarchyBoundsAdapter extends Java_awt_event_HierarchyBoundsListener {
}
Java_awt_event_HierarchyBoundsAdapter Java_awt_event_HierarchyBoundsAdapter.new();

/* class java.awt.event.HierarchyEvent */
class Java_awt_event_HierarchyEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getChanged();
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Java_awt_Container getChangedParent();
	@Virtual @Overload int getChangeFlags();
}
@Overload Java_awt_event_HierarchyEvent Java_awt_event_HierarchyEvent.new(Java_awt_Component p0, int p1, Java_awt_Component p2, Java_awt_Container p3);
@Overload Java_awt_event_HierarchyEvent Java_awt_event_HierarchyEvent.new(Java_awt_Component p0, int p1, Java_awt_Component p2, Java_awt_Container p3, int p4);

/* interface java.awt.event.HierarchyListener */
class Java_awt_event_HierarchyListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void hierarchyChanged(Java_awt_event_HierarchyEvent p0);
}

/* class java.awt.event.InputEvent */
class Java_awt_event_InputEvent extends Java_awt_event_ComponentEvent {
	/*-- Method --*/
	@Static @Overload String getModifiersExText(int p0);
	@Static @Overload int getMaskForButton(int p0);
	@Virtual @Overload boolean isAltDown();
	@Virtual @Overload boolean isAltGraphDown();
	@Virtual @Overload boolean isConsumed();
	@Virtual @Overload boolean isControlDown();
	@Virtual @Overload boolean isMetaDown();
	@Virtual @Overload boolean isShiftDown();
	@Virtual @Overload int getModifiers();
	@Virtual @Overload int getModifiersEx();
	@Virtual @Overload int getWhen();
	@Virtual @Overload void consume();
}

/* class java.awt.event.InputMethodEvent */
class Java_awt_event_InputMethodEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_font_TextHitInfo getCaret();
	@Virtual @Overload Java_awt_font_TextHitInfo getVisiblePosition();
	@Virtual @Overload Java_text_AttributedCharacterIterator getText();
	@Virtual @Overload boolean isConsumed();
	@Virtual @Overload int getCommittedCharacterCount();
	@Virtual @Overload int getWhen();
	@Virtual @Overload void consume();
}
@Overload Java_awt_event_InputMethodEvent Java_awt_event_InputMethodEvent.new(Java_awt_Component p0, int p1, int p2, Java_text_AttributedCharacterIterator p3, int p4, Java_awt_font_TextHitInfo p5, Java_awt_font_TextHitInfo p6);
@Overload Java_awt_event_InputMethodEvent Java_awt_event_InputMethodEvent.new(Java_awt_Component p0, int p1, Java_text_AttributedCharacterIterator p2, int p3, Java_awt_font_TextHitInfo p4, Java_awt_font_TextHitInfo p5);
@Overload Java_awt_event_InputMethodEvent Java_awt_event_InputMethodEvent.new(Java_awt_Component p0, int p1, Java_awt_font_TextHitInfo p2, Java_awt_font_TextHitInfo p3);

/* interface java.awt.event.InputMethodListener */
class Java_awt_event_InputMethodListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void caretPositionChanged(Java_awt_event_InputMethodEvent p0);
	@Virtual @Overload void inputMethodTextChanged(Java_awt_event_InputMethodEvent p0);
}

/* class java.awt.event.InvocationEvent */
class Java_awt_event_InvocationEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Exception getException();
	@Virtual @Overload Java_lang_Throwable getThrowable();
	@Virtual @Overload boolean isDispatched();
	@Virtual @Overload int getWhen();
	@Virtual @Overload void dispatch();
}
@Overload Java_awt_event_InvocationEvent Java_awt_event_InvocationEvent.new(Object p0, Java_lang_Runnable p1);
@Overload Java_awt_event_InvocationEvent Java_awt_event_InvocationEvent.new(Object p0, Java_lang_Runnable p1, Object p2, boolean p3);

/* class java.awt.event.ItemEvent */
class Java_awt_event_ItemEvent extends Java_awt_AWTEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_ItemSelectable getItemSelectable();
	@Virtual @Overload Object getItem();
	@Virtual @Overload int getStateChange();
}
Java_awt_event_ItemEvent Java_awt_event_ItemEvent.new(Java_awt_ItemSelectable p0, int p1, Object p2, int p3);

/* interface java.awt.event.ItemListener */
class Java_awt_event_ItemListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void itemStateChanged(Java_awt_event_ItemEvent p0);
}

/* interface java.awt.event.KeyListener */
class Java_awt_event_KeyListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void keyPressed(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void keyReleased(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void keyTyped(Java_awt_event_KeyEvent p0);
}

/* class java.awt.event.KeyAdapter */
class Java_awt_event_KeyAdapter extends Java_awt_event_KeyListener {
}
Java_awt_event_KeyAdapter Java_awt_event_KeyAdapter.new();

/* class java.awt.event.KeyEvent */
class Java_awt_event_KeyEvent extends Java_awt_event_InputEvent {
	/*-- Method --*/
	@Static @Overload String getKeyModifiersText(int p0);
	@Static @Overload String getKeyText(int p0);
	@Static @Overload int getExtendedKeyCodeForChar(int p0);
	@Virtual @Overload boolean isActionKey();
	@Virtual @Overload int getExtendedKeyCode();
	@Virtual @Overload int getKeyChar();
	@Virtual @Overload int getKeyCode();
	@Virtual @Overload int getKeyLocation();
	@Virtual @Overload void setKeyChar(int p0);
	@Virtual @Overload void setKeyCode(int p0);
}
@Overload Java_awt_event_KeyEvent Java_awt_event_KeyEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6);
@Overload Java_awt_event_KeyEvent Java_awt_event_KeyEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5);
@Overload Java_awt_event_KeyEvent Java_awt_event_KeyEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4);

/* interface java.awt.event.MouseListener */
class Java_awt_event_MouseListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void mouseClicked(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseEntered(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseExited(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mousePressed(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseReleased(Java_awt_event_MouseEvent p0);
}

/* class java.awt.event.MouseAdapter */
class Java_awt_event_MouseAdapter extends Java_awt_event_MouseListener {
	/*-- Method --*/
	@Virtual @Overload void mouseDragged(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseMoved(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseWheelMoved(Java_awt_event_MouseWheelEvent p0);
}
Java_awt_event_MouseAdapter Java_awt_event_MouseAdapter.new();

/* class java.awt.event.MouseEvent */
class Java_awt_event_MouseEvent extends Java_awt_event_InputEvent {
	/*-- Method --*/
	@Static @Overload String getMouseModifiersText(int p0);
	@Virtual @Overload Java_awt_Point getLocationOnScreen();
	@Virtual @Overload Java_awt_Point getPoint();
	@Virtual @Overload boolean isPopupTrigger();
	@Virtual @Overload int getButton();
	@Virtual @Overload int getClickCount();
	@Virtual @Overload int getX();
	@Virtual @Overload int getXOnScreen();
	@Virtual @Overload int getY();
	@Virtual @Overload int getYOnScreen();
	@Virtual @Overload void translatePoint(int p0, int p1);
}
@Overload Java_awt_event_MouseEvent Java_awt_event_MouseEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, boolean p7, int p8);
@Overload Java_awt_event_MouseEvent Java_awt_event_MouseEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, boolean p7);
@Overload Java_awt_event_MouseEvent Java_awt_event_MouseEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, boolean p9, int p10);

/* interface java.awt.event.MouseMotionListener */
class Java_awt_event_MouseMotionListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void mouseDragged(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void mouseMoved(Java_awt_event_MouseEvent p0);
}

/* class java.awt.event.MouseMotionAdapter */
class Java_awt_event_MouseMotionAdapter extends Java_awt_event_MouseMotionListener {
}
Java_awt_event_MouseMotionAdapter Java_awt_event_MouseMotionAdapter.new();

/* class java.awt.event.MouseWheelEvent */
class Java_awt_event_MouseWheelEvent extends Java_awt_event_MouseEvent {
	/*-- Method --*/
	@Virtual @Overload float getPreciseWheelRotation();
	@Virtual @Overload int getScrollAmount();
	@Virtual @Overload int getScrollType();
	@Virtual @Overload int getUnitsToScroll();
	@Virtual @Overload int getWheelRotation();
}
@Overload Java_awt_event_MouseWheelEvent Java_awt_event_MouseWheelEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, boolean p7, int p8, int p9, int p10);
@Overload Java_awt_event_MouseWheelEvent Java_awt_event_MouseWheelEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, boolean p9, int p10, int p11, int p12);
@Overload Java_awt_event_MouseWheelEvent Java_awt_event_MouseWheelEvent.new(Java_awt_Component p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, boolean p9, int p10, int p11, int p12, float p13);

/* interface java.awt.event.MouseWheelListener */
class Java_awt_event_MouseWheelListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void mouseWheelMoved(Java_awt_event_MouseWheelEvent p0);
}

/* class java.awt.event.PaintEvent */
class Java_awt_event_PaintEvent extends Java_awt_event_ComponentEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Rectangle getUpdateRect();
	@Virtual @Overload void setUpdateRect(Java_awt_Rectangle p0);
}
Java_awt_event_PaintEvent Java_awt_event_PaintEvent.new(Java_awt_Component p0, int p1, Java_awt_Rectangle p2);

/* class java.awt.event.TextEvent */
class Java_awt_event_TextEvent extends Java_awt_AWTEvent {
}
Java_awt_event_TextEvent Java_awt_event_TextEvent.new(Object p0, int p1);

/* interface java.awt.event.TextListener */
class Java_awt_event_TextListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void textValueChanged(Java_awt_event_TextEvent p0);
}

/* interface java.awt.event.WindowListener */
class Java_awt_event_WindowListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void windowActivated(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowClosed(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowClosing(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowDeactivated(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowDeiconified(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowIconified(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowOpened(Java_awt_event_WindowEvent p0);
}

/* class java.awt.event.WindowAdapter */
class Java_awt_event_WindowAdapter extends Java_awt_event_WindowListener {
	/*-- Method --*/
	@Virtual @Overload void windowGainedFocus(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowLostFocus(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowStateChanged(Java_awt_event_WindowEvent p0);
}
Java_awt_event_WindowAdapter Java_awt_event_WindowAdapter.new();

/* class java.awt.event.WindowEvent */
class Java_awt_event_WindowEvent extends Java_awt_event_ComponentEvent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Window getOppositeWindow();
	@Virtual @Overload Java_awt_Window getWindow();
	@Virtual @Overload int getNewState();
	@Virtual @Overload int getOldState();
}
@Overload Java_awt_event_WindowEvent Java_awt_event_WindowEvent.new(Java_awt_Window p0, int p1, Java_awt_Window p2, int p3, int p4);
@Overload Java_awt_event_WindowEvent Java_awt_event_WindowEvent.new(Java_awt_Window p0, int p1, Java_awt_Window p2);
@Overload Java_awt_event_WindowEvent Java_awt_event_WindowEvent.new(Java_awt_Window p0, int p1, int p2, int p3);
@Overload Java_awt_event_WindowEvent Java_awt_event_WindowEvent.new(Java_awt_Window p0, int p1);

/* interface java.awt.event.WindowFocusListener */
class Java_awt_event_WindowFocusListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void windowGainedFocus(Java_awt_event_WindowEvent p0);
	@Virtual @Overload void windowLostFocus(Java_awt_event_WindowEvent p0);
}

/* interface java.awt.event.WindowStateListener */
class Java_awt_event_WindowStateListener extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload void windowStateChanged(Java_awt_event_WindowEvent p0);
}

/*============================================================*/
/* java package java.awt.image */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_awt_BufferCapabilities;
class Java_awt_Graphics;
class Java_awt_Graphics2D;
class Java_awt_GraphicsConfiguration;
class Java_awt_Image;
class Java_awt_ImageCapabilities;
class Java_awt_Point;
class Java_awt_Rectangle;
class Java_awt_RenderingHints;
class Java_awt_Transparency;
class Java_awt_color_ColorSpace;
class Java_awt_color_ICC_Profile;
class Java_awt_geom_AffineTransform;
class Java_awt_geom_Point2D;
class Java_awt_geom_Rectangle2D;
class Java_lang_Cloneable;
class Java_lang_RuntimeException;
class Java_math_BigInteger;
class Java_util_Hashtable;
class Java_util_Vector;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_awt_image_BufferedImageOp;
class Java_awt_image_AffineTransformOp extends Java_awt_image_BufferedImageOp;
class Java_awt_image_ImageConsumer;
class Java_awt_image_ImageFilter extends Java_awt_image_ImageConsumer;
class Java_awt_image_ReplicateScaleFilter extends Java_awt_image_ImageFilter;
class Java_awt_image_AreaAveragingScaleFilter extends Java_awt_image_ReplicateScaleFilter;
class Java_awt_image_RasterOp;
class Java_awt_image_BandCombineOp extends Java_awt_image_RasterOp;
class Java_awt_image_SampleModel;
class Java_awt_image_ComponentSampleModel extends Java_awt_image_SampleModel;
class Java_awt_image_BandedSampleModel extends Java_awt_image_ComponentSampleModel;
class Java_awt_image_BufferStrategy;
class Java_awt_image_BufferedImage extends Java_awt_Image;
class Java_awt_image_BufferedImageFilter extends Java_awt_image_ImageFilter;
class Java_awt_image_LookupTable;
class Java_awt_image_ByteLookupTable extends Java_awt_image_LookupTable;
class Java_awt_image_ColorConvertOp extends Java_awt_image_BufferedImageOp;
class Java_awt_image_ColorModel extends Java_awt_Transparency;
class Java_awt_image_ComponentColorModel extends Java_awt_image_ColorModel;
class Java_awt_image_ConvolveOp extends Java_awt_image_BufferedImageOp;
class Java_awt_image_CropImageFilter extends Java_awt_image_ImageFilter;
class Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferByte extends Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferDouble extends Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferFloat extends Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferInt extends Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferShort extends Java_awt_image_DataBuffer;
class Java_awt_image_DataBufferUShort extends Java_awt_image_DataBuffer;
class Java_awt_image_PackedColorModel extends Java_awt_image_ColorModel;
class Java_awt_image_DirectColorModel extends Java_awt_image_PackedColorModel;
class Java_awt_image_ImageProducer;
class Java_awt_image_FilteredImageSource extends Java_awt_image_ImageProducer;
class Java_awt_image_ImageObserver;
class Java_awt_image_ImagingOpException extends Java_lang_RuntimeException;
class Java_awt_image_IndexColorModel extends Java_awt_image_ColorModel;
class Java_awt_image_Kernel extends Java_lang_Cloneable;
class Java_awt_image_LookupOp extends Java_awt_image_BufferedImageOp;
class Java_awt_image_MemoryImageSource extends Java_awt_image_ImageProducer;
class Java_awt_image_MultiPixelPackedSampleModel extends Java_awt_image_SampleModel;
class Java_awt_image_PixelGrabber extends Java_awt_image_ImageConsumer;
class Java_awt_image_PixelInterleavedSampleModel extends Java_awt_image_ComponentSampleModel;
class Java_awt_image_RGBImageFilter extends Java_awt_image_ImageFilter;
class Java_awt_image_Raster;
class Java_awt_image_RasterFormatException extends Java_lang_RuntimeException;
class Java_awt_image_RenderedImage;
class Java_awt_image_RescaleOp extends Java_awt_image_BufferedImageOp;
class Java_awt_image_ShortLookupTable extends Java_awt_image_LookupTable;
class Java_awt_image_SinglePixelPackedSampleModel extends Java_awt_image_SampleModel;
class Java_awt_image_TileObserver;
class Java_awt_image_VolatileImage extends Java_awt_Image;
class Java_awt_image_WritableRaster extends Java_awt_image_Raster;
class Java_awt_image_WritableRenderedImage extends Java_awt_image_RenderedImage;

/*------------------------------------------------------------*/
/* interface java.awt.image.BufferedImageOp */
class Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_RenderingHints getRenderingHints();
	@Virtual @Overload Java_awt_geom_Point2D getPoint2D(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1);
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_BufferedImage p0);
	@Virtual @Overload Java_awt_image_BufferedImage createCompatibleDestImage(Java_awt_image_BufferedImage p0, Java_awt_image_ColorModel p1);
	@Virtual @Overload Java_awt_image_BufferedImage filter(Java_awt_image_BufferedImage p0, Java_awt_image_BufferedImage p1);
}

/* class java.awt.image.AffineTransformOp */
class Java_awt_image_AffineTransformOp extends Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
	@Virtual @Overload int getInterpolationType();
}
@Overload Java_awt_image_AffineTransformOp Java_awt_image_AffineTransformOp.new(Java_awt_geom_AffineTransform p0, Java_awt_RenderingHints p1);
@Overload Java_awt_image_AffineTransformOp Java_awt_image_AffineTransformOp.new(Java_awt_geom_AffineTransform p0, int p1);

/* interface java.awt.image.ImageConsumer */
class Java_awt_image_ImageConsumer {
	/*-- Method --*/
	@Virtual @Overload void imageComplete(int p0);
	@Virtual @Overload void setColorModel(Java_awt_image_ColorModel p0);
	@Virtual @Overload void setDimensions(int p0, int p1);
	@Virtual @Overload void setHints(int p0);
	@Virtual @Overload void setPixels(int p0, int p1, int p2, int p3, Java_awt_image_ColorModel p4, int[] p5, int p6, int p7);
	@Virtual @Overload void setProperties(Java_util_Hashtable p0);
}

/* class java.awt.image.ImageFilter */
class Java_awt_image_ImageFilter extends Java_awt_image_ImageConsumer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_ImageFilter getFilterInstance(Java_awt_image_ImageConsumer p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload void resendTopDownLeftRight(Java_awt_image_ImageProducer p0);
}
Java_awt_image_ImageFilter Java_awt_image_ImageFilter.new();

/* class java.awt.image.ReplicateScaleFilter */
class Java_awt_image_ReplicateScaleFilter extends Java_awt_image_ImageFilter {
}
Java_awt_image_ReplicateScaleFilter Java_awt_image_ReplicateScaleFilter.new(int p0, int p1);

/* class java.awt.image.AreaAveragingScaleFilter */
class Java_awt_image_AreaAveragingScaleFilter extends Java_awt_image_ReplicateScaleFilter {
}
Java_awt_image_AreaAveragingScaleFilter Java_awt_image_AreaAveragingScaleFilter.new(int p0, int p1);

/* interface java.awt.image.RasterOp */
class Java_awt_image_RasterOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_RenderingHints getRenderingHints();
	@Virtual @Overload Java_awt_geom_Point2D getPoint2D(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1);
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
}

/* class java.awt.image.BandCombineOp */
class Java_awt_image_BandCombineOp extends Java_awt_image_RasterOp {
	/*-- Method --*/
	@Virtual @Overload float[][] getMatrix();
}
Java_awt_image_BandCombineOp Java_awt_image_BandCombineOp.new(float[][] p0, Java_awt_RenderingHints p1);

/* class java.awt.image.SampleModel */
class Java_awt_image_SampleModel {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_DataBuffer createDataBuffer();
	@Virtual @Overload Java_awt_image_SampleModel createCompatibleSampleModel(int p0, int p1);
	@Virtual @Overload Java_awt_image_SampleModel createSubsetSampleModel(int[] p0);
	@Virtual @Overload Object getDataElements(int p0, int p1, Object p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload Object getDataElements(int p0, int p1, int p2, int p3, Object p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload float getSampleDouble(int p0, int p1, int p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload float getSampleFloat(int p0, int p1, int p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload float[] getPixel(int p0, int p1, float[] p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload float[] getPixels(int p0, int p1, int p2, int p3, float[] p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload float[] getSamples(int p0, int p1, int p2, int p3, int p4, float[] p5, Java_awt_image_DataBuffer p6);
	@Virtual @Overload int getDataType();
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getNumBands();
	@Virtual @Overload int getNumDataElements();
	@Virtual @Overload int getSample(int p0, int p1, int p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload int getSampleSize(int p0);
	@Virtual @Overload int getTransferType();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int[] getPixel(int p0, int p1, int[] p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload int[] getPixels(int p0, int p1, int p2, int p3, int[] p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload int[] getSampleSize();
	@Virtual @Overload int[] getSamples(int p0, int p1, int p2, int p3, int p4, int[] p5, Java_awt_image_DataBuffer p6);
	@Virtual @Overload void setDataElements(int p0, int p1, Object p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload void setDataElements(int p0, int p1, int p2, int p3, Object p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload void setPixel(int p0, int p1, float[] p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload void setPixel(int p0, int p1, int[] p2, Java_awt_image_DataBuffer p3);
	@Virtual @Overload void setPixels(int p0, int p1, int p2, int p3, float[] p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload void setPixels(int p0, int p1, int p2, int p3, int[] p4, Java_awt_image_DataBuffer p5);
	@Virtual @Overload void setSample(int p0, int p1, int p2, float p3, Java_awt_image_DataBuffer p4);
	@Virtual @Overload void setSample(int p0, int p1, int p2, int p3, Java_awt_image_DataBuffer p4);
	@Virtual @Overload void setSamples(int p0, int p1, int p2, int p3, int p4, float[] p5, Java_awt_image_DataBuffer p6);
	@Virtual @Overload void setSamples(int p0, int p1, int p2, int p3, int p4, int[] p5, Java_awt_image_DataBuffer p6);
}
Java_awt_image_SampleModel Java_awt_image_SampleModel.new(int p0, int p1, int p2, int p3);

/* class java.awt.image.ComponentSampleModel */
class Java_awt_image_ComponentSampleModel extends Java_awt_image_SampleModel {
	/*-- Method --*/
	@Virtual @Overload int getOffset(int p0, int p1);
	@Virtual @Overload int getOffset(int p0, int p1, int p2);
	@Virtual @Overload int getPixelStride();
	@Virtual @Overload int getScanlineStride();
	@Virtual @Overload int[] getBandOffsets();
	@Virtual @Overload int[] getBankIndices();
}
@Overload Java_awt_image_ComponentSampleModel Java_awt_image_ComponentSampleModel.new(int p0, int p1, int p2, int p3, int p4, int[] p5);
@Overload Java_awt_image_ComponentSampleModel Java_awt_image_ComponentSampleModel.new(int p0, int p1, int p2, int p3, int p4, int[] p5, int[] p6);

/* class java.awt.image.BandedSampleModel */
class Java_awt_image_BandedSampleModel extends Java_awt_image_ComponentSampleModel {
}
@Overload Java_awt_image_BandedSampleModel Java_awt_image_BandedSampleModel.new(int p0, int p1, int p2, int p3);
@Overload Java_awt_image_BandedSampleModel Java_awt_image_BandedSampleModel.new(int p0, int p1, int p2, int p3, int[] p4, int[] p5);

/* class java.awt.image.BufferStrategy */
class Java_awt_image_BufferStrategy {
	/*-- Method --*/
	@Virtual @Overload Java_awt_BufferCapabilities getCapabilities();
	@Virtual @Overload Java_awt_Graphics getDrawGraphics();
	@Virtual @Overload boolean contentsLost();
	@Virtual @Overload boolean contentsRestored();
	@Virtual @Overload void dispose();
	@Virtual @Overload void show();
}
Java_awt_image_BufferStrategy Java_awt_image_BufferStrategy.new();

/* class java.awt.image.BufferedImage */
class Java_awt_image_BufferedImage extends Java_awt_Image {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Graphics2D createGraphics();
	@Virtual @Overload Java_awt_Point[] getWritableTileIndices();
	@Virtual @Overload Java_awt_image_BufferedImage getSubimage(int p0, int p1, int p2, int p3);
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_awt_image_Raster getData();
	@Virtual @Overload Java_awt_image_Raster getData(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_image_Raster getTile(int p0, int p1);
	@Virtual @Overload Java_awt_image_SampleModel getSampleModel();
	@Virtual @Overload Java_awt_image_WritableRaster copyData(Java_awt_image_WritableRaster p0);
	@Virtual @Overload Java_awt_image_WritableRaster getAlphaRaster();
	@Virtual @Overload Java_awt_image_WritableRaster getRaster();
	@Virtual @Overload Java_awt_image_WritableRaster getWritableTile(int p0, int p1);
	@Virtual @Overload Java_util_Vector getSources();
	@Virtual @Overload Object getProperty(String p0);
	@Virtual @Overload String[] getPropertyNames();
	@Virtual @Overload boolean hasTileWriters();
	@Virtual @Overload boolean isAlphaPremultiplied();
	@Virtual @Overload boolean isTileWritable(int p0, int p1);
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getMinTileX();
	@Virtual @Overload int getMinTileY();
	@Virtual @Overload int getMinX();
	@Virtual @Overload int getMinY();
	@Virtual @Overload int getNumXTiles();
	@Virtual @Overload int getNumYTiles();
	@Virtual @Overload int getRGB(int p0, int p1);
	@Virtual @Overload int getTileGridXOffset();
	@Virtual @Overload int getTileGridYOffset();
	@Virtual @Overload int getTileHeight();
	@Virtual @Overload int getTileWidth();
	@Virtual @Overload int getTransparency();
	@Virtual @Overload int getType();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int[] getRGB(int p0, int p1, int p2, int p3, int[] p4, int p5, int p6);
	@Virtual @Overload void addTileObserver(Java_awt_image_TileObserver p0);
	@Virtual @Overload void coerceData(boolean p0);
	@Virtual @Overload void releaseWritableTile(int p0, int p1);
	@Virtual @Overload void removeTileObserver(Java_awt_image_TileObserver p0);
	@Virtual @Overload void setData(Java_awt_image_Raster p0);
	@Virtual @Overload void setRGB(int p0, int p1, int p2);
	@Virtual @Overload void setRGB(int p0, int p1, int p2, int p3, int[] p4, int p5, int p6);
}
@Overload Java_awt_image_BufferedImage Java_awt_image_BufferedImage.new(int p0, int p1, int p2);
@Overload Java_awt_image_BufferedImage Java_awt_image_BufferedImage.new(int p0, int p1, int p2, Java_awt_image_IndexColorModel p3);
@Overload Java_awt_image_BufferedImage Java_awt_image_BufferedImage.new(Java_awt_image_ColorModel p0, Java_awt_image_WritableRaster p1, boolean p2, Java_util_Hashtable p3);

/* class java.awt.image.BufferedImageFilter */
class Java_awt_image_BufferedImageFilter extends Java_awt_image_ImageFilter {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_BufferedImageOp getBufferedImageOp();
}
Java_awt_image_BufferedImageFilter Java_awt_image_BufferedImageFilter.new(Java_awt_image_BufferedImageOp p0);

/* class java.awt.image.LookupTable */
class Java_awt_image_LookupTable {
	/*-- Method --*/
	@Virtual @Overload int getNumComponents();
	@Virtual @Overload int getOffset();
	@Virtual @Overload int[] lookupPixel(int[] p0, int[] p1);
}

/* class java.awt.image.ByteLookupTable */
class Java_awt_image_ByteLookupTable extends Java_awt_image_LookupTable {
	/*-- Method --*/
	@Virtual @Overload int[] lookupPixel(int[] p0, int[] p1);
	@Virtual @Overload int[][] getTable();
}
@Overload Java_awt_image_ByteLookupTable Java_awt_image_ByteLookupTable.new(int p0, int[][] p1);
@Overload Java_awt_image_ByteLookupTable Java_awt_image_ByteLookupTable.new(int p0, int[] p1);

/* class java.awt.image.ColorConvertOp */
class Java_awt_image_ColorConvertOp extends Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_color_ICC_Profile[] getICC_Profiles();
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
}
@Overload Java_awt_image_ColorConvertOp Java_awt_image_ColorConvertOp.new(Java_awt_RenderingHints p0);
@Overload Java_awt_image_ColorConvertOp Java_awt_image_ColorConvertOp.new(Java_awt_color_ColorSpace p0, Java_awt_RenderingHints p1);
@Overload Java_awt_image_ColorConvertOp Java_awt_image_ColorConvertOp.new(Java_awt_color_ColorSpace p0, Java_awt_color_ColorSpace p1, Java_awt_RenderingHints p2);
@Overload Java_awt_image_ColorConvertOp Java_awt_image_ColorConvertOp.new(Java_awt_color_ICC_Profile[] p0, Java_awt_RenderingHints p1);

/* class java.awt.image.ColorModel */
class Java_awt_image_ColorModel extends Java_awt_Transparency {
	/*-- Method --*/
	@Static @Overload Java_awt_image_ColorModel getRGBdefault();
	@Virtual @Overload Java_awt_color_ColorSpace getColorSpace();
	@Virtual @Overload Java_awt_image_ColorModel coerceData(Java_awt_image_WritableRaster p0, boolean p1);
	@Virtual @Overload Java_awt_image_SampleModel createCompatibleSampleModel(int p0, int p1);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleWritableRaster(int p0, int p1);
	@Virtual @Overload Java_awt_image_WritableRaster getAlphaRaster(Java_awt_image_WritableRaster p0);
	@Virtual @Overload Object getDataElements(float[] p0, int p1, Object p2);
	@Virtual @Overload Object getDataElements(int p0, Object p1);
	@Virtual @Overload Object getDataElements(int[] p0, int p1, Object p2);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean hasAlpha();
	@Virtual @Overload boolean isAlphaPremultiplied();
	@Virtual @Overload boolean isCompatibleRaster(Java_awt_image_Raster p0);
	@Virtual @Overload boolean isCompatibleSampleModel(Java_awt_image_SampleModel p0);
	@Virtual @Overload float[] getNormalizedComponents(Object p0, float[] p1, int p2);
	@Virtual @Overload float[] getNormalizedComponents(int[] p0, int p1, float[] p2, int p3);
	@Virtual @Overload int getAlpha(Object p0);
	@Virtual @Overload int getAlpha(int p0);
	@Virtual @Overload int getBlue(Object p0);
	@Virtual @Overload int getBlue(int p0);
	@Virtual @Overload int getComponentSize(int p0);
	@Virtual @Overload int getDataElement(float[] p0, int p1);
	@Virtual @Overload int getDataElement(int[] p0, int p1);
	@Virtual @Overload int getGreen(Object p0);
	@Virtual @Overload int getGreen(int p0);
	@Virtual @Overload int getNumColorComponents();
	@Virtual @Overload int getNumComponents();
	@Virtual @Overload int getPixelSize();
	@Virtual @Overload int getRGB(Object p0);
	@Virtual @Overload int getRGB(int p0);
	@Virtual @Overload int getRed(Object p0);
	@Virtual @Overload int getRed(int p0);
	@Virtual @Overload int getTransferType();
	@Virtual @Overload int[] getComponentSize();
	@Virtual @Overload int[] getComponents(Object p0, int[] p1, int p2);
	@Virtual @Overload int[] getComponents(int p0, int[] p1, int p2);
	@Virtual @Overload int[] getUnnormalizedComponents(float[] p0, int p1, int[] p2, int p3);
	@Virtual @Overload void finalize();
}
Java_awt_image_ColorModel Java_awt_image_ColorModel.new(int p0);

/* class java.awt.image.ComponentColorModel */
class Java_awt_image_ComponentColorModel extends Java_awt_image_ColorModel {
}
@Overload Java_awt_image_ComponentColorModel Java_awt_image_ComponentColorModel.new(Java_awt_color_ColorSpace p0, int[] p1, boolean p2, boolean p3, int p4, int p5);
@Overload Java_awt_image_ComponentColorModel Java_awt_image_ComponentColorModel.new(Java_awt_color_ColorSpace p0, boolean p1, boolean p2, int p3, int p4);

/* class java.awt.image.ConvolveOp */
class Java_awt_image_ConvolveOp extends Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_Kernel getKernel();
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
	@Virtual @Overload int getEdgeCondition();
}
@Overload Java_awt_image_ConvolveOp Java_awt_image_ConvolveOp.new(Java_awt_image_Kernel p0, int p1, Java_awt_RenderingHints p2);
@Overload Java_awt_image_ConvolveOp Java_awt_image_ConvolveOp.new(Java_awt_image_Kernel p0);

/* class java.awt.image.CropImageFilter */
class Java_awt_image_CropImageFilter extends Java_awt_image_ImageFilter {
}
Java_awt_image_CropImageFilter Java_awt_image_CropImageFilter.new(int p0, int p1, int p2, int p3);

/* class java.awt.image.DataBuffer */
class Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Static @Overload int getDataTypeSize(int p0);
	@Virtual @Overload float getElemDouble(int p0);
	@Virtual @Overload float getElemDouble(int p0, int p1);
	@Virtual @Overload float getElemFloat(int p0);
	@Virtual @Overload float getElemFloat(int p0, int p1);
	@Virtual @Overload int getDataType();
	@Virtual @Overload int getElem(int p0);
	@Virtual @Overload int getElem(int p0, int p1);
	@Virtual @Overload int getNumBanks();
	@Virtual @Overload int getOffset();
	@Virtual @Overload int getSize();
	@Virtual @Overload int[] getOffsets();
	@Virtual @Overload void setElem(int p0, int p1);
	@Virtual @Overload void setElem(int p0, int p1, int p2);
	@Virtual @Overload void setElemDouble(int p0, float p1);
	@Virtual @Overload void setElemDouble(int p0, int p1, float p2);
	@Virtual @Overload void setElemFloat(int p0, float p1);
	@Virtual @Overload void setElemFloat(int p0, int p1, float p2);
}

/* class java.awt.image.DataBufferByte */
class Java_awt_image_DataBufferByte extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload int[] getData();
	@Virtual @Overload int[] getData(int p0);
	@Virtual @Overload int[][] getBankData();
}
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int p0);
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int p0, int p1);
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int[] p0, int p1);
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int[][] p0, int p1);
@Overload Java_awt_image_DataBufferByte Java_awt_image_DataBufferByte.new(int[][] p0, int p1, int[] p2);

/* class java.awt.image.DataBufferDouble */
class Java_awt_image_DataBufferDouble extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload float[] getData();
	@Virtual @Overload float[] getData(int p0);
	@Virtual @Overload float[][] getBankData();
}
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(int p0);
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(int p0, int p1);
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(float[] p0, int p1);
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(float[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(float[][] p0, int p1);
@Overload Java_awt_image_DataBufferDouble Java_awt_image_DataBufferDouble.new(float[][] p0, int p1, int[] p2);

/* class java.awt.image.DataBufferFloat */
class Java_awt_image_DataBufferFloat extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload float[] getData();
	@Virtual @Overload float[] getData(int p0);
	@Virtual @Overload float[][] getBankData();
}
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(int p0);
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(int p0, int p1);
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(float[] p0, int p1);
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(float[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(float[][] p0, int p1);
@Overload Java_awt_image_DataBufferFloat Java_awt_image_DataBufferFloat.new(float[][] p0, int p1, int[] p2);

/* class java.awt.image.DataBufferInt */
class Java_awt_image_DataBufferInt extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload int[] getData();
	@Virtual @Overload int[] getData(int p0);
	@Virtual @Overload int[][] getBankData();
}
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int p0);
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int p0, int p1);
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int[] p0, int p1);
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int[][] p0, int p1);
@Overload Java_awt_image_DataBufferInt Java_awt_image_DataBufferInt.new(int[][] p0, int p1, int[] p2);

/* class java.awt.image.DataBufferShort */
class Java_awt_image_DataBufferShort extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload int[] getData();
	@Virtual @Overload int[] getData(int p0);
	@Virtual @Overload int[][] getBankData();
}
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int p0);
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int p0, int p1);
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int[] p0, int p1);
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int[][] p0, int p1);
@Overload Java_awt_image_DataBufferShort Java_awt_image_DataBufferShort.new(int[][] p0, int p1, int[] p2);

/* class java.awt.image.DataBufferUShort */
class Java_awt_image_DataBufferUShort extends Java_awt_image_DataBuffer {
	/*-- Method --*/
	@Virtual @Overload int[] getData();
	@Virtual @Overload int[] getData(int p0);
	@Virtual @Overload int[][] getBankData();
}
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int p0);
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int p0, int p1);
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int[] p0, int p1);
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int[] p0, int p1, int p2);
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int[][] p0, int p1);
@Overload Java_awt_image_DataBufferUShort Java_awt_image_DataBufferUShort.new(int[][] p0, int p1, int[] p2);

/* class java.awt.image.PackedColorModel */
class Java_awt_image_PackedColorModel extends Java_awt_image_ColorModel {
	/*-- Method --*/
	@Virtual @Overload int getMask(int p0);
	@Virtual @Overload int[] getMasks();
}
@Overload Java_awt_image_PackedColorModel Java_awt_image_PackedColorModel.new(Java_awt_color_ColorSpace p0, int p1, int[] p2, int p3, boolean p4, int p5, int p6);
@Overload Java_awt_image_PackedColorModel Java_awt_image_PackedColorModel.new(Java_awt_color_ColorSpace p0, int p1, int p2, int p3, int p4, int p5, boolean p6, int p7, int p8);

/* class java.awt.image.DirectColorModel */
class Java_awt_image_DirectColorModel extends Java_awt_image_PackedColorModel {
	/*-- Method --*/
	@Virtual @Overload int getAlphaMask();
	@Virtual @Overload int getBlueMask();
	@Virtual @Overload int getGreenMask();
	@Virtual @Overload int getRedMask();
}
@Overload Java_awt_image_DirectColorModel Java_awt_image_DirectColorModel.new(int p0, int p1, int p2, int p3);
@Overload Java_awt_image_DirectColorModel Java_awt_image_DirectColorModel.new(int p0, int p1, int p2, int p3, int p4);
@Overload Java_awt_image_DirectColorModel Java_awt_image_DirectColorModel.new(Java_awt_color_ColorSpace p0, int p1, int p2, int p3, int p4, int p5, boolean p6, int p7);

/* interface java.awt.image.ImageProducer */
class Java_awt_image_ImageProducer {
	/*-- Method --*/
	@Virtual @Overload boolean isConsumer(Java_awt_image_ImageConsumer p0);
	@Virtual @Overload void addConsumer(Java_awt_image_ImageConsumer p0);
	@Virtual @Overload void removeConsumer(Java_awt_image_ImageConsumer p0);
	@Virtual @Overload void requestTopDownLeftRightResend(Java_awt_image_ImageConsumer p0);
	@Virtual @Overload void startProduction(Java_awt_image_ImageConsumer p0);
}

/* class java.awt.image.FilteredImageSource */
class Java_awt_image_FilteredImageSource extends Java_awt_image_ImageProducer {
}
Java_awt_image_FilteredImageSource Java_awt_image_FilteredImageSource.new(Java_awt_image_ImageProducer p0, Java_awt_image_ImageFilter p1);

/* interface java.awt.image.ImageObserver */
class Java_awt_image_ImageObserver {
	/*-- Method --*/
	@Virtual @Overload boolean imageUpdate(Java_awt_Image p0, int p1, int p2, int p3, int p4, int p5);
}

/* class java.awt.image.ImagingOpException */
class Java_awt_image_ImagingOpException extends Java_lang_RuntimeException {
}
Java_awt_image_ImagingOpException Java_awt_image_ImagingOpException.new(String p0);

/* class java.awt.image.IndexColorModel */
class Java_awt_image_IndexColorModel extends Java_awt_image_ColorModel {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_BufferedImage convertToIntDiscrete(Java_awt_image_Raster p0, boolean p1);
	@Virtual @Overload Java_math_BigInteger getValidPixels();
	@Virtual @Overload boolean isValid();
	@Virtual @Overload boolean isValid(int p0);
	@Virtual @Overload int getMapSize();
	@Virtual @Overload int getTransparentPixel();
	@Virtual @Overload void getAlphas(int[] p0);
	@Virtual @Overload void getBlues(int[] p0);
	@Virtual @Overload void getGreens(int[] p0);
	@Virtual @Overload void getRGBs(int[] p0);
	@Virtual @Overload void getReds(int[] p0);
}
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int[] p3, int[] p4);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int[] p3, int[] p4, int p5);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int[] p3, int[] p4, int[] p5);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int p3, boolean p4);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int p3, boolean p4, int p5);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int p3, boolean p4, int p5, int p6);
@Overload Java_awt_image_IndexColorModel Java_awt_image_IndexColorModel.new(int p0, int p1, int[] p2, int p3, int p4, Java_math_BigInteger p5);

/* class java.awt.image.Kernel */
class Java_awt_image_Kernel extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload float[] getKernelData(float[] p0);
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int getXOrigin();
	@Virtual @Overload int getYOrigin();
}
Java_awt_image_Kernel Java_awt_image_Kernel.new(int p0, int p1, float[] p2);

/* class java.awt.image.LookupOp */
class Java_awt_image_LookupOp extends Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_LookupTable getTable();
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
}
Java_awt_image_LookupOp Java_awt_image_LookupOp.new(Java_awt_image_LookupTable p0, Java_awt_RenderingHints p1);

/* class java.awt.image.MemoryImageSource */
class Java_awt_image_MemoryImageSource extends Java_awt_image_ImageProducer {
	/*-- Method --*/
	@Virtual @Overload void newPixels();
	@Virtual @Overload void newPixels(int p0, int p1, int p2, int p3);
	@Virtual @Overload void newPixels(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void newPixels(int[] p0, Java_awt_image_ColorModel p1, int p2, int p3);
	@Virtual @Overload void setAnimated(boolean p0);
	@Virtual @Overload void setFullBufferUpdates(boolean p0);
}
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, Java_awt_image_ColorModel p2, int[] p3, int p4, int p5);
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, Java_awt_image_ColorModel p2, int[] p3, int p4, int p5, Java_util_Hashtable p6);
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, Java_awt_image_ColorModel p2, int[] p3, int p4, int p5);
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, Java_awt_image_ColorModel p2, int[] p3, int p4, int p5, Java_util_Hashtable p6);
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, int[] p2, int p3, int p4);
@Overload Java_awt_image_MemoryImageSource Java_awt_image_MemoryImageSource.new(int p0, int p1, int[] p2, int p3, int p4, Java_util_Hashtable p5);

/* class java.awt.image.MultiPixelPackedSampleModel */
class Java_awt_image_MultiPixelPackedSampleModel extends Java_awt_image_SampleModel {
	/*-- Method --*/
	@Virtual @Overload int getBitOffset(int p0);
	@Virtual @Overload int getDataBitOffset();
	@Virtual @Overload int getOffset(int p0, int p1);
	@Virtual @Overload int getPixelBitStride();
	@Virtual @Overload int getScanlineStride();
}
@Overload Java_awt_image_MultiPixelPackedSampleModel Java_awt_image_MultiPixelPackedSampleModel.new(int p0, int p1, int p2, int p3);
@Overload Java_awt_image_MultiPixelPackedSampleModel Java_awt_image_MultiPixelPackedSampleModel.new(int p0, int p1, int p2, int p3, int p4, int p5);

/* class java.awt.image.PixelGrabber */
class Java_awt_image_PixelGrabber extends Java_awt_image_ImageConsumer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Object getPixels();
	@Virtual @Overload boolean grabPixels();
	@Virtual @Overload boolean grabPixels(int p0);
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getStatus();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int status();
	@Virtual @Overload void abortGrabbing();
	@Virtual @Overload void startGrabbing();
}
@Overload Java_awt_image_PixelGrabber Java_awt_image_PixelGrabber.new(Java_awt_Image p0, int p1, int p2, int p3, int p4, int[] p5, int p6, int p7);
@Overload Java_awt_image_PixelGrabber Java_awt_image_PixelGrabber.new(Java_awt_image_ImageProducer p0, int p1, int p2, int p3, int p4, int[] p5, int p6, int p7);
@Overload Java_awt_image_PixelGrabber Java_awt_image_PixelGrabber.new(Java_awt_Image p0, int p1, int p2, int p3, int p4, boolean p5);

/* class java.awt.image.PixelInterleavedSampleModel */
class Java_awt_image_PixelInterleavedSampleModel extends Java_awt_image_ComponentSampleModel {
}
Java_awt_image_PixelInterleavedSampleModel Java_awt_image_PixelInterleavedSampleModel.new(int p0, int p1, int p2, int p3, int p4, int[] p5);

/* class java.awt.image.RGBImageFilter */
class Java_awt_image_RGBImageFilter extends Java_awt_image_ImageFilter {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_IndexColorModel filterIndexColorModel(Java_awt_image_IndexColorModel p0);
	@Virtual @Overload int filterRGB(int p0, int p1, int p2);
	@Virtual @Overload void filterRGBPixels(int p0, int p1, int p2, int p3, int[] p4, int p5, int p6);
	@Virtual @Overload void substituteColorModel(Java_awt_image_ColorModel p0, Java_awt_image_ColorModel p1);
}
Java_awt_image_RGBImageFilter Java_awt_image_RGBImageFilter.new();

/* class java.awt.image.Raster */
class Java_awt_image_Raster {
	/*-- Method --*/
	@Static @Overload Java_awt_image_Raster createRaster(Java_awt_image_SampleModel p0, Java_awt_image_DataBuffer p1, Java_awt_Point p2);
	@Static @Overload Java_awt_image_WritableRaster createBandedRaster(Java_awt_image_DataBuffer p0, int p1, int p2, int p3, int[] p4, int[] p5, Java_awt_Point p6);
	@Static @Overload Java_awt_image_WritableRaster createBandedRaster(int p0, int p1, int p2, int p3, Java_awt_Point p4);
	@Static @Overload Java_awt_image_WritableRaster createBandedRaster(int p0, int p1, int p2, int p3, int[] p4, int[] p5, Java_awt_Point p6);
	@Static @Overload Java_awt_image_WritableRaster createInterleavedRaster(Java_awt_image_DataBuffer p0, int p1, int p2, int p3, int p4, int[] p5, Java_awt_Point p6);
	@Static @Overload Java_awt_image_WritableRaster createInterleavedRaster(int p0, int p1, int p2, int p3, Java_awt_Point p4);
	@Static @Overload Java_awt_image_WritableRaster createInterleavedRaster(int p0, int p1, int p2, int p3, int p4, int[] p5, Java_awt_Point p6);
	@Static @Overload Java_awt_image_WritableRaster createPackedRaster(Java_awt_image_DataBuffer p0, int p1, int p2, int p3, Java_awt_Point p4);
	@Static @Overload Java_awt_image_WritableRaster createPackedRaster(Java_awt_image_DataBuffer p0, int p1, int p2, int p3, int[] p4, Java_awt_Point p5);
	@Static @Overload Java_awt_image_WritableRaster createPackedRaster(int p0, int p1, int p2, int p3, int p4, Java_awt_Point p5);
	@Static @Overload Java_awt_image_WritableRaster createPackedRaster(int p0, int p1, int p2, int[] p3, Java_awt_Point p4);
	@Static @Overload Java_awt_image_WritableRaster createWritableRaster(Java_awt_image_SampleModel p0, Java_awt_Point p1);
	@Static @Overload Java_awt_image_WritableRaster createWritableRaster(Java_awt_image_SampleModel p0, Java_awt_image_DataBuffer p1, Java_awt_Point p2);
	@Virtual @Overload Java_awt_Rectangle getBounds();
	@Virtual @Overload Java_awt_image_DataBuffer getDataBuffer();
	@Virtual @Overload Java_awt_image_Raster createChild(int p0, int p1, int p2, int p3, int p4, int p5, int[] p6);
	@Virtual @Overload Java_awt_image_Raster createTranslatedChild(int p0, int p1);
	@Virtual @Overload Java_awt_image_Raster getParent();
	@Virtual @Overload Java_awt_image_SampleModel getSampleModel();
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleWritableRaster();
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleWritableRaster(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleWritableRaster(int p0, int p1);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleWritableRaster(int p0, int p1, int p2, int p3);
	@Virtual @Overload Object getDataElements(int p0, int p1, Object p2);
	@Virtual @Overload Object getDataElements(int p0, int p1, int p2, int p3, Object p4);
	@Virtual @Overload float getSampleDouble(int p0, int p1, int p2);
	@Virtual @Overload float getSampleFloat(int p0, int p1, int p2);
	@Virtual @Overload float[] getPixel(int p0, int p1, float[] p2);
	@Virtual @Overload float[] getPixels(int p0, int p1, int p2, int p3, float[] p4);
	@Virtual @Overload float[] getSamples(int p0, int p1, int p2, int p3, int p4, float[] p5);
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getMinX();
	@Virtual @Overload int getMinY();
	@Virtual @Overload int getNumBands();
	@Virtual @Overload int getNumDataElements();
	@Virtual @Overload int getSample(int p0, int p1, int p2);
	@Virtual @Overload int getSampleModelTranslateX();
	@Virtual @Overload int getSampleModelTranslateY();
	@Virtual @Overload int getTransferType();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int[] getPixel(int p0, int p1, int[] p2);
	@Virtual @Overload int[] getPixels(int p0, int p1, int p2, int p3, int[] p4);
	@Virtual @Overload int[] getSamples(int p0, int p1, int p2, int p3, int p4, int[] p5);
}

/* class java.awt.image.RasterFormatException */
class Java_awt_image_RasterFormatException extends Java_lang_RuntimeException {
}
Java_awt_image_RasterFormatException Java_awt_image_RasterFormatException.new(String p0);

/* interface java.awt.image.RenderedImage */
class Java_awt_image_RenderedImage {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_ColorModel getColorModel();
	@Virtual @Overload Java_awt_image_Raster getData();
	@Virtual @Overload Java_awt_image_Raster getData(Java_awt_Rectangle p0);
	@Virtual @Overload Java_awt_image_Raster getTile(int p0, int p1);
	@Virtual @Overload Java_awt_image_SampleModel getSampleModel();
	@Virtual @Overload Java_awt_image_WritableRaster copyData(Java_awt_image_WritableRaster p0);
	@Virtual @Overload Java_util_Vector getSources();
	@Virtual @Overload Object getProperty(String p0);
	@Virtual @Overload String[] getPropertyNames();
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getMinTileX();
	@Virtual @Overload int getMinTileY();
	@Virtual @Overload int getMinX();
	@Virtual @Overload int getMinY();
	@Virtual @Overload int getNumXTiles();
	@Virtual @Overload int getNumYTiles();
	@Virtual @Overload int getTileGridXOffset();
	@Virtual @Overload int getTileGridYOffset();
	@Virtual @Overload int getTileHeight();
	@Virtual @Overload int getTileWidth();
	@Virtual @Overload int getWidth();
}

/* class java.awt.image.RescaleOp */
class Java_awt_image_RescaleOp extends Java_awt_image_BufferedImageOp {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster createCompatibleDestRaster(Java_awt_image_Raster p0);
	@Virtual @Overload Java_awt_image_WritableRaster filter(Java_awt_image_Raster p0, Java_awt_image_WritableRaster p1);
	@Virtual @Overload float[] getOffsets(float[] p0);
	@Virtual @Overload float[] getScaleFactors(float[] p0);
	@Virtual @Overload int getNumFactors();
}
@Overload Java_awt_image_RescaleOp Java_awt_image_RescaleOp.new(float[] p0, float[] p1, Java_awt_RenderingHints p2);
@Overload Java_awt_image_RescaleOp Java_awt_image_RescaleOp.new(float p0, float p1, Java_awt_RenderingHints p2);

/* class java.awt.image.ShortLookupTable */
class Java_awt_image_ShortLookupTable extends Java_awt_image_LookupTable {
	/*-- Method --*/
	@Virtual @Overload int[] lookupPixel(int[] p0, int[] p1);
	@Virtual @Overload int[][] getTable();
}
@Overload Java_awt_image_ShortLookupTable Java_awt_image_ShortLookupTable.new(int p0, int[][] p1);
@Overload Java_awt_image_ShortLookupTable Java_awt_image_ShortLookupTable.new(int p0, int[] p1);

/* class java.awt.image.SinglePixelPackedSampleModel */
class Java_awt_image_SinglePixelPackedSampleModel extends Java_awt_image_SampleModel {
	/*-- Method --*/
	@Virtual @Overload int getOffset(int p0, int p1);
	@Virtual @Overload int getScanlineStride();
	@Virtual @Overload int[] getBitMasks();
	@Virtual @Overload int[] getBitOffsets();
}
@Overload Java_awt_image_SinglePixelPackedSampleModel Java_awt_image_SinglePixelPackedSampleModel.new(int p0, int p1, int p2, int[] p3);
@Overload Java_awt_image_SinglePixelPackedSampleModel Java_awt_image_SinglePixelPackedSampleModel.new(int p0, int p1, int p2, int p3, int[] p4);

/* interface java.awt.image.TileObserver */
class Java_awt_image_TileObserver {
	/*-- Method --*/
	@Virtual @Overload void tileUpdate(Java_awt_image_WritableRenderedImage p0, int p1, int p2, boolean p3);
}

/* class java.awt.image.VolatileImage */
class Java_awt_image_VolatileImage extends Java_awt_Image {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Graphics2D createGraphics();
	@Virtual @Overload Java_awt_ImageCapabilities getCapabilities();
	@Virtual @Overload Java_awt_image_BufferedImage getSnapshot();
	@Virtual @Overload boolean contentsLost();
	@Virtual @Overload int getHeight();
	@Virtual @Overload int getTransparency();
	@Virtual @Overload int getWidth();
	@Virtual @Overload int validate(Java_awt_GraphicsConfiguration p0);
}
Java_awt_image_VolatileImage Java_awt_image_VolatileImage.new();

/* class java.awt.image.WritableRaster */
class Java_awt_image_WritableRaster extends Java_awt_image_Raster {
	/*-- Method --*/
	@Virtual @Overload Java_awt_image_WritableRaster createWritableChild(int p0, int p1, int p2, int p3, int p4, int p5, int[] p6);
	@Virtual @Overload Java_awt_image_WritableRaster createWritableTranslatedChild(int p0, int p1);
	@Virtual @Overload Java_awt_image_WritableRaster getWritableParent();
	@Virtual @Overload void setDataElements(int p0, int p1, Java_awt_image_Raster p2);
	@Virtual @Overload void setDataElements(int p0, int p1, Object p2);
	@Virtual @Overload void setDataElements(int p0, int p1, int p2, int p3, Object p4);
	@Virtual @Overload void setPixel(int p0, int p1, float[] p2);
	@Virtual @Overload void setPixel(int p0, int p1, int[] p2);
	@Virtual @Overload void setPixels(int p0, int p1, int p2, int p3, float[] p4);
	@Virtual @Overload void setPixels(int p0, int p1, int p2, int p3, int[] p4);
	@Virtual @Overload void setRect(Java_awt_image_Raster p0);
	@Virtual @Overload void setRect(int p0, int p1, Java_awt_image_Raster p2);
	@Virtual @Overload void setSample(int p0, int p1, int p2, float p3);
	@Virtual @Overload void setSample(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setSamples(int p0, int p1, int p2, int p3, int p4, float[] p5);
	@Virtual @Overload void setSamples(int p0, int p1, int p2, int p3, int p4, int[] p5);
}

/* interface java.awt.image.WritableRenderedImage */
class Java_awt_image_WritableRenderedImage extends Java_awt_image_RenderedImage {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Point[] getWritableTileIndices();
	@Virtual @Overload Java_awt_image_WritableRaster getWritableTile(int p0, int p1);
	@Virtual @Overload boolean hasTileWriters();
	@Virtual @Overload boolean isTileWritable(int p0, int p1);
	@Virtual @Overload void addTileObserver(Java_awt_image_TileObserver p0);
	@Virtual @Overload void releaseWritableTile(int p0, int p1);
	@Virtual @Overload void removeTileObserver(Java_awt_image_TileObserver p0);
	@Virtual @Overload void setData(Java_awt_image_Raster p0);
}

/*============================================================*/
/* java package java.awt.font */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_awt_Font;
class Java_awt_Graphics2D;
class Java_awt_Image;
class Java_awt_Rectangle;
class Java_awt_Shape;
class Java_awt_font_NumericShaper_Range;
class Java_awt_font_TextLayout_CaretPolicy;
class Java_awt_geom_AffineTransform;
class Java_awt_geom_Point2D;
class Java_awt_geom_Rectangle2D;
class Java_io_Serializable;
class Java_lang_Cloneable;
class Java_text_AttributedCharacterIterator;
class Java_text_BreakIterator;
class Java_util_Map;
class Java_util_Set;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_awt_font_FontRenderContext;
class Java_awt_font_GlyphJustificationInfo;
class Java_awt_font_GlyphMetrics;
class Java_awt_font_GlyphVector extends Java_lang_Cloneable;
class Java_awt_font_GraphicAttribute;
class Java_awt_font_ImageGraphicAttribute extends Java_awt_font_GraphicAttribute;
class Java_awt_font_LayoutPath;
class Java_awt_font_LineBreakMeasurer;
class Java_awt_font_LineMetrics;
class Java_awt_font_MultipleMaster;
class Java_awt_font_NumericShaper extends Java_io_Serializable;
class Java_awt_font_OpenType;
class Java_awt_font_ShapeGraphicAttribute extends Java_awt_font_GraphicAttribute;
class Java_awt_font_TextAttribute;
class Java_awt_font_TextHitInfo;
class Java_awt_font_TextLayout extends Java_lang_Cloneable;
class Java_awt_font_TextMeasurer extends Java_lang_Cloneable;
class Java_awt_font_TransformAttribute extends Java_io_Serializable;

/*------------------------------------------------------------*/
/* class java.awt.font.FontRenderContext */
class Java_awt_font_FontRenderContext {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload Object getAntiAliasingHint();
	@Virtual @Overload Object getFractionalMetricsHint();
	@Virtual @Overload boolean equals(Java_awt_font_FontRenderContext p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isAntiAliased();
	@Virtual @Overload boolean isTransformed();
	@Virtual @Overload boolean usesFractionalMetrics();
	@Virtual @Overload int getTransformType();
}
@Overload Java_awt_font_FontRenderContext Java_awt_font_FontRenderContext.new(Java_awt_geom_AffineTransform p0, boolean p1, boolean p2);
@Overload Java_awt_font_FontRenderContext Java_awt_font_FontRenderContext.new(Java_awt_geom_AffineTransform p0, Object p1, Object p2);

/* class java.awt.font.GlyphJustificationInfo */
class Java_awt_font_GlyphJustificationInfo {
}
Java_awt_font_GlyphJustificationInfo Java_awt_font_GlyphJustificationInfo.new(float p0, boolean p1, int p2, float p3, float p4, boolean p5, int p6, float p7, float p8);

/* class java.awt.font.GlyphMetrics */
class Java_awt_font_GlyphMetrics {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds2D();
	@Virtual @Overload boolean isCombining();
	@Virtual @Overload boolean isComponent();
	@Virtual @Overload boolean isLigature();
	@Virtual @Overload boolean isStandard();
	@Virtual @Overload boolean isWhitespace();
	@Virtual @Overload float getAdvance();
	@Virtual @Overload float getAdvanceX();
	@Virtual @Overload float getAdvanceY();
	@Virtual @Overload float getLSB();
	@Virtual @Overload float getRSB();
	@Virtual @Overload int getType();
}
@Overload Java_awt_font_GlyphMetrics Java_awt_font_GlyphMetrics.new(float p0, Java_awt_geom_Rectangle2D p1, int p2);
@Overload Java_awt_font_GlyphMetrics Java_awt_font_GlyphMetrics.new(boolean p0, float p1, float p2, Java_awt_geom_Rectangle2D p3, int p4);

/* class java.awt.font.GlyphVector */
class Java_awt_font_GlyphVector extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Font getFont();
	@Virtual @Overload Java_awt_Rectangle getGlyphPixelBounds(int p0, Java_awt_font_FontRenderContext p1, float p2, float p3);
	@Virtual @Overload Java_awt_Rectangle getPixelBounds(Java_awt_font_FontRenderContext p0, float p1, float p2);
	@Virtual @Overload Java_awt_Shape getGlyphLogicalBounds(int p0);
	@Virtual @Overload Java_awt_Shape getGlyphOutline(int p0);
	@Virtual @Overload Java_awt_Shape getGlyphOutline(int p0, float p1, float p2);
	@Virtual @Overload Java_awt_Shape getGlyphVisualBounds(int p0);
	@Virtual @Overload Java_awt_Shape getOutline();
	@Virtual @Overload Java_awt_Shape getOutline(float p0, float p1);
	@Virtual @Overload Java_awt_font_FontRenderContext getFontRenderContext();
	@Virtual @Overload Java_awt_font_GlyphJustificationInfo getGlyphJustificationInfo(int p0);
	@Virtual @Overload Java_awt_font_GlyphMetrics getGlyphMetrics(int p0);
	@Virtual @Overload Java_awt_geom_AffineTransform getGlyphTransform(int p0);
	@Virtual @Overload Java_awt_geom_Point2D getGlyphPosition(int p0);
	@Virtual @Overload Java_awt_geom_Rectangle2D getLogicalBounds();
	@Virtual @Overload Java_awt_geom_Rectangle2D getVisualBounds();
	@Virtual @Overload boolean equals(Java_awt_font_GlyphVector p0);
	@Virtual @Overload float[] getGlyphPositions(int p0, int p1, float[] p2);
	@Virtual @Overload int getGlyphCharIndex(int p0);
	@Virtual @Overload int getGlyphCode(int p0);
	@Virtual @Overload int getLayoutFlags();
	@Virtual @Overload int getNumGlyphs();
	@Virtual @Overload int[] getGlyphCharIndices(int p0, int p1, int[] p2);
	@Virtual @Overload int[] getGlyphCodes(int p0, int p1, int[] p2);
	@Virtual @Overload void performDefaultLayout();
	@Virtual @Overload void setGlyphPosition(int p0, Java_awt_geom_Point2D p1);
	@Virtual @Overload void setGlyphTransform(int p0, Java_awt_geom_AffineTransform p1);
}
Java_awt_font_GlyphVector Java_awt_font_GlyphVector.new();

/* class java.awt.font.GraphicAttribute */
class Java_awt_font_GraphicAttribute {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Shape getOutline(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload Java_awt_font_GlyphJustificationInfo getJustificationInfo();
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds();
	@Virtual @Overload float getAdvance();
	@Virtual @Overload float getAscent();
	@Virtual @Overload float getDescent();
	@Virtual @Overload int getAlignment();
	@Virtual @Overload void draw(Java_awt_Graphics2D p0, float p1, float p2);
}

/* class java.awt.font.ImageGraphicAttribute */
class Java_awt_font_ImageGraphicAttribute extends Java_awt_font_GraphicAttribute {
	/*-- Method --*/
	@Virtual @Overload boolean equals(Java_awt_font_ImageGraphicAttribute p0);
}
@Overload Java_awt_font_ImageGraphicAttribute Java_awt_font_ImageGraphicAttribute.new(Java_awt_Image p0, int p1);
@Overload Java_awt_font_ImageGraphicAttribute Java_awt_font_ImageGraphicAttribute.new(Java_awt_Image p0, int p1, float p2, float p3);

/* class java.awt.font.LayoutPath */
class Java_awt_font_LayoutPath {
	/*-- Method --*/
	@Virtual @Overload boolean pointToPath(Java_awt_geom_Point2D p0, Java_awt_geom_Point2D p1);
	@Virtual @Overload void pathToPoint(Java_awt_geom_Point2D p0, boolean p1, Java_awt_geom_Point2D p2);
}
Java_awt_font_LayoutPath Java_awt_font_LayoutPath.new();

/* class java.awt.font.LineBreakMeasurer */
class Java_awt_font_LineBreakMeasurer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_font_TextLayout nextLayout(float p0);
	@Virtual @Overload Java_awt_font_TextLayout nextLayout(float p0, int p1, boolean p2);
	@Virtual @Overload int getPosition();
	@Virtual @Overload int nextOffset(float p0);
	@Virtual @Overload int nextOffset(float p0, int p1, boolean p2);
	@Virtual @Overload void deleteChar(Java_text_AttributedCharacterIterator p0, int p1);
	@Virtual @Overload void insertChar(Java_text_AttributedCharacterIterator p0, int p1);
	@Virtual @Overload void setPosition(int p0);
}
@Overload Java_awt_font_LineBreakMeasurer Java_awt_font_LineBreakMeasurer.new(Java_text_AttributedCharacterIterator p0, Java_awt_font_FontRenderContext p1);
@Overload Java_awt_font_LineBreakMeasurer Java_awt_font_LineBreakMeasurer.new(Java_text_AttributedCharacterIterator p0, Java_text_BreakIterator p1, Java_awt_font_FontRenderContext p2);

/* class java.awt.font.LineMetrics */
class Java_awt_font_LineMetrics {
	/*-- Method --*/
	@Virtual @Overload float getAscent();
	@Virtual @Overload float getDescent();
	@Virtual @Overload float getHeight();
	@Virtual @Overload float getLeading();
	@Virtual @Overload float getStrikethroughOffset();
	@Virtual @Overload float getStrikethroughThickness();
	@Virtual @Overload float getUnderlineOffset();
	@Virtual @Overload float getUnderlineThickness();
	@Virtual @Overload float[] getBaselineOffsets();
	@Virtual @Overload int getBaselineIndex();
	@Virtual @Overload int getNumChars();
}
Java_awt_font_LineMetrics Java_awt_font_LineMetrics.new();

/* interface java.awt.font.MultipleMaster */
class Java_awt_font_MultipleMaster {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Font deriveMMFont(float[] p0);
	@Virtual @Overload Java_awt_Font deriveMMFont(float[] p0, float p1, float p2, float p3, float p4);
	@Virtual @Overload String[] getDesignAxisNames();
	@Virtual @Overload float[] getDesignAxisDefaults();
	@Virtual @Overload float[] getDesignAxisRanges();
	@Virtual @Overload int getNumDesignAxes();
}

/* class java.awt.font.NumericShaper */
class Java_awt_font_NumericShaper extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_font_NumericShaper getContextualShaper(Java_util_Set p0);
	@Static @Overload Java_awt_font_NumericShaper getContextualShaper(Java_util_Set p0, Java_awt_font_NumericShaper_Range p1);
	@Static @Overload Java_awt_font_NumericShaper getContextualShaper(int p0);
	@Static @Overload Java_awt_font_NumericShaper getContextualShaper(int p0, int p1);
	@Static @Overload Java_awt_font_NumericShaper getShaper(Java_awt_font_NumericShaper_Range p0);
	@Static @Overload Java_awt_font_NumericShaper getShaper(int p0);
	@Virtual @Overload Java_util_Set getRangeSet();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isContextual();
	@Virtual @Overload int getRanges();
	@Virtual @Overload void shape(int[] p0, int p1, int p2);
	@Virtual @Overload void shape(int[] p0, int p1, int p2, Java_awt_font_NumericShaper_Range p3);
	@Virtual @Overload void shape(int[] p0, int p1, int p2, int p3);
}

/* interface java.awt.font.OpenType */
class Java_awt_font_OpenType {
	/*-- Method --*/
	@Virtual @Overload int getFontTableSize(String p0);
	@Virtual @Overload int getFontTableSize(int p0);
	@Virtual @Overload int getVersion();
	@Virtual @Overload int[] getFontTable(String p0);
	@Virtual @Overload int[] getFontTable(String p0, int p1, int p2);
	@Virtual @Overload int[] getFontTable(int p0);
	@Virtual @Overload int[] getFontTable(int p0, int p1, int p2);
}

/* class java.awt.font.ShapeGraphicAttribute */
class Java_awt_font_ShapeGraphicAttribute extends Java_awt_font_GraphicAttribute {
	/*-- Method --*/
	@Virtual @Overload boolean equals(Java_awt_font_ShapeGraphicAttribute p0);
}
Java_awt_font_ShapeGraphicAttribute Java_awt_font_ShapeGraphicAttribute.new(Java_awt_Shape p0, int p1, boolean p2);

/* class java.awt.font.TextAttribute */
class Java_awt_font_TextAttribute {
}

/* class java.awt.font.TextHitInfo */
class Java_awt_font_TextHitInfo {
	/*-- Method --*/
	@Static @Overload Java_awt_font_TextHitInfo afterOffset(int p0);
	@Static @Overload Java_awt_font_TextHitInfo beforeOffset(int p0);
	@Static @Overload Java_awt_font_TextHitInfo leading(int p0);
	@Static @Overload Java_awt_font_TextHitInfo trailing(int p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getOffsetHit(int p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getOtherHit();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isLeadingEdge();
	@Virtual @Overload int getCharIndex();
	@Virtual @Overload int getInsertionIndex();
}

/* class java.awt.font.TextLayout */
class Java_awt_font_TextLayout extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Rectangle getPixelBounds(Java_awt_font_FontRenderContext p0, float p1, float p2);
	@Virtual @Overload Java_awt_Shape getBlackBoxBounds(int p0, int p1);
	@Virtual @Overload Java_awt_Shape getCaretShape(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload Java_awt_Shape getCaretShape(Java_awt_font_TextHitInfo p0, Java_awt_geom_Rectangle2D p1);
	@Virtual @Overload Java_awt_Shape getLogicalHighlightShape(int p0, int p1);
	@Virtual @Overload Java_awt_Shape getLogicalHighlightShape(int p0, int p1, Java_awt_geom_Rectangle2D p2);
	@Virtual @Overload Java_awt_Shape getOutline(Java_awt_geom_AffineTransform p0);
	@Virtual @Overload Java_awt_Shape getVisualHighlightShape(Java_awt_font_TextHitInfo p0, Java_awt_font_TextHitInfo p1);
	@Virtual @Overload Java_awt_Shape getVisualHighlightShape(Java_awt_font_TextHitInfo p0, Java_awt_font_TextHitInfo p1, Java_awt_geom_Rectangle2D p2);
	@Virtual @Overload Java_awt_Shape[] getCaretShapes(int p0);
	@Virtual @Overload Java_awt_Shape[] getCaretShapes(int p0, Java_awt_geom_Rectangle2D p1);
	@Virtual @Overload Java_awt_Shape[] getCaretShapes(int p0, Java_awt_geom_Rectangle2D p1, Java_awt_font_TextLayout_CaretPolicy p2);
	@Virtual @Overload Java_awt_font_LayoutPath getLayoutPath();
	@Virtual @Overload Java_awt_font_TextHitInfo getNextLeftHit(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getNextLeftHit(int p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getNextLeftHit(int p0, Java_awt_font_TextLayout_CaretPolicy p1);
	@Virtual @Overload Java_awt_font_TextHitInfo getNextRightHit(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getNextRightHit(int p0);
	@Virtual @Overload Java_awt_font_TextHitInfo getNextRightHit(int p0, Java_awt_font_TextLayout_CaretPolicy p1);
	@Virtual @Overload Java_awt_font_TextHitInfo getVisualOtherHit(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload Java_awt_font_TextHitInfo hitTestChar(float p0, float p1);
	@Virtual @Overload Java_awt_font_TextHitInfo hitTestChar(float p0, float p1, Java_awt_geom_Rectangle2D p2);
	@Virtual @Overload Java_awt_font_TextLayout getJustifiedLayout(float p0);
	@Virtual @Overload Java_awt_geom_Rectangle2D getBounds();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Java_awt_font_TextLayout p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isLeftToRight();
	@Virtual @Overload boolean isVertical();
	@Virtual @Overload float getAdvance();
	@Virtual @Overload float getAscent();
	@Virtual @Overload float getDescent();
	@Virtual @Overload float getLeading();
	@Virtual @Overload float getVisibleAdvance();
	@Virtual @Overload float[] getBaselineOffsets();
	@Virtual @Overload float[] getCaretInfo(Java_awt_font_TextHitInfo p0);
	@Virtual @Overload float[] getCaretInfo(Java_awt_font_TextHitInfo p0, Java_awt_geom_Rectangle2D p1);
	@Virtual @Overload int getBaseline();
	@Virtual @Overload int getCharacterCount();
	@Virtual @Overload int getCharacterLevel(int p0);
	@Virtual @Overload int[] getLogicalRangesForVisualSelection(Java_awt_font_TextHitInfo p0, Java_awt_font_TextHitInfo p1);
	@Virtual @Overload void draw(Java_awt_Graphics2D p0, float p1, float p2);
	@Virtual @Overload void hitToPoint(Java_awt_font_TextHitInfo p0, Java_awt_geom_Point2D p1);
}
@Overload Java_awt_font_TextLayout Java_awt_font_TextLayout.new(String p0, Java_awt_Font p1, Java_awt_font_FontRenderContext p2);
@Overload Java_awt_font_TextLayout Java_awt_font_TextLayout.new(String p0, Java_util_Map p1, Java_awt_font_FontRenderContext p2);
@Overload Java_awt_font_TextLayout Java_awt_font_TextLayout.new(Java_text_AttributedCharacterIterator p0, Java_awt_font_FontRenderContext p1);

/* class java.awt.font.TextMeasurer */
class Java_awt_font_TextMeasurer extends Java_lang_Cloneable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_font_TextLayout getLayout(int p0, int p1);
	@Virtual @Overload float getAdvanceBetween(int p0, int p1);
	@Virtual @Overload int getLineBreakIndex(int p0, float p1);
	@Virtual @Overload void deleteChar(Java_text_AttributedCharacterIterator p0, int p1);
	@Virtual @Overload void insertChar(Java_text_AttributedCharacterIterator p0, int p1);
}
Java_awt_font_TextMeasurer Java_awt_font_TextMeasurer.new(Java_text_AttributedCharacterIterator p0, Java_awt_font_FontRenderContext p1);

/* class java.awt.font.TransformAttribute */
class Java_awt_font_TransformAttribute extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_geom_AffineTransform getTransform();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isIdentity();
}
Java_awt_font_TransformAttribute Java_awt_font_TransformAttribute.new(Java_awt_geom_AffineTransform p0);

/*============================================================*/
/* java package java.io */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_ObjectInputStream_GetField;
class Java_io_ObjectOutputStream_PutField;
class Java_lang_Appendable;
class Java_lang_AutoCloseable;
class Java_lang_CharSequence;
class Java_lang_Comparable;
class Java_lang_Error;
class Java_lang_Exception;
class Java_lang_Readable;
class Java_lang_StringBuffer;
class Java_lang_Throwable;
class Java_net_URI;
class Java_nio_channels_FileChannel;
class Java_nio_charset_Charset;
class Java_nio_charset_CharsetDecoder;
class Java_nio_charset_CharsetEncoder;
class Java_nio_file_Path;
class Java_security_BasicPermission;
class Java_security_Permission;
class Java_util_Enumeration;
class Java_util_Locale;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_io_Closeable extends Java_lang_AutoCloseable;
class Java_io_InputStream extends Java_io_Closeable;
class Java_io_FilterInputStream extends Java_io_InputStream;
class Java_io_BufferedInputStream extends Java_io_FilterInputStream;
class Java_io_OutputStream extends Java_io_Closeable;
class Java_io_FilterOutputStream extends Java_io_OutputStream;
class Java_io_BufferedOutputStream extends Java_io_FilterOutputStream;
class Java_io_Reader extends Java_lang_Readable;
class Java_io_BufferedReader extends Java_io_Reader;
class Java_io_Writer extends Java_lang_Appendable;
class Java_io_BufferedWriter extends Java_io_Writer;
class Java_io_ByteArrayInputStream extends Java_io_InputStream;
class Java_io_ByteArrayOutputStream extends Java_io_OutputStream;
class Java_io_CharArrayReader extends Java_io_Reader;
class Java_io_CharArrayWriter extends Java_io_Writer;
class Java_io_IOException extends Java_lang_Exception;
class Java_io_CharConversionException extends Java_io_IOException;
class Java_io_Flushable;
class Java_io_Console extends Java_io_Flushable;
class Java_io_DataInput;
class Java_io_DataInputStream extends Java_io_FilterInputStream;
class Java_io_DataOutput;
class Java_io_DataOutputStream extends Java_io_FilterOutputStream;
class Java_io_EOFException extends Java_io_IOException;
class Java_io_Serializable;
class Java_io_Externalizable extends Java_io_Serializable;
class Java_io_File extends Java_io_Serializable;
class Java_io_FileDescriptor;
class Java_io_FileFilter;
class Java_io_FileInputStream extends Java_io_InputStream;
class Java_io_FileNotFoundException extends Java_io_IOException;
class Java_io_FileOutputStream extends Java_io_OutputStream;
class Java_io_FilePermission extends Java_security_Permission;
class Java_io_InputStreamReader extends Java_io_Reader;
class Java_io_FileReader extends Java_io_InputStreamReader;
class Java_io_OutputStreamWriter extends Java_io_Writer;
class Java_io_FileWriter extends Java_io_OutputStreamWriter;
class Java_io_FilenameFilter;
class Java_io_FilterReader extends Java_io_Reader;
class Java_io_FilterWriter extends Java_io_Writer;
class Java_io_IOError extends Java_lang_Error;
class Java_io_InterruptedIOException extends Java_io_IOException;
class Java_io_ObjectStreamException extends Java_io_IOException;
class Java_io_InvalidClassException extends Java_io_ObjectStreamException;
class Java_io_InvalidObjectException extends Java_io_ObjectStreamException;
class Java_io_LineNumberReader extends Java_io_BufferedReader;
class Java_io_NotActiveException extends Java_io_ObjectStreamException;
class Java_io_NotSerializableException extends Java_io_ObjectStreamException;
class Java_io_ObjectInput extends Java_io_DataInput;
class Java_io_ObjectInputStream extends Java_io_InputStream;
class Java_io_ObjectInputValidation;
class Java_io_ObjectOutput extends Java_io_DataOutput;
class Java_io_ObjectOutputStream extends Java_io_OutputStream;
class Java_io_ObjectStreamClass extends Java_io_Serializable;
class Java_io_ObjectStreamConstants;
class Java_io_ObjectStreamField extends Java_lang_Comparable;
class Java_io_OptionalDataException extends Java_io_ObjectStreamException;
class Java_io_PipedInputStream extends Java_io_InputStream;
class Java_io_PipedOutputStream extends Java_io_OutputStream;
class Java_io_PipedReader extends Java_io_Reader;
class Java_io_PipedWriter extends Java_io_Writer;
class Java_io_PrintStream extends Java_io_FilterOutputStream;
class Java_io_PrintWriter extends Java_io_Writer;
class Java_io_PushbackInputStream extends Java_io_FilterInputStream;
class Java_io_PushbackReader extends Java_io_FilterReader;
class Java_io_RandomAccessFile extends Java_io_DataOutput;
class Java_io_SequenceInputStream extends Java_io_InputStream;
class Java_io_SerializablePermission extends Java_security_BasicPermission;
class Java_io_StreamCorruptedException extends Java_io_ObjectStreamException;
class Java_io_StreamTokenizer;
class Java_io_StringReader extends Java_io_Reader;
class Java_io_StringWriter extends Java_io_Writer;
class Java_io_SyncFailedException extends Java_io_IOException;
class Java_io_UTFDataFormatException extends Java_io_IOException;
class Java_io_UnsupportedEncodingException extends Java_io_IOException;
class Java_io_WriteAbortedException extends Java_io_ObjectStreamException;

/*------------------------------------------------------------*/
/* interface java.io.Closeable */
class Java_io_Closeable extends Java_lang_AutoCloseable {
}

/* class java.io.InputStream */
class Java_io_InputStream extends Java_io_Closeable {
	/*-- Method --*/
	@Virtual @Overload boolean markSupported();
	@Virtual @Overload int available();
	@Virtual @Overload int read();
	@Virtual @Overload int read(int[] p0);
	@Virtual @Overload int read(int[] p0, int p1, int p2);
	@Virtual @Overload int skip(int p0);
	@Virtual @Overload void mark(int p0);
	@Virtual @Overload void reset();
}
Java_io_InputStream Java_io_InputStream.new();

/* class java.io.FilterInputStream */
class Java_io_FilterInputStream extends Java_io_InputStream {
}

/* class java.io.BufferedInputStream */
class Java_io_BufferedInputStream extends Java_io_FilterInputStream {
}
@Overload Java_io_BufferedInputStream Java_io_BufferedInputStream.new(Java_io_InputStream p0);
@Overload Java_io_BufferedInputStream Java_io_BufferedInputStream.new(Java_io_InputStream p0, int p1);

/* class java.io.OutputStream */
class Java_io_OutputStream extends Java_io_Closeable {
	/*-- Method --*/
	@Virtual @Overload void flush();
	@Virtual @Overload void write(int p0);
	@Virtual @Overload void write(int[] p0);
	@Virtual @Overload void write(int[] p0, int p1, int p2);
}
Java_io_OutputStream Java_io_OutputStream.new();

/* class java.io.FilterOutputStream */
class Java_io_FilterOutputStream extends Java_io_OutputStream {
}
Java_io_FilterOutputStream Java_io_FilterOutputStream.new(Java_io_OutputStream p0);

/* class java.io.BufferedOutputStream */
class Java_io_BufferedOutputStream extends Java_io_FilterOutputStream {
}
@Overload Java_io_BufferedOutputStream Java_io_BufferedOutputStream.new(Java_io_OutputStream p0);
@Overload Java_io_BufferedOutputStream Java_io_BufferedOutputStream.new(Java_io_OutputStream p0, int p1);

/* class java.io.Reader */
class Java_io_Reader extends Java_lang_Readable {
	/*-- Method --*/
	@Virtual @Overload boolean markSupported();
	@Virtual @Overload boolean ready();
	@Virtual @Overload int read();
	@Virtual @Overload int read(int[] p0);
	@Virtual @Overload int read(int[] p0, int p1, int p2);
	@Virtual @Overload int skip(int p0);
	@Virtual @Overload void close();
	@Virtual @Overload void mark(int p0);
	@Virtual @Overload void reset();
}

/* class java.io.BufferedReader */
class Java_io_BufferedReader extends Java_io_Reader {
	/*-- Method --*/
	@Virtual @Overload String readLine();
}
@Overload Java_io_BufferedReader Java_io_BufferedReader.new(Java_io_Reader p0, int p1);
@Overload Java_io_BufferedReader Java_io_BufferedReader.new(Java_io_Reader p0);

/* class java.io.Writer */
class Java_io_Writer extends Java_lang_Appendable {
	/*-- Method --*/
	@Virtual @Overload void close();
	@Virtual @Overload void flush();
	@Virtual @Overload void write(String p0);
	@Virtual @Overload void write(String p0, int p1, int p2);
	@Virtual @Overload void write(int p0);
	@Virtual @Overload void write(int[] p0);
	@Virtual @Overload void write(int[] p0, int p1, int p2);
}

/* class java.io.BufferedWriter */
class Java_io_BufferedWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload void newLine();
}
@Overload Java_io_BufferedWriter Java_io_BufferedWriter.new(Java_io_Writer p0);
@Overload Java_io_BufferedWriter Java_io_BufferedWriter.new(Java_io_Writer p0, int p1);

/* class java.io.ByteArrayInputStream */
class Java_io_ByteArrayInputStream extends Java_io_InputStream {
}
@Overload Java_io_ByteArrayInputStream Java_io_ByteArrayInputStream.new(int[] p0);
@Overload Java_io_ByteArrayInputStream Java_io_ByteArrayInputStream.new(int[] p0, int p1, int p2);

/* class java.io.ByteArrayOutputStream */
class Java_io_ByteArrayOutputStream extends Java_io_OutputStream {
	/*-- Method --*/
	@Virtual @Overload String toString(String p0);
	@Virtual @Overload int size();
	@Virtual @Overload int[] toByteArray();
	@Virtual @Overload void reset();
	@Virtual @Overload void writeTo(Java_io_OutputStream p0);
}
@Overload Java_io_ByteArrayOutputStream Java_io_ByteArrayOutputStream.new();
@Overload Java_io_ByteArrayOutputStream Java_io_ByteArrayOutputStream.new(int p0);

/* class java.io.CharArrayReader */
class Java_io_CharArrayReader extends Java_io_Reader {
}
@Overload Java_io_CharArrayReader Java_io_CharArrayReader.new(int[] p0);
@Overload Java_io_CharArrayReader Java_io_CharArrayReader.new(int[] p0, int p1, int p2);

/* class java.io.CharArrayWriter */
class Java_io_CharArrayWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload int size();
	@Virtual @Overload int[] toCharArray();
	@Virtual @Overload void reset();
	@Virtual @Overload void writeTo(Java_io_Writer p0);
}
@Overload Java_io_CharArrayWriter Java_io_CharArrayWriter.new();
@Overload Java_io_CharArrayWriter Java_io_CharArrayWriter.new(int p0);

/* class java.io.IOException */
class Java_io_IOException extends Java_lang_Exception {
}
@Overload Java_io_IOException Java_io_IOException.new();
@Overload Java_io_IOException Java_io_IOException.new(String p0);
@Overload Java_io_IOException Java_io_IOException.new(String p0, Java_lang_Throwable p1);
@Overload Java_io_IOException Java_io_IOException.new(Java_lang_Throwable p0);

/* class java.io.CharConversionException */
class Java_io_CharConversionException extends Java_io_IOException {
}
@Overload Java_io_CharConversionException Java_io_CharConversionException.new();
@Overload Java_io_CharConversionException Java_io_CharConversionException.new(String p0);

/* interface java.io.Flushable */
class Java_io_Flushable {
	/*-- Method --*/
	@Virtual @Overload void flush();
}

/* class java.io.Console */
class Java_io_Console extends Java_io_Flushable {
	/*-- Method --*/
	@Virtual @Overload Java_io_Console printf(String p0, Object[] p1);
	@Virtual @Overload Java_io_PrintWriter writer();
	@Virtual @Overload Java_io_Reader reader();
	@Virtual @Overload String readLine();
	@Virtual @Overload String readLine(String p0, Object[] p1);
	@Virtual @Overload int[] readPassword();
	@Virtual @Overload int[] readPassword(String p0, Object[] p1);
}

/* interface java.io.DataInput */
class Java_io_DataInput {
	/*-- Method --*/
	@Virtual @Overload String readLine();
	@Virtual @Overload String readUTF();
	@Virtual @Overload boolean readBoolean();
	@Virtual @Overload float readDouble();
	@Virtual @Overload float readFloat();
	@Virtual @Overload int readByte();
	@Virtual @Overload int readChar();
	@Virtual @Overload int readInt();
	@Virtual @Overload int readLong();
	@Virtual @Overload int readShort();
	@Virtual @Overload int readUnsignedByte();
	@Virtual @Overload int readUnsignedShort();
	@Virtual @Overload int skipBytes(int p0);
	@Virtual @Overload void readFully(int[] p0);
	@Virtual @Overload void readFully(int[] p0, int p1, int p2);
}

/* class java.io.DataInputStream */
class Java_io_DataInputStream extends Java_io_FilterInputStream {
	/*-- Method --*/
	@Static @Overload String readUTF(Java_io_DataInput p0);
	@Virtual @Overload String readUTF();
	@Virtual @Overload boolean readBoolean();
	@Virtual @Overload float readDouble();
	@Virtual @Overload float readFloat();
	@Virtual @Overload int readByte();
	@Virtual @Overload int readChar();
	@Virtual @Overload int readInt();
	@Virtual @Overload int readLong();
	@Virtual @Overload int readShort();
	@Virtual @Overload int readUnsignedByte();
	@Virtual @Overload int readUnsignedShort();
	@Virtual @Overload int skipBytes(int p0);
	@Virtual @Overload void readFully(int[] p0);
	@Virtual @Overload void readFully(int[] p0, int p1, int p2);
}
Java_io_DataInputStream Java_io_DataInputStream.new(Java_io_InputStream p0);

/* interface java.io.DataOutput */
class Java_io_DataOutput {
	/*-- Method --*/
	@Virtual @Overload void write(int p0);
	@Virtual @Overload void write(int[] p0);
	@Virtual @Overload void write(int[] p0, int p1, int p2);
	@Virtual @Overload void writeBoolean(boolean p0);
	@Virtual @Overload void writeByte(int p0);
	@Virtual @Overload void writeBytes(String p0);
	@Virtual @Overload void writeChar(int p0);
	@Virtual @Overload void writeChars(String p0);
	@Virtual @Overload void writeDouble(float p0);
	@Virtual @Overload void writeFloat(float p0);
	@Virtual @Overload void writeInt(int p0);
	@Virtual @Overload void writeLong(int p0);
	@Virtual @Overload void writeShort(int p0);
	@Virtual @Overload void writeUTF(String p0);
}

/* class java.io.DataOutputStream */
class Java_io_DataOutputStream extends Java_io_FilterOutputStream {
	/*-- Method --*/
	@Virtual @Overload int size();
	@Virtual @Overload void writeBoolean(boolean p0);
	@Virtual @Overload void writeByte(int p0);
	@Virtual @Overload void writeBytes(String p0);
	@Virtual @Overload void writeChar(int p0);
	@Virtual @Overload void writeChars(String p0);
	@Virtual @Overload void writeDouble(float p0);
	@Virtual @Overload void writeFloat(float p0);
	@Virtual @Overload void writeInt(int p0);
	@Virtual @Overload void writeLong(int p0);
	@Virtual @Overload void writeShort(int p0);
	@Virtual @Overload void writeUTF(String p0);
}
Java_io_DataOutputStream Java_io_DataOutputStream.new(Java_io_OutputStream p0);

/* class java.io.EOFException */
class Java_io_EOFException extends Java_io_IOException {
}
@Overload Java_io_EOFException Java_io_EOFException.new();
@Overload Java_io_EOFException Java_io_EOFException.new(String p0);

/* interface java.io.Serializable */
class Java_io_Serializable {
}

/* interface java.io.Externalizable */
class Java_io_Externalizable extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload void readExternal(Java_io_ObjectInput p0);
	@Virtual @Overload void writeExternal(Java_io_ObjectOutput p0);
}

/* class java.io.File */
class Java_io_File extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_io_File createTempFile(String p0, String p1);
	@Static @Overload Java_io_File createTempFile(String p0, String p1, Java_io_File p2);
	@Static @Overload Java_io_File[] listRoots();
	@Virtual @Overload Java_io_File getAbsoluteFile();
	@Virtual @Overload Java_io_File getCanonicalFile();
	@Virtual @Overload Java_io_File getParentFile();
	@Virtual @Overload Java_io_File[] listFiles();
	@Virtual @Overload Java_io_File[] listFiles(Java_io_FileFilter p0);
	@Virtual @Overload Java_io_File[] listFiles(Java_io_FilenameFilter p0);
	@Virtual @Overload Java_net_URI toURI();
	@Virtual @Overload Java_nio_file_Path toPath();
	@Virtual @Overload String getAbsolutePath();
	@Virtual @Overload String getCanonicalPath();
	@Virtual @Overload String getName();
	@Virtual @Overload String getParent();
	@Virtual @Overload String getPath();
	@Virtual @Overload String toString();
	@Virtual @Overload String[] list();
	@Virtual @Overload String[] list(Java_io_FilenameFilter p0);
	@Virtual @Overload boolean canExecute();
	@Virtual @Overload boolean canRead();
	@Virtual @Overload boolean canWrite();
	@Virtual @Overload boolean createNewFile();
	@Virtual @Overload boolean delete();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isAbsolute();
	@Virtual @Overload boolean isDirectory();
	@Virtual @Overload boolean isFile();
	@Virtual @Overload boolean isHidden();
	@Virtual @Overload boolean mkdir();
	@Virtual @Overload boolean mkdirs();
	@Virtual @Overload boolean renameTo(Java_io_File p0);
	@Virtual @Overload boolean setExecutable(boolean p0);
	@Virtual @Overload boolean setExecutable(boolean p0, boolean p1);
	@Virtual @Overload boolean setLastModified(int p0);
	@Virtual @Overload boolean setReadOnly();
	@Virtual @Overload boolean setReadable(boolean p0);
	@Virtual @Overload boolean setReadable(boolean p0, boolean p1);
	@Virtual @Overload boolean setWritable(boolean p0);
	@Virtual @Overload boolean setWritable(boolean p0, boolean p1);
	@Virtual @Overload int compareTo(Java_io_File p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int getFreeSpace();
	@Virtual @Overload int getTotalSpace();
	@Virtual @Overload int getUsableSpace();
	@Virtual @Overload int lastModified();
	@Virtual @Overload int length();
	@Virtual @Overload void deleteOnExit();
}
@Overload Java_io_File Java_io_File.new(String p0);
@Overload Java_io_File Java_io_File.new(String p0, String p1);
@Overload Java_io_File Java_io_File.new(Java_io_File p0, String p1);
@Overload Java_io_File Java_io_File.new(Java_net_URI p0);

/* class java.io.FileDescriptor */
class Java_io_FileDescriptor {
	/*-- Method --*/
	@Virtual @Overload boolean valid();
	@Virtual @Overload void sync();
}
Java_io_FileDescriptor Java_io_FileDescriptor.new();

/* interface java.io.FileFilter */
class Java_io_FileFilter {
	/*-- Method --*/
	@Virtual @Overload boolean accept(Java_io_File p0);
}

/* class java.io.FileInputStream */
class Java_io_FileInputStream extends Java_io_InputStream {
	/*-- Method --*/
	@Virtual @Overload Java_io_FileDescriptor getFD();
	@Virtual @Overload Java_nio_channels_FileChannel getChannel();
}
@Overload Java_io_FileInputStream Java_io_FileInputStream.new(String p0);
@Overload Java_io_FileInputStream Java_io_FileInputStream.new(Java_io_File p0);
@Overload Java_io_FileInputStream Java_io_FileInputStream.new(Java_io_FileDescriptor p0);

/* class java.io.FileNotFoundException */
class Java_io_FileNotFoundException extends Java_io_IOException {
}
@Overload Java_io_FileNotFoundException Java_io_FileNotFoundException.new();
@Overload Java_io_FileNotFoundException Java_io_FileNotFoundException.new(String p0);

/* class java.io.FileOutputStream */
class Java_io_FileOutputStream extends Java_io_OutputStream {
	/*-- Method --*/
	@Virtual @Overload Java_io_FileDescriptor getFD();
	@Virtual @Overload Java_nio_channels_FileChannel getChannel();
}
@Overload Java_io_FileOutputStream Java_io_FileOutputStream.new(String p0);
@Overload Java_io_FileOutputStream Java_io_FileOutputStream.new(String p0, boolean p1);
@Overload Java_io_FileOutputStream Java_io_FileOutputStream.new(Java_io_File p0);
@Overload Java_io_FileOutputStream Java_io_FileOutputStream.new(Java_io_File p0, boolean p1);
@Overload Java_io_FileOutputStream Java_io_FileOutputStream.new(Java_io_FileDescriptor p0);

/* class java.io.FilePermission */
class Java_io_FilePermission extends Java_security_Permission {
}
Java_io_FilePermission Java_io_FilePermission.new(String p0, String p1);

/* class java.io.InputStreamReader */
class Java_io_InputStreamReader extends Java_io_Reader {
	/*-- Method --*/
	@Virtual @Overload String getEncoding();
}
@Overload Java_io_InputStreamReader Java_io_InputStreamReader.new(Java_io_InputStream p0);
@Overload Java_io_InputStreamReader Java_io_InputStreamReader.new(Java_io_InputStream p0, String p1);
@Overload Java_io_InputStreamReader Java_io_InputStreamReader.new(Java_io_InputStream p0, Java_nio_charset_Charset p1);
@Overload Java_io_InputStreamReader Java_io_InputStreamReader.new(Java_io_InputStream p0, Java_nio_charset_CharsetDecoder p1);

/* class java.io.FileReader */
class Java_io_FileReader extends Java_io_InputStreamReader {
}
@Overload Java_io_FileReader Java_io_FileReader.new(String p0);
@Overload Java_io_FileReader Java_io_FileReader.new(Java_io_File p0);
@Overload Java_io_FileReader Java_io_FileReader.new(Java_io_FileDescriptor p0);

/* class java.io.OutputStreamWriter */
class Java_io_OutputStreamWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload String getEncoding();
}
@Overload Java_io_OutputStreamWriter Java_io_OutputStreamWriter.new(Java_io_OutputStream p0, String p1);
@Overload Java_io_OutputStreamWriter Java_io_OutputStreamWriter.new(Java_io_OutputStream p0);
@Overload Java_io_OutputStreamWriter Java_io_OutputStreamWriter.new(Java_io_OutputStream p0, Java_nio_charset_Charset p1);
@Overload Java_io_OutputStreamWriter Java_io_OutputStreamWriter.new(Java_io_OutputStream p0, Java_nio_charset_CharsetEncoder p1);

/* class java.io.FileWriter */
class Java_io_FileWriter extends Java_io_OutputStreamWriter {
}
@Overload Java_io_FileWriter Java_io_FileWriter.new(String p0);
@Overload Java_io_FileWriter Java_io_FileWriter.new(String p0, boolean p1);
@Overload Java_io_FileWriter Java_io_FileWriter.new(Java_io_File p0);
@Overload Java_io_FileWriter Java_io_FileWriter.new(Java_io_File p0, boolean p1);
@Overload Java_io_FileWriter Java_io_FileWriter.new(Java_io_FileDescriptor p0);

/* interface java.io.FilenameFilter */
class Java_io_FilenameFilter {
	/*-- Method --*/
	@Virtual @Overload boolean accept(Java_io_File p0, String p1);
}

/* class java.io.FilterReader */
class Java_io_FilterReader extends Java_io_Reader {
}

/* class java.io.FilterWriter */
class Java_io_FilterWriter extends Java_io_Writer {
}

/* class java.io.IOError */
class Java_io_IOError extends Java_lang_Error {
}
Java_io_IOError Java_io_IOError.new(Java_lang_Throwable p0);

/* class java.io.InterruptedIOException */
class Java_io_InterruptedIOException extends Java_io_IOException {
}
@Overload Java_io_InterruptedIOException Java_io_InterruptedIOException.new();
@Overload Java_io_InterruptedIOException Java_io_InterruptedIOException.new(String p0);

/* class java.io.ObjectStreamException */
class Java_io_ObjectStreamException extends Java_io_IOException {
}

/* class java.io.InvalidClassException */
class Java_io_InvalidClassException extends Java_io_ObjectStreamException {
}
@Overload Java_io_InvalidClassException Java_io_InvalidClassException.new(String p0);
@Overload Java_io_InvalidClassException Java_io_InvalidClassException.new(String p0, String p1);

/* class java.io.InvalidObjectException */
class Java_io_InvalidObjectException extends Java_io_ObjectStreamException {
}
Java_io_InvalidObjectException Java_io_InvalidObjectException.new(String p0);

/* class java.io.LineNumberReader */
class Java_io_LineNumberReader extends Java_io_BufferedReader {
	/*-- Method --*/
	@Virtual @Overload int getLineNumber();
	@Virtual @Overload void setLineNumber(int p0);
}
@Overload Java_io_LineNumberReader Java_io_LineNumberReader.new(Java_io_Reader p0);
@Overload Java_io_LineNumberReader Java_io_LineNumberReader.new(Java_io_Reader p0, int p1);

/* class java.io.NotActiveException */
class Java_io_NotActiveException extends Java_io_ObjectStreamException {
}
@Overload Java_io_NotActiveException Java_io_NotActiveException.new(String p0);
@Overload Java_io_NotActiveException Java_io_NotActiveException.new();

/* class java.io.NotSerializableException */
class Java_io_NotSerializableException extends Java_io_ObjectStreamException {
}
@Overload Java_io_NotSerializableException Java_io_NotSerializableException.new(String p0);
@Overload Java_io_NotSerializableException Java_io_NotSerializableException.new();

/* interface java.io.ObjectInput */
class Java_io_ObjectInput extends Java_io_DataInput {
	/*-- Method --*/
	@Virtual @Overload Object readObject();
	@Virtual @Overload int available();
	@Virtual @Overload int read();
	@Virtual @Overload int read(int[] p0);
	@Virtual @Overload int read(int[] p0, int p1, int p2);
	@Virtual @Overload int skip(int p0);
	@Virtual @Overload void close();
}

/* class java.io.ObjectInputStream */
class Java_io_ObjectInputStream extends Java_io_InputStream {
	/*-- Method --*/
	@Virtual @Overload Java_io_ObjectInputStream_GetField readFields();
	@Virtual @Overload Object readObject();
	@Virtual @Overload Object readUnshared();
	@Virtual @Overload String readUTF();
	@Virtual @Overload boolean readBoolean();
	@Virtual @Overload float readDouble();
	@Virtual @Overload float readFloat();
	@Virtual @Overload int readByte();
	@Virtual @Overload int readChar();
	@Virtual @Overload int readInt();
	@Virtual @Overload int readLong();
	@Virtual @Overload int readShort();
	@Virtual @Overload int readUnsignedByte();
	@Virtual @Overload int readUnsignedShort();
	@Virtual @Overload int skipBytes(int p0);
	@Virtual @Overload void defaultReadObject();
	@Virtual @Overload void readFully(int[] p0);
	@Virtual @Overload void readFully(int[] p0, int p1, int p2);
	@Virtual @Overload void registerValidation(Java_io_ObjectInputValidation p0, int p1);
}
Java_io_ObjectInputStream Java_io_ObjectInputStream.new(Java_io_InputStream p0);

/* interface java.io.ObjectInputValidation */
class Java_io_ObjectInputValidation {
	/*-- Method --*/
	@Virtual @Overload void validateObject();
}

/* interface java.io.ObjectOutput */
class Java_io_ObjectOutput extends Java_io_DataOutput {
	/*-- Method --*/
	@Virtual @Overload void close();
	@Virtual @Overload void flush();
	@Virtual @Overload void writeObject(Object p0);
}

/* class java.io.ObjectOutputStream */
class Java_io_ObjectOutputStream extends Java_io_OutputStream {
	/*-- Method --*/
	@Virtual @Overload Java_io_ObjectOutputStream_PutField putFields();
	@Virtual @Overload void defaultWriteObject();
	@Virtual @Overload void reset();
	@Virtual @Overload void useProtocolVersion(int p0);
	@Virtual @Overload void writeBoolean(boolean p0);
	@Virtual @Overload void writeByte(int p0);
	@Virtual @Overload void writeBytes(String p0);
	@Virtual @Overload void writeChar(int p0);
	@Virtual @Overload void writeChars(String p0);
	@Virtual @Overload void writeDouble(float p0);
	@Virtual @Overload void writeFields();
	@Virtual @Overload void writeFloat(float p0);
	@Virtual @Overload void writeInt(int p0);
	@Virtual @Overload void writeLong(int p0);
	@Virtual @Overload void writeObject(Object p0);
	@Virtual @Overload void writeShort(int p0);
	@Virtual @Overload void writeUTF(String p0);
	@Virtual @Overload void writeUnshared(Object p0);
}
Java_io_ObjectOutputStream Java_io_ObjectOutputStream.new(Java_io_OutputStream p0);

/* class java.io.ObjectStreamClass */
class Java_io_ObjectStreamClass extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_io_ObjectStreamClass lookup(Class p0);
	@Static @Overload Java_io_ObjectStreamClass lookupAny(Class p0);
	@Virtual @Overload Class forClass();
	@Virtual @Overload Java_io_ObjectStreamField getField(String p0);
	@Virtual @Overload Java_io_ObjectStreamField[] getFields();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload int getSerialVersionUID();
}

/* interface java.io.ObjectStreamConstants */
class Java_io_ObjectStreamConstants {
}

/* class java.io.ObjectStreamField */
class Java_io_ObjectStreamField extends Java_lang_Comparable {
	/*-- Method --*/
	@Virtual @Overload Class getType();
	@Virtual @Overload String getName();
	@Virtual @Overload String getTypeString();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isPrimitive();
	@Virtual @Overload boolean isUnshared();
	@Virtual @Overload int getOffset();
	@Virtual @Overload int getTypeCode();
}
@Overload Java_io_ObjectStreamField Java_io_ObjectStreamField.new(String p0, Class p1);
@Overload Java_io_ObjectStreamField Java_io_ObjectStreamField.new(String p0, Class p1, boolean p2);

/* class java.io.OptionalDataException */
class Java_io_OptionalDataException extends Java_io_ObjectStreamException {
}

/* class java.io.PipedInputStream */
class Java_io_PipedInputStream extends Java_io_InputStream {
	/*-- Method --*/
	@Virtual @Overload void connect(Java_io_PipedOutputStream p0);
}
@Overload Java_io_PipedInputStream Java_io_PipedInputStream.new(Java_io_PipedOutputStream p0);
@Overload Java_io_PipedInputStream Java_io_PipedInputStream.new(Java_io_PipedOutputStream p0, int p1);
@Overload Java_io_PipedInputStream Java_io_PipedInputStream.new();
@Overload Java_io_PipedInputStream Java_io_PipedInputStream.new(int p0);

/* class java.io.PipedOutputStream */
class Java_io_PipedOutputStream extends Java_io_OutputStream {
	/*-- Method --*/
	@Virtual @Overload void connect(Java_io_PipedInputStream p0);
}
@Overload Java_io_PipedOutputStream Java_io_PipedOutputStream.new(Java_io_PipedInputStream p0);
@Overload Java_io_PipedOutputStream Java_io_PipedOutputStream.new();

/* class java.io.PipedReader */
class Java_io_PipedReader extends Java_io_Reader {
	/*-- Method --*/
	@Virtual @Overload void connect(Java_io_PipedWriter p0);
}
@Overload Java_io_PipedReader Java_io_PipedReader.new(Java_io_PipedWriter p0);
@Overload Java_io_PipedReader Java_io_PipedReader.new(Java_io_PipedWriter p0, int p1);
@Overload Java_io_PipedReader Java_io_PipedReader.new();
@Overload Java_io_PipedReader Java_io_PipedReader.new(int p0);

/* class java.io.PipedWriter */
class Java_io_PipedWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload void connect(Java_io_PipedReader p0);
}
@Overload Java_io_PipedWriter Java_io_PipedWriter.new(Java_io_PipedReader p0);
@Overload Java_io_PipedWriter Java_io_PipedWriter.new();

/* class java.io.PrintStream */
class Java_io_PrintStream extends Java_io_FilterOutputStream {
	/*-- Method --*/
	@Virtual @Overload Java_io_PrintStream append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_io_PrintStream append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_io_PrintStream append(int p0);
	@Virtual @Overload Java_io_PrintStream printf(Java_util_Locale p0, String p1, Object[] p2);
	@Virtual @Overload Java_io_PrintStream printf(String p0, Object[] p1);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(int p0);
	@Virtual @Overload boolean checkError();
	@Virtual @Overload void println();
	@Virtual @Overload void println(Object p0);
	@Virtual @Overload void println(String p0);
	@Virtual @Overload void println(boolean p0);
	@Virtual @Overload void println(float p0);
	@Virtual @Overload void println(int p0);
	@Virtual @Overload void println(int[] p0);
}
@Overload Java_io_PrintStream Java_io_PrintStream.new(Java_io_OutputStream p0);
@Overload Java_io_PrintStream Java_io_PrintStream.new(Java_io_OutputStream p0, boolean p1);
@Overload Java_io_PrintStream Java_io_PrintStream.new(Java_io_OutputStream p0, boolean p1, String p2);
@Overload Java_io_PrintStream Java_io_PrintStream.new(String p0);
@Overload Java_io_PrintStream Java_io_PrintStream.new(String p0, String p1);
@Overload Java_io_PrintStream Java_io_PrintStream.new(Java_io_File p0);
@Overload Java_io_PrintStream Java_io_PrintStream.new(Java_io_File p0, String p1);

/* class java.io.PrintWriter */
class Java_io_PrintWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload Java_io_PrintWriter printf(Java_util_Locale p0, String p1, Object[] p2);
	@Virtual @Overload Java_io_PrintWriter printf(String p0, Object[] p1);
	@Virtual @Overload boolean checkError();
	@Virtual @Overload void println();
	@Virtual @Overload void println(Object p0);
	@Virtual @Overload void println(String p0);
	@Virtual @Overload void println(boolean p0);
	@Virtual @Overload void println(float p0);
	@Virtual @Overload void println(int p0);
	@Virtual @Overload void println(int[] p0);
}
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_Writer p0);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_Writer p0, boolean p1);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_OutputStream p0);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_OutputStream p0, boolean p1);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(String p0);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(String p0, String p1);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_File p0);
@Overload Java_io_PrintWriter Java_io_PrintWriter.new(Java_io_File p0, String p1);

/* class java.io.PushbackInputStream */
class Java_io_PushbackInputStream extends Java_io_FilterInputStream {
	/*-- Method --*/
	@Virtual @Overload void unread(int p0);
	@Virtual @Overload void unread(int[] p0);
	@Virtual @Overload void unread(int[] p0, int p1, int p2);
}
@Overload Java_io_PushbackInputStream Java_io_PushbackInputStream.new(Java_io_InputStream p0, int p1);
@Overload Java_io_PushbackInputStream Java_io_PushbackInputStream.new(Java_io_InputStream p0);

/* class java.io.PushbackReader */
class Java_io_PushbackReader extends Java_io_FilterReader {
	/*-- Method --*/
	@Virtual @Overload void unread(int p0);
	@Virtual @Overload void unread(int[] p0);
	@Virtual @Overload void unread(int[] p0, int p1, int p2);
}
@Overload Java_io_PushbackReader Java_io_PushbackReader.new(Java_io_Reader p0, int p1);
@Overload Java_io_PushbackReader Java_io_PushbackReader.new(Java_io_Reader p0);

/* class java.io.RandomAccessFile */
class Java_io_RandomAccessFile extends Java_io_DataOutput {
	/*-- Method --*/
	@Virtual @Overload Java_io_FileDescriptor getFD();
	@Virtual @Overload Java_nio_channels_FileChannel getChannel();
	@Virtual @Overload String readLine();
	@Virtual @Overload String readUTF();
	@Virtual @Overload boolean readBoolean();
	@Virtual @Overload float readDouble();
	@Virtual @Overload float readFloat();
	@Virtual @Overload int getFilePointer();
	@Virtual @Overload int length();
	@Virtual @Overload int read();
	@Virtual @Overload int read(int[] p0);
	@Virtual @Overload int read(int[] p0, int p1, int p2);
	@Virtual @Overload int readByte();
	@Virtual @Overload int readChar();
	@Virtual @Overload int readInt();
	@Virtual @Overload int readLong();
	@Virtual @Overload int readShort();
	@Virtual @Overload int readUnsignedByte();
	@Virtual @Overload int readUnsignedShort();
	@Virtual @Overload int skipBytes(int p0);
	@Virtual @Overload void close();
	@Virtual @Overload void readFully(int[] p0);
	@Virtual @Overload void readFully(int[] p0, int p1, int p2);
	@Virtual @Overload void seek(int p0);
	@Virtual @Overload void setLength(int p0);
}
@Overload Java_io_RandomAccessFile Java_io_RandomAccessFile.new(String p0, String p1);
@Overload Java_io_RandomAccessFile Java_io_RandomAccessFile.new(Java_io_File p0, String p1);

/* class java.io.SequenceInputStream */
class Java_io_SequenceInputStream extends Java_io_InputStream {
}
@Overload Java_io_SequenceInputStream Java_io_SequenceInputStream.new(Java_util_Enumeration p0);
@Overload Java_io_SequenceInputStream Java_io_SequenceInputStream.new(Java_io_InputStream p0, Java_io_InputStream p1);

/* class java.io.SerializablePermission */
class Java_io_SerializablePermission extends Java_security_BasicPermission {
}
@Overload Java_io_SerializablePermission Java_io_SerializablePermission.new(String p0);
@Overload Java_io_SerializablePermission Java_io_SerializablePermission.new(String p0, String p1);

/* class java.io.StreamCorruptedException */
class Java_io_StreamCorruptedException extends Java_io_ObjectStreamException {
}
@Overload Java_io_StreamCorruptedException Java_io_StreamCorruptedException.new(String p0);
@Overload Java_io_StreamCorruptedException Java_io_StreamCorruptedException.new();

/* class java.io.StreamTokenizer */
class Java_io_StreamTokenizer {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload int lineno();
	@Virtual @Overload int nextToken();
	@Virtual @Overload void commentChar(int p0);
	@Virtual @Overload void eolIsSignificant(boolean p0);
	@Virtual @Overload void lowerCaseMode(boolean p0);
	@Virtual @Overload void ordinaryChar(int p0);
	@Virtual @Overload void ordinaryChars(int p0, int p1);
	@Virtual @Overload void parseNumbers();
	@Virtual @Overload void pushBack();
	@Virtual @Overload void quoteChar(int p0);
	@Virtual @Overload void resetSyntax();
	@Virtual @Overload void slashSlashComments(boolean p0);
	@Virtual @Overload void slashStarComments(boolean p0);
	@Virtual @Overload void whitespaceChars(int p0, int p1);
	@Virtual @Overload void wordChars(int p0, int p1);
}
@Overload Java_io_StreamTokenizer Java_io_StreamTokenizer.new(Java_io_InputStream p0);
@Overload Java_io_StreamTokenizer Java_io_StreamTokenizer.new(Java_io_Reader p0);

/* class java.io.StringReader */
class Java_io_StringReader extends Java_io_Reader {
}
Java_io_StringReader Java_io_StringReader.new(String p0);

/* class java.io.StringWriter */
class Java_io_StringWriter extends Java_io_Writer {
	/*-- Method --*/
	@Virtual @Overload Java_lang_StringBuffer getBuffer();
}
@Overload Java_io_StringWriter Java_io_StringWriter.new();
@Overload Java_io_StringWriter Java_io_StringWriter.new(int p0);

/* class java.io.SyncFailedException */
class Java_io_SyncFailedException extends Java_io_IOException {
}
Java_io_SyncFailedException Java_io_SyncFailedException.new(String p0);

/* class java.io.UTFDataFormatException */
class Java_io_UTFDataFormatException extends Java_io_IOException {
}
@Overload Java_io_UTFDataFormatException Java_io_UTFDataFormatException.new();
@Overload Java_io_UTFDataFormatException Java_io_UTFDataFormatException.new(String p0);

/* class java.io.UnsupportedEncodingException */
class Java_io_UnsupportedEncodingException extends Java_io_IOException {
}
@Overload Java_io_UnsupportedEncodingException Java_io_UnsupportedEncodingException.new();
@Overload Java_io_UnsupportedEncodingException Java_io_UnsupportedEncodingException.new(String p0);

/* class java.io.WriteAbortedException */
class Java_io_WriteAbortedException extends Java_io_ObjectStreamException {
}
Java_io_WriteAbortedException Java_io_WriteAbortedException.new(String p0, Java_lang_Exception p1);

/*============================================================*/
/* java package java.nio */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_lang_Appendable;
class Java_lang_CharSequence;
class Java_lang_IllegalStateException;
class Java_lang_RuntimeException;
class Java_lang_UnsupportedOperationException;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_nio_Buffer;
class Java_nio_BufferOverflowException extends Java_lang_RuntimeException;
class Java_nio_BufferUnderflowException extends Java_lang_RuntimeException;
class Java_nio_ByteBuffer extends Java_nio_Buffer;
class Java_nio_ByteOrder;
class Java_nio_CharBuffer extends Java_nio_Buffer;
class Java_nio_DoubleBuffer extends Java_nio_Buffer;
class Java_nio_FloatBuffer extends Java_nio_Buffer;
class Java_nio_IntBuffer extends Java_nio_Buffer;
class Java_nio_InvalidMarkException extends Java_lang_IllegalStateException;
class Java_nio_LongBuffer extends Java_nio_Buffer;
class Java_nio_MappedByteBuffer extends Java_nio_ByteBuffer;
class Java_nio_ReadOnlyBufferException extends Java_lang_UnsupportedOperationException;
class Java_nio_ShortBuffer extends Java_nio_Buffer;

/*------------------------------------------------------------*/
/* class java.nio.Buffer */
class Java_nio_Buffer {
	/*-- Method --*/
	@Virtual @Overload Java_nio_Buffer clear();
	@Virtual @Overload Java_nio_Buffer flip();
	@Virtual @Overload Java_nio_Buffer limit(int p0);
	@Virtual @Overload Java_nio_Buffer mark();
	@Virtual @Overload Java_nio_Buffer position(int p0);
	@Virtual @Overload Java_nio_Buffer reset();
	@Virtual @Overload Java_nio_Buffer rewind();
	@Virtual @Overload Object array();
	@Virtual @Overload boolean hasArray();
	@Virtual @Overload boolean hasRemaining();
	@Virtual @Overload boolean isDirect();
	@Virtual @Overload boolean isReadOnly();
	@Virtual @Overload int arrayOffset();
	@Virtual @Overload int capacity();
	@Virtual @Overload int limit();
	@Virtual @Overload int position();
	@Virtual @Overload int remaining();
}

/* class java.nio.BufferOverflowException */
class Java_nio_BufferOverflowException extends Java_lang_RuntimeException {
}
Java_nio_BufferOverflowException Java_nio_BufferOverflowException.new();

/* class java.nio.BufferUnderflowException */
class Java_nio_BufferUnderflowException extends Java_lang_RuntimeException {
}
Java_nio_BufferUnderflowException Java_nio_BufferUnderflowException.new();

/* class java.nio.ByteBuffer */
class Java_nio_ByteBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_ByteBuffer allocate(int p0);
	@Static @Overload Java_nio_ByteBuffer allocateDirect(int p0);
	@Static @Overload Java_nio_ByteBuffer wrap(int[] p0);
	@Static @Overload Java_nio_ByteBuffer wrap(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_ByteBuffer compact();
	@Virtual @Overload Java_nio_ByteBuffer duplicate();
	@Virtual @Overload Java_nio_ByteBuffer get(int[] p0);
	@Virtual @Overload Java_nio_ByteBuffer get(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteBuffer order(Java_nio_ByteOrder p0);
	@Virtual @Overload Java_nio_ByteBuffer put(Java_nio_ByteBuffer p0);
	@Virtual @Overload Java_nio_ByteBuffer put(int p0);
	@Virtual @Overload Java_nio_ByteBuffer put(int p0, int p1);
	@Virtual @Overload Java_nio_ByteBuffer put(int[] p0);
	@Virtual @Overload Java_nio_ByteBuffer put(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteBuffer putChar(int p0);
	@Virtual @Overload Java_nio_ByteBuffer putChar(int p0, int p1);
	@Virtual @Overload Java_nio_ByteBuffer putDouble(float p0);
	@Virtual @Overload Java_nio_ByteBuffer putDouble(int p0, float p1);
	@Virtual @Overload Java_nio_ByteBuffer putFloat(float p0);
	@Virtual @Overload Java_nio_ByteBuffer putFloat(int p0, float p1);
	@Virtual @Overload Java_nio_ByteBuffer putInt(int p0);
	@Virtual @Overload Java_nio_ByteBuffer putInt(int p0, int p1);
	@Virtual @Overload Java_nio_ByteBuffer putLong(int p0);
	@Virtual @Overload Java_nio_ByteBuffer putLong(int p0, int p1);
	@Virtual @Overload Java_nio_ByteBuffer putShort(int p0);
	@Virtual @Overload Java_nio_ByteBuffer putShort(int p0, int p1);
	@Virtual @Overload Java_nio_ByteBuffer slice();
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_CharBuffer asCharBuffer();
	@Virtual @Overload Java_nio_DoubleBuffer asDoubleBuffer();
	@Virtual @Overload Java_nio_FloatBuffer asFloatBuffer();
	@Virtual @Overload Java_nio_IntBuffer asIntBuffer();
	@Virtual @Overload Java_nio_LongBuffer asLongBuffer();
	@Virtual @Overload Java_nio_ShortBuffer asShortBuffer();
	@Virtual @Overload float getDouble();
	@Virtual @Overload float getDouble(int p0);
	@Virtual @Overload float getFloat();
	@Virtual @Overload float getFloat(int p0);
	@Virtual @Overload int compareTo(Java_nio_ByteBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get();
	@Virtual @Overload int get(int p0);
	@Virtual @Overload int getChar();
	@Virtual @Overload int getChar(int p0);
	@Virtual @Overload int getInt();
	@Virtual @Overload int getInt(int p0);
	@Virtual @Overload int getLong();
	@Virtual @Overload int getLong(int p0);
	@Virtual @Overload int getShort();
	@Virtual @Overload int getShort(int p0);
}

/* class java.nio.ByteOrder */
class Java_nio_ByteOrder {
	/*-- Method --*/
	@Static @Overload Java_nio_ByteOrder nativeOrder();
	@Virtual @Overload String toString();
}

/* class java.nio.CharBuffer */
class Java_nio_CharBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_CharBuffer allocate(int p0);
	@Static @Overload Java_nio_CharBuffer wrap(Java_lang_CharSequence p0);
	@Static @Overload Java_nio_CharBuffer wrap(Java_lang_CharSequence p0, int p1, int p2);
	@Static @Overload Java_nio_CharBuffer wrap(int[] p0);
	@Static @Overload Java_nio_CharBuffer wrap(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(int p0);
	@Virtual @Overload Java_lang_CharSequence subSequence(int p0, int p1);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_CharBuffer append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_nio_CharBuffer append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_nio_CharBuffer append(int p0);
	@Virtual @Overload Java_nio_CharBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_CharBuffer compact();
	@Virtual @Overload Java_nio_CharBuffer duplicate();
	@Virtual @Overload Java_nio_CharBuffer get(int[] p0);
	@Virtual @Overload Java_nio_CharBuffer get(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_CharBuffer put(Java_nio_CharBuffer p0);
	@Virtual @Overload Java_nio_CharBuffer put(String p0);
	@Virtual @Overload Java_nio_CharBuffer put(String p0, int p1, int p2);
	@Virtual @Overload Java_nio_CharBuffer put(int p0);
	@Virtual @Overload Java_nio_CharBuffer put(int p0, int p1);
	@Virtual @Overload Java_nio_CharBuffer put(int[] p0);
	@Virtual @Overload Java_nio_CharBuffer put(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_CharBuffer slice();
	@Virtual @Overload Java_nio_CharBuffer subSequence(int p0, int p1);
	@Virtual @Overload int charAt(int p0);
	@Virtual @Overload int compareTo(Java_nio_CharBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get();
	@Virtual @Overload int get(int p0);
	@Virtual @Overload int length();
	@Virtual @Overload int read(Java_nio_CharBuffer p0);
}

/* class java.nio.DoubleBuffer */
class Java_nio_DoubleBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_DoubleBuffer allocate(int p0);
	@Static @Overload Java_nio_DoubleBuffer wrap(float[] p0);
	@Static @Overload Java_nio_DoubleBuffer wrap(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_DoubleBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_DoubleBuffer compact();
	@Virtual @Overload Java_nio_DoubleBuffer duplicate();
	@Virtual @Overload Java_nio_DoubleBuffer get(float[] p0);
	@Virtual @Overload Java_nio_DoubleBuffer get(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_DoubleBuffer put(Java_nio_DoubleBuffer p0);
	@Virtual @Overload Java_nio_DoubleBuffer put(float p0);
	@Virtual @Overload Java_nio_DoubleBuffer put(float[] p0);
	@Virtual @Overload Java_nio_DoubleBuffer put(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_DoubleBuffer put(int p0, float p1);
	@Virtual @Overload Java_nio_DoubleBuffer slice();
	@Virtual @Overload float get();
	@Virtual @Overload float get(int p0);
	@Virtual @Overload int compareTo(Java_nio_DoubleBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
}

/* class java.nio.FloatBuffer */
class Java_nio_FloatBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_FloatBuffer allocate(int p0);
	@Static @Overload Java_nio_FloatBuffer wrap(float[] p0);
	@Static @Overload Java_nio_FloatBuffer wrap(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_FloatBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_FloatBuffer compact();
	@Virtual @Overload Java_nio_FloatBuffer duplicate();
	@Virtual @Overload Java_nio_FloatBuffer get(float[] p0);
	@Virtual @Overload Java_nio_FloatBuffer get(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_FloatBuffer put(Java_nio_FloatBuffer p0);
	@Virtual @Overload Java_nio_FloatBuffer put(float p0);
	@Virtual @Overload Java_nio_FloatBuffer put(float[] p0);
	@Virtual @Overload Java_nio_FloatBuffer put(float[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_FloatBuffer put(int p0, float p1);
	@Virtual @Overload Java_nio_FloatBuffer slice();
	@Virtual @Overload float get();
	@Virtual @Overload float get(int p0);
	@Virtual @Overload int compareTo(Java_nio_FloatBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
}

/* class java.nio.IntBuffer */
class Java_nio_IntBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_IntBuffer allocate(int p0);
	@Static @Overload Java_nio_IntBuffer wrap(int[] p0);
	@Static @Overload Java_nio_IntBuffer wrap(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_IntBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_IntBuffer compact();
	@Virtual @Overload Java_nio_IntBuffer duplicate();
	@Virtual @Overload Java_nio_IntBuffer get(int[] p0);
	@Virtual @Overload Java_nio_IntBuffer get(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_IntBuffer put(Java_nio_IntBuffer p0);
	@Virtual @Overload Java_nio_IntBuffer put(int p0);
	@Virtual @Overload Java_nio_IntBuffer put(int p0, int p1);
	@Virtual @Overload Java_nio_IntBuffer put(int[] p0);
	@Virtual @Overload Java_nio_IntBuffer put(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_IntBuffer slice();
	@Virtual @Overload int compareTo(Java_nio_IntBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get();
	@Virtual @Overload int get(int p0);
}

/* class java.nio.InvalidMarkException */
class Java_nio_InvalidMarkException extends Java_lang_IllegalStateException {
}
Java_nio_InvalidMarkException Java_nio_InvalidMarkException.new();

/* class java.nio.LongBuffer */
class Java_nio_LongBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_LongBuffer allocate(int p0);
	@Static @Overload Java_nio_LongBuffer wrap(int[] p0);
	@Static @Overload Java_nio_LongBuffer wrap(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_LongBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_LongBuffer compact();
	@Virtual @Overload Java_nio_LongBuffer duplicate();
	@Virtual @Overload Java_nio_LongBuffer get(int[] p0);
	@Virtual @Overload Java_nio_LongBuffer get(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_LongBuffer put(Java_nio_LongBuffer p0);
	@Virtual @Overload Java_nio_LongBuffer put(int p0);
	@Virtual @Overload Java_nio_LongBuffer put(int p0, int p1);
	@Virtual @Overload Java_nio_LongBuffer put(int[] p0);
	@Virtual @Overload Java_nio_LongBuffer put(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_LongBuffer slice();
	@Virtual @Overload int compareTo(Java_nio_LongBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get();
	@Virtual @Overload int get(int p0);
}

/* class java.nio.MappedByteBuffer */
class Java_nio_MappedByteBuffer extends Java_nio_ByteBuffer {
	/*-- Method --*/
	@Virtual @Overload Java_nio_MappedByteBuffer force();
	@Virtual @Overload Java_nio_MappedByteBuffer load();
	@Virtual @Overload boolean isLoaded();
}

/* class java.nio.ReadOnlyBufferException */
class Java_nio_ReadOnlyBufferException extends Java_lang_UnsupportedOperationException {
}
Java_nio_ReadOnlyBufferException Java_nio_ReadOnlyBufferException.new();

/* class java.nio.ShortBuffer */
class Java_nio_ShortBuffer extends Java_nio_Buffer {
	/*-- Method --*/
	@Static @Overload Java_nio_ShortBuffer allocate(int p0);
	@Static @Overload Java_nio_ShortBuffer wrap(int[] p0);
	@Static @Overload Java_nio_ShortBuffer wrap(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ByteOrder order();
	@Virtual @Overload Java_nio_ShortBuffer asReadOnlyBuffer();
	@Virtual @Overload Java_nio_ShortBuffer compact();
	@Virtual @Overload Java_nio_ShortBuffer duplicate();
	@Virtual @Overload Java_nio_ShortBuffer get(int[] p0);
	@Virtual @Overload Java_nio_ShortBuffer get(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ShortBuffer put(Java_nio_ShortBuffer p0);
	@Virtual @Overload Java_nio_ShortBuffer put(int p0);
	@Virtual @Overload Java_nio_ShortBuffer put(int p0, int p1);
	@Virtual @Overload Java_nio_ShortBuffer put(int[] p0);
	@Virtual @Overload Java_nio_ShortBuffer put(int[] p0, int p1, int p2);
	@Virtual @Overload Java_nio_ShortBuffer slice();
	@Virtual @Overload int compareTo(Java_nio_ShortBuffer p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get();
	@Virtual @Overload int get(int p0);
}

/*============================================================*/
/* java package java.lang */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Console;
class Java_io_File;
class Java_io_FileDescriptor;
class Java_io_InputStream;
class Java_io_OutputStream;
class Java_io_PrintStream;
class Java_io_PrintWriter;
class Java_io_Serializable;
class Java_lang_ProcessBuilder_Redirect;
class Java_lang_Thread_State;
class Java_lang_Thread_UncaughtExceptionHandler;
class Java_lang_annotation_Annotation;
class Java_lang_reflect_AnnotatedElement;
class Java_lang_reflect_Constructor;
class Java_lang_reflect_Field;
class Java_lang_reflect_Method;
class Java_lang_reflect_Type;
class Java_lang_reflect_TypeVariable;
class Java_net_InetAddress;
class Java_net_URL;
class Java_nio_CharBuffer;
class Java_nio_channels_Channel;
class Java_nio_charset_Charset;
class Java_security_BasicPermission;
class Java_security_Permission;
class Java_security_ProtectionDomain;
class Java_util_Enumeration;
class Java_util_Iterator;
class Java_util_List;
class Java_util_Locale;
class Java_util_Map;
class Java_util_Properties;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_lang_Throwable extends Java_io_Serializable;
class Java_lang_Error extends Java_lang_Throwable;
class Java_lang_LinkageError extends Java_lang_Error;
class Java_lang_IncompatibleClassChangeError extends Java_lang_LinkageError;
class Java_lang_AbstractMethodError extends Java_lang_IncompatibleClassChangeError;
class Java_lang_Appendable;
class Java_lang_Exception extends Java_lang_Throwable;
class Java_lang_RuntimeException extends Java_lang_Exception;
class Java_lang_ArithmeticException extends Java_lang_RuntimeException;
class Java_lang_IndexOutOfBoundsException extends Java_lang_RuntimeException;
class Java_lang_ArrayIndexOutOfBoundsException extends Java_lang_IndexOutOfBoundsException;
class Java_lang_ArrayStoreException extends Java_lang_RuntimeException;
class Java_lang_AssertionError extends Java_lang_Error;
class Java_lang_AutoCloseable;
class Java_lang_Boolean extends Java_io_Serializable;
class Java_lang_BootstrapMethodError extends Java_lang_LinkageError;
class Java_lang_Number extends Java_io_Serializable;
class Java_lang_Byte extends Java_lang_Number;
class Java_lang_CharSequence;
class Java_lang_Character extends Java_io_Serializable;
class Java_lang_Class extends Java_io_Serializable;
class Java_lang_ClassCastException extends Java_lang_RuntimeException;
class Java_lang_ClassCircularityError extends Java_lang_LinkageError;
class Java_lang_ClassFormatError extends Java_lang_LinkageError;
class Java_lang_ClassLoader;
class Java_lang_ReflectiveOperationException extends Java_lang_Exception;
class Java_lang_ClassNotFoundException extends Java_lang_ReflectiveOperationException;
class Java_lang_ClassValue;
class Java_lang_CloneNotSupportedException extends Java_lang_Exception;
class Java_lang_Cloneable;
class Java_lang_Comparable;
class Java_lang_Compiler;
class Java_lang_Deprecated extends Java_lang_annotation_Annotation;
class Java_lang_Double extends Java_lang_Number;
class Java_lang_Enum extends Java_lang_Comparable;
class Java_lang_EnumConstantNotPresentException extends Java_lang_RuntimeException;
class Java_lang_ExceptionInInitializerError extends Java_lang_LinkageError;
class Java_lang_Float extends Java_lang_Number;
class Java_lang_IllegalAccessError extends Java_lang_IncompatibleClassChangeError;
class Java_lang_IllegalAccessException extends Java_lang_ReflectiveOperationException;
class Java_lang_IllegalArgumentException extends Java_lang_RuntimeException;
class Java_lang_IllegalMonitorStateException extends Java_lang_RuntimeException;
class Java_lang_IllegalStateException extends Java_lang_RuntimeException;
class Java_lang_IllegalThreadStateException extends Java_lang_IllegalArgumentException;
class Java_lang_ThreadLocal;
class Java_lang_InheritableThreadLocal extends Java_lang_ThreadLocal;
class Java_lang_InstantiationError extends Java_lang_IncompatibleClassChangeError;
class Java_lang_InstantiationException extends Java_lang_ReflectiveOperationException;
class Java_lang_Integer extends Java_lang_Number;
class Java_lang_VirtualMachineError extends Java_lang_Error;
class Java_lang_InternalError extends Java_lang_VirtualMachineError;
class Java_lang_InterruptedException extends Java_lang_Exception;
class Java_lang_Iterable;
class Java_lang_Long extends Java_lang_Number;
class Java_lang_Math;
class Java_lang_NegativeArraySizeException extends Java_lang_RuntimeException;
class Java_lang_NoClassDefFoundError extends Java_lang_LinkageError;
class Java_lang_NoSuchFieldError extends Java_lang_IncompatibleClassChangeError;
class Java_lang_NoSuchFieldException extends Java_lang_ReflectiveOperationException;
class Java_lang_NoSuchMethodError extends Java_lang_IncompatibleClassChangeError;
class Java_lang_NoSuchMethodException extends Java_lang_ReflectiveOperationException;
class Java_lang_NullPointerException extends Java_lang_RuntimeException;
class Java_lang_NumberFormatException extends Java_lang_IllegalArgumentException;
class Java_lang_Object;
class Java_lang_OutOfMemoryError extends Java_lang_VirtualMachineError;
class Java_lang_Override extends Java_lang_annotation_Annotation;
class Java_lang_Package extends Java_lang_reflect_AnnotatedElement;
class Java_lang_Process;
class Java_lang_ProcessBuilder;
class Java_lang_Readable;
class Java_lang_Runnable;
class Java_lang_Runtime;
class Java_lang_RuntimePermission extends Java_security_BasicPermission;
class Java_lang_SafeVarargs extends Java_lang_annotation_Annotation;
class Java_lang_SecurityException extends Java_lang_RuntimeException;
class Java_lang_SecurityManager;
class Java_lang_Short extends Java_lang_Number;
class Java_lang_StackOverflowError extends Java_lang_VirtualMachineError;
class Java_lang_StackTraceElement extends Java_io_Serializable;
class Java_lang_StrictMath;
class Java_lang_String extends Java_io_Serializable;
class Java_lang_StringBuffer extends Java_io_Serializable;
class Java_lang_StringBuilder extends Java_io_Serializable;
class Java_lang_StringIndexOutOfBoundsException extends Java_lang_IndexOutOfBoundsException;
class Java_lang_SuppressWarnings extends Java_lang_annotation_Annotation;
class Java_lang_System;
class Java_lang_Thread extends Java_lang_Runnable;
class Java_lang_ThreadDeath extends Java_lang_Error;
class Java_lang_ThreadGroup;
class Java_lang_TypeNotPresentException extends Java_lang_RuntimeException;
class Java_lang_UnknownError extends Java_lang_VirtualMachineError;
class Java_lang_UnsatisfiedLinkError extends Java_lang_LinkageError;
class Java_lang_UnsupportedClassVersionError extends Java_lang_ClassFormatError;
class Java_lang_UnsupportedOperationException extends Java_lang_RuntimeException;
class Java_lang_VerifyError extends Java_lang_LinkageError;
class Java_lang_Void;

/*------------------------------------------------------------*/
/* class java.lang.Throwable */
class Java_lang_Throwable extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_lang_StackTraceElement[] getStackTrace();
	@Virtual @Overload Java_lang_Throwable fillInStackTrace();
	@Virtual @Overload Java_lang_Throwable getCause();
	@Virtual @Overload Java_lang_Throwable initCause(Java_lang_Throwable p0);
	@Virtual @Overload Java_lang_Throwable[] getSuppressed();
	@Virtual @Overload String getLocalizedMessage();
	@Virtual @Overload String getMessage();
	@Virtual @Overload String toString();
	@Virtual @Overload void addSuppressed(Java_lang_Throwable p0);
	@Virtual @Overload void printStackTrace();
	@Virtual @Overload void printStackTrace(Java_io_PrintStream p0);
	@Virtual @Overload void printStackTrace(Java_io_PrintWriter p0);
	@Virtual @Overload void setStackTrace(Java_lang_StackTraceElement[] p0);
}
@Overload Java_lang_Throwable Java_lang_Throwable.new();
@Overload Java_lang_Throwable Java_lang_Throwable.new(String p0);
@Overload Java_lang_Throwable Java_lang_Throwable.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_Throwable Java_lang_Throwable.new(Java_lang_Throwable p0);

/* class java.lang.Error */
class Java_lang_Error extends Java_lang_Throwable {
}
@Overload Java_lang_Error Java_lang_Error.new();
@Overload Java_lang_Error Java_lang_Error.new(String p0);
@Overload Java_lang_Error Java_lang_Error.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_Error Java_lang_Error.new(Java_lang_Throwable p0);

/* class java.lang.LinkageError */
class Java_lang_LinkageError extends Java_lang_Error {
}
@Overload Java_lang_LinkageError Java_lang_LinkageError.new();
@Overload Java_lang_LinkageError Java_lang_LinkageError.new(String p0);
@Overload Java_lang_LinkageError Java_lang_LinkageError.new(String p0, Java_lang_Throwable p1);

/* class java.lang.IncompatibleClassChangeError */
class Java_lang_IncompatibleClassChangeError extends Java_lang_LinkageError {
}
@Overload Java_lang_IncompatibleClassChangeError Java_lang_IncompatibleClassChangeError.new();
@Overload Java_lang_IncompatibleClassChangeError Java_lang_IncompatibleClassChangeError.new(String p0);

/* class java.lang.AbstractMethodError */
class Java_lang_AbstractMethodError extends Java_lang_IncompatibleClassChangeError {
}
@Overload Java_lang_AbstractMethodError Java_lang_AbstractMethodError.new();
@Overload Java_lang_AbstractMethodError Java_lang_AbstractMethodError.new(String p0);

/* interface java.lang.Appendable */
class Java_lang_Appendable {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(int p0);
}

/* class java.lang.Exception */
class Java_lang_Exception extends Java_lang_Throwable {
}
@Overload Java_lang_Exception Java_lang_Exception.new();
@Overload Java_lang_Exception Java_lang_Exception.new(String p0);
@Overload Java_lang_Exception Java_lang_Exception.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_Exception Java_lang_Exception.new(Java_lang_Throwable p0);

/* class java.lang.RuntimeException */
class Java_lang_RuntimeException extends Java_lang_Exception {
}
@Overload Java_lang_RuntimeException Java_lang_RuntimeException.new();
@Overload Java_lang_RuntimeException Java_lang_RuntimeException.new(String p0);
@Overload Java_lang_RuntimeException Java_lang_RuntimeException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_RuntimeException Java_lang_RuntimeException.new(Java_lang_Throwable p0);

/* class java.lang.ArithmeticException */
class Java_lang_ArithmeticException extends Java_lang_RuntimeException {
}
@Overload Java_lang_ArithmeticException Java_lang_ArithmeticException.new();
@Overload Java_lang_ArithmeticException Java_lang_ArithmeticException.new(String p0);

/* class java.lang.IndexOutOfBoundsException */
class Java_lang_IndexOutOfBoundsException extends Java_lang_RuntimeException {
}
@Overload Java_lang_IndexOutOfBoundsException Java_lang_IndexOutOfBoundsException.new();
@Overload Java_lang_IndexOutOfBoundsException Java_lang_IndexOutOfBoundsException.new(String p0);

/* class java.lang.ArrayIndexOutOfBoundsException */
class Java_lang_ArrayIndexOutOfBoundsException extends Java_lang_IndexOutOfBoundsException {
}
@Overload Java_lang_ArrayIndexOutOfBoundsException Java_lang_ArrayIndexOutOfBoundsException.new();
@Overload Java_lang_ArrayIndexOutOfBoundsException Java_lang_ArrayIndexOutOfBoundsException.new(int p0);
@Overload Java_lang_ArrayIndexOutOfBoundsException Java_lang_ArrayIndexOutOfBoundsException.new(String p0);

/* class java.lang.ArrayStoreException */
class Java_lang_ArrayStoreException extends Java_lang_RuntimeException {
}
@Overload Java_lang_ArrayStoreException Java_lang_ArrayStoreException.new();
@Overload Java_lang_ArrayStoreException Java_lang_ArrayStoreException.new(String p0);

/* class java.lang.AssertionError */
class Java_lang_AssertionError extends Java_lang_Error {
}
@Overload Java_lang_AssertionError Java_lang_AssertionError.new();
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(Object p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(boolean p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(int p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(int p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(int p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(float p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(float p0);
@Overload Java_lang_AssertionError Java_lang_AssertionError.new(String p0, Java_lang_Throwable p1);

/* interface java.lang.AutoCloseable */
class Java_lang_AutoCloseable {
	/*-- Method --*/
	@Virtual @Overload void close();
}

/* class java.lang.Boolean */
class Java_lang_Boolean extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_lang_Boolean valueOf(String p0);
	@Static @Overload Java_lang_Boolean valueOf(boolean p0);
	@Static @Overload String toString(boolean p0);
	@Static @Overload boolean getBoolean(String p0);
	@Static @Overload boolean parseBoolean(String p0);
	@Static @Overload int compare(boolean p0, boolean p1);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean booleanValue();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int compareTo(Java_lang_Boolean p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Boolean Java_lang_Boolean.new(boolean p0);
@Overload Java_lang_Boolean Java_lang_Boolean.new(String p0);

/* class java.lang.BootstrapMethodError */
class Java_lang_BootstrapMethodError extends Java_lang_LinkageError {
}
@Overload Java_lang_BootstrapMethodError Java_lang_BootstrapMethodError.new();
@Overload Java_lang_BootstrapMethodError Java_lang_BootstrapMethodError.new(String p0);
@Overload Java_lang_BootstrapMethodError Java_lang_BootstrapMethodError.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_BootstrapMethodError Java_lang_BootstrapMethodError.new(Java_lang_Throwable p0);

/* class java.lang.Number */
class Java_lang_Number extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload float doubleValue();
	@Virtual @Overload float floatValue();
	@Virtual @Overload int byteValue();
	@Virtual @Overload int intValue();
	@Virtual @Overload int longValue();
	@Virtual @Overload int shortValue();
}
Java_lang_Number Java_lang_Number.new();

/* class java.lang.Byte */
class Java_lang_Byte extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Byte decode(String p0);
	@Static @Overload Java_lang_Byte valueOf(String p0);
	@Static @Overload Java_lang_Byte valueOf(String p0, int p1);
	@Static @Overload Java_lang_Byte valueOf(int p0);
	@Static @Overload String toString(int p0);
	@Static @Overload int compare(int p0, int p1);
	@Static @Overload int parseByte(String p0);
	@Static @Overload int parseByte(String p0, int p1);
	@Virtual @Overload int compareTo(Java_lang_Byte p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Byte Java_lang_Byte.new(int p0);
@Overload Java_lang_Byte Java_lang_Byte.new(String p0);

/* interface java.lang.CharSequence */
class Java_lang_CharSequence {
	/*-- Method --*/
	@Virtual @Overload Java_lang_CharSequence subSequence(int p0, int p1);
	@Virtual @Overload String toString();
	@Virtual @Overload int charAt(int p0);
	@Virtual @Overload int length();
}

/* class java.lang.Character */
class Java_lang_Character extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_lang_Character valueOf(int p0);
	@Static @Overload String getName(int p0);
	@Static @Overload String toString(int p0);
	@Static @Overload boolean isAlphabetic(int p0);
	@Static @Overload boolean isBmpCodePoint(int p0);
	@Static @Overload boolean isDefined(int p0);
	@Static @Overload boolean isDigit(int p0);
	@Static @Overload boolean isHighSurrogate(int p0);
	@Static @Overload boolean isISOControl(int p0);
	@Static @Overload boolean isIdentifierIgnorable(int p0);
	@Static @Overload boolean isIdeographic(int p0);
	@Static @Overload boolean isJavaIdentifierPart(int p0);
	@Static @Overload boolean isJavaIdentifierStart(int p0);
	@Static @Overload boolean isLetter(int p0);
	@Static @Overload boolean isLetterOrDigit(int p0);
	@Static @Overload boolean isLowSurrogate(int p0);
	@Static @Overload boolean isLowerCase(int p0);
	@Static @Overload boolean isMirrored(int p0);
	@Static @Overload boolean isSpaceChar(int p0);
	@Static @Overload boolean isSupplementaryCodePoint(int p0);
	@Static @Overload boolean isSurrogate(int p0);
	@Static @Overload boolean isSurrogatePair(int p0, int p1);
	@Static @Overload boolean isTitleCase(int p0);
	@Static @Overload boolean isUnicodeIdentifierPart(int p0);
	@Static @Overload boolean isUnicodeIdentifierStart(int p0);
	@Static @Overload boolean isUpperCase(int p0);
	@Static @Overload boolean isValidCodePoint(int p0);
	@Static @Overload boolean isWhitespace(int p0);
	@Static @Overload int charCount(int p0);
	@Static @Overload int codePointAt(Java_lang_CharSequence p0, int p1);
	@Static @Overload int codePointAt(int[] p0, int p1);
	@Static @Overload int codePointAt(int[] p0, int p1, int p2);
	@Static @Overload int codePointBefore(Java_lang_CharSequence p0, int p1);
	@Static @Overload int codePointBefore(int[] p0, int p1);
	@Static @Overload int codePointBefore(int[] p0, int p1, int p2);
	@Static @Overload int codePointCount(Java_lang_CharSequence p0, int p1, int p2);
	@Static @Overload int codePointCount(int[] p0, int p1, int p2);
	@Static @Overload int compare(int p0, int p1);
	@Static @Overload int digit(int p0, int p1);
	@Static @Overload int forDigit(int p0, int p1);
	@Static @Overload int getDirectionality(int p0);
	@Static @Overload int getNumericValue(int p0);
	@Static @Overload int getType(int p0);
	@Static @Overload int highSurrogate(int p0);
	@Static @Overload int lowSurrogate(int p0);
	@Static @Overload int offsetByCodePoints(Java_lang_CharSequence p0, int p1, int p2);
	@Static @Overload int offsetByCodePoints(int[] p0, int p1, int p2, int p3, int p4);
	@Static @Overload int reverseBytes(int p0);
	@Static @Overload int toChars(int p0, int[] p1, int p2);
	@Static @Overload int toCodePoint(int p0, int p1);
	@Static @Overload int toLowerCase(int p0);
	@Static @Overload int toTitleCase(int p0);
	@Static @Overload int toUpperCase(int p0);
	@Static @Overload int[] toChars(int p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int charValue();
	@Virtual @Overload int compareTo(Java_lang_Character p0);
	@Virtual @Overload int compareTo(Object p0);
}
Java_lang_Character Java_lang_Character.new(int p0);

/* class java.lang.Class */
class Java_lang_Class extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Class forName(String p0);
	@Static @Overload Class forName(String p0, boolean p1, Java_lang_ClassLoader p2);
	@Virtual @Overload Class asSubclass(Class p0);
	@Virtual @Overload Class getComponentType();
	@Virtual @Overload Class getDeclaringClass();
	@Virtual @Overload Class getEnclosingClass();
	@Virtual @Overload Class getSuperclass();
	@Virtual @Overload Class[] getClasses();
	@Virtual @Overload Class[] getDeclaredClasses();
	@Virtual @Overload Class[] getInterfaces();
	@Virtual @Overload Java_io_InputStream getResourceAsStream(String p0);
	@Virtual @Overload Java_lang_ClassLoader getClassLoader();
	@Virtual @Overload Java_lang_Package getPackage();
	@Virtual @Overload Java_lang_annotation_Annotation getAnnotation(Class p0);
	@Virtual @Overload Java_lang_annotation_Annotation[] getAnnotations();
	@Virtual @Overload Java_lang_annotation_Annotation[] getDeclaredAnnotations();
	@Virtual @Overload Java_lang_reflect_Constructor getConstructor(Class[] p0);
	@Virtual @Overload Java_lang_reflect_Constructor getDeclaredConstructor(Class[] p0);
	@Virtual @Overload Java_lang_reflect_Constructor getEnclosingConstructor();
	@Virtual @Overload Java_lang_reflect_Constructor[] getConstructors();
	@Virtual @Overload Java_lang_reflect_Constructor[] getDeclaredConstructors();
	@Virtual @Overload Java_lang_reflect_Field getDeclaredField(String p0);
	@Virtual @Overload Java_lang_reflect_Field getField(String p0);
	@Virtual @Overload Java_lang_reflect_Field[] getDeclaredFields();
	@Virtual @Overload Java_lang_reflect_Field[] getFields();
	@Virtual @Overload Java_lang_reflect_Method getDeclaredMethod(String p0, Class[] p1);
	@Virtual @Overload Java_lang_reflect_Method getEnclosingMethod();
	@Virtual @Overload Java_lang_reflect_Method getMethod(String p0, Class[] p1);
	@Virtual @Overload Java_lang_reflect_Method[] getDeclaredMethods();
	@Virtual @Overload Java_lang_reflect_Type getGenericSuperclass();
	@Virtual @Overload Java_lang_reflect_TypeVariable[] getTypeParameters();
	@Virtual @Overload Java_lang_reflect_Type[] getGenericInterfaces();
	@Virtual @Overload Java_net_URL getResource(String p0);
	@Virtual @Overload Java_security_ProtectionDomain getProtectionDomain();
	@Virtual @Overload Object newInstance();
	@Virtual @Overload Object[] getEnumConstants();
	@Virtual @Overload Object[] getSigners();
	@Virtual @Overload String getCanonicalName();
	@Virtual @Overload String getName();
	@Virtual @Overload String getSimpleName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean desiredAssertionStatus();
	@Virtual @Overload boolean isAnnotation();
	@Virtual @Overload boolean isAnnotationPresent(Class p0);
	@Virtual @Overload boolean isAnonymousClass();
	@Virtual @Overload boolean isArray();
	@Virtual @Overload boolean isAssignableFrom(Class p0);
	@Virtual @Overload boolean isEnum();
	@Virtual @Overload boolean isInstance(Object p0);
	@Virtual @Overload boolean isInterface();
	@Virtual @Overload boolean isLocalClass();
	@Virtual @Overload boolean isMemberClass();
	@Virtual @Overload boolean isPrimitive();
	@Virtual @Overload boolean isSynthetic();
	@Virtual @Overload int getModifiers();
}

/* class java.lang.ClassCastException */
class Java_lang_ClassCastException extends Java_lang_RuntimeException {
}
@Overload Java_lang_ClassCastException Java_lang_ClassCastException.new();
@Overload Java_lang_ClassCastException Java_lang_ClassCastException.new(String p0);

/* class java.lang.ClassCircularityError */
class Java_lang_ClassCircularityError extends Java_lang_LinkageError {
}
@Overload Java_lang_ClassCircularityError Java_lang_ClassCircularityError.new();
@Overload Java_lang_ClassCircularityError Java_lang_ClassCircularityError.new(String p0);

/* class java.lang.ClassFormatError */
class Java_lang_ClassFormatError extends Java_lang_LinkageError {
}
@Overload Java_lang_ClassFormatError Java_lang_ClassFormatError.new();
@Overload Java_lang_ClassFormatError Java_lang_ClassFormatError.new(String p0);

/* class java.lang.ClassLoader */
class Java_lang_ClassLoader {
	/*-- Method --*/
	@Static @Overload Java_io_InputStream getSystemResourceAsStream(String p0);
	@Static @Overload Java_lang_ClassLoader getSystemClassLoader();
	@Static @Overload Java_net_URL getSystemResource(String p0);
	@Static @Overload Java_util_Enumeration getSystemResources(String p0);
	@Virtual @Overload Class loadClass(String p0);
	@Virtual @Overload Java_io_InputStream getResourceAsStream(String p0);
	@Virtual @Overload Java_lang_ClassLoader getParent();
	@Virtual @Overload Java_net_URL getResource(String p0);
	@Virtual @Overload Java_util_Enumeration getResources(String p0);
	@Virtual @Overload void clearAssertionStatus();
	@Virtual @Overload void setClassAssertionStatus(String p0, boolean p1);
	@Virtual @Overload void setDefaultAssertionStatus(boolean p0);
	@Virtual @Overload void setPackageAssertionStatus(String p0, boolean p1);
}

/* class java.lang.ReflectiveOperationException */
class Java_lang_ReflectiveOperationException extends Java_lang_Exception {
}
@Overload Java_lang_ReflectiveOperationException Java_lang_ReflectiveOperationException.new();
@Overload Java_lang_ReflectiveOperationException Java_lang_ReflectiveOperationException.new(String p0);
@Overload Java_lang_ReflectiveOperationException Java_lang_ReflectiveOperationException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_ReflectiveOperationException Java_lang_ReflectiveOperationException.new(Java_lang_Throwable p0);

/* class java.lang.ClassNotFoundException */
class Java_lang_ClassNotFoundException extends Java_lang_ReflectiveOperationException {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Throwable getException();
}
@Overload Java_lang_ClassNotFoundException Java_lang_ClassNotFoundException.new();
@Overload Java_lang_ClassNotFoundException Java_lang_ClassNotFoundException.new(String p0);
@Overload Java_lang_ClassNotFoundException Java_lang_ClassNotFoundException.new(String p0, Java_lang_Throwable p1);

/* class java.lang.ClassValue */
class Java_lang_ClassValue {
	/*-- Method --*/
	@Virtual @Overload Object get(Class p0);
	@Virtual @Overload void remove(Class p0);
}

/* class java.lang.CloneNotSupportedException */
class Java_lang_CloneNotSupportedException extends Java_lang_Exception {
}
@Overload Java_lang_CloneNotSupportedException Java_lang_CloneNotSupportedException.new();
@Overload Java_lang_CloneNotSupportedException Java_lang_CloneNotSupportedException.new(String p0);

/* interface java.lang.Cloneable */
class Java_lang_Cloneable {
}

/* interface java.lang.Comparable */
class Java_lang_Comparable {
	/*-- Method --*/
	@Virtual @Overload int compareTo(Object p0);
}

/* class java.lang.Compiler */
class Java_lang_Compiler {
	/*-- Method --*/
	@Static @Overload Object command(Object p0);
	@Static @Overload boolean compileClass(Class p0);
	@Static @Overload boolean compileClasses(String p0);
	@Static @Overload void disable();
	@Static @Overload void enable();
}

/* interface java.lang.Deprecated */
class Java_lang_Deprecated extends Java_lang_annotation_Annotation {
}

/* class java.lang.Double */
class Java_lang_Double extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Double valueOf(String p0);
	@Static @Overload Java_lang_Double valueOf(float p0);
	@Static @Overload String toHexString(float p0);
	@Static @Overload String toString(float p0);
	@Static @Overload boolean isInfinite(float p0);
	@Static @Overload boolean isNaN(float p0);
	@Static @Overload float longBitsToDouble(int p0);
	@Static @Overload float parseDouble(String p0);
	@Static @Overload int compare(float p0, float p1);
	@Static @Overload int doubleToLongBits(float p0);
	@Static @Overload int doubleToRawLongBits(float p0);
	@Virtual @Overload boolean isInfinite();
	@Virtual @Overload boolean isNaN();
	@Virtual @Overload int compareTo(Java_lang_Double p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Double Java_lang_Double.new(float p0);
@Overload Java_lang_Double Java_lang_Double.new(String p0);

/* class java.lang.Enum */
class Java_lang_Enum extends Java_lang_Comparable {
	/*-- Method --*/
	@Static @Overload Java_lang_Enum valueOf(Class p0, String p1);
	@Virtual @Overload Class getDeclaringClass();
	@Virtual @Overload String name();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int compareTo(Java_lang_Enum p0);
	@Virtual @Overload int ordinal();
}

/* class java.lang.EnumConstantNotPresentException */
class Java_lang_EnumConstantNotPresentException extends Java_lang_RuntimeException {
	/*-- Method --*/
	@Virtual @Overload Class enumType();
	@Virtual @Overload String constantName();
}
Java_lang_EnumConstantNotPresentException Java_lang_EnumConstantNotPresentException.new(Class p0, String p1);

/* class java.lang.ExceptionInInitializerError */
class Java_lang_ExceptionInInitializerError extends Java_lang_LinkageError {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Throwable getException();
}
@Overload Java_lang_ExceptionInInitializerError Java_lang_ExceptionInInitializerError.new();
@Overload Java_lang_ExceptionInInitializerError Java_lang_ExceptionInInitializerError.new(Java_lang_Throwable p0);
@Overload Java_lang_ExceptionInInitializerError Java_lang_ExceptionInInitializerError.new(String p0);

/* class java.lang.Float */
class Java_lang_Float extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Float valueOf(String p0);
	@Static @Overload Java_lang_Float valueOf(float p0);
	@Static @Overload String toHexString(float p0);
	@Static @Overload String toString(float p0);
	@Static @Overload boolean isInfinite(float p0);
	@Static @Overload boolean isNaN(float p0);
	@Static @Overload float intBitsToFloat(int p0);
	@Static @Overload float parseFloat(String p0);
	@Static @Overload int compare(float p0, float p1);
	@Static @Overload int floatToIntBits(float p0);
	@Static @Overload int floatToRawIntBits(float p0);
	@Virtual @Overload boolean isInfinite();
	@Virtual @Overload boolean isNaN();
	@Virtual @Overload int compareTo(Java_lang_Float p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Float Java_lang_Float.new(float p0);
@Overload Java_lang_Float Java_lang_Float.new(float p0);
@Overload Java_lang_Float Java_lang_Float.new(String p0);

/* class java.lang.IllegalAccessError */
class Java_lang_IllegalAccessError extends Java_lang_IncompatibleClassChangeError {
}
@Overload Java_lang_IllegalAccessError Java_lang_IllegalAccessError.new();
@Overload Java_lang_IllegalAccessError Java_lang_IllegalAccessError.new(String p0);

/* class java.lang.IllegalAccessException */
class Java_lang_IllegalAccessException extends Java_lang_ReflectiveOperationException {
}
@Overload Java_lang_IllegalAccessException Java_lang_IllegalAccessException.new();
@Overload Java_lang_IllegalAccessException Java_lang_IllegalAccessException.new(String p0);

/* class java.lang.IllegalArgumentException */
class Java_lang_IllegalArgumentException extends Java_lang_RuntimeException {
}
@Overload Java_lang_IllegalArgumentException Java_lang_IllegalArgumentException.new();
@Overload Java_lang_IllegalArgumentException Java_lang_IllegalArgumentException.new(String p0);
@Overload Java_lang_IllegalArgumentException Java_lang_IllegalArgumentException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_IllegalArgumentException Java_lang_IllegalArgumentException.new(Java_lang_Throwable p0);

/* class java.lang.IllegalMonitorStateException */
class Java_lang_IllegalMonitorStateException extends Java_lang_RuntimeException {
}
@Overload Java_lang_IllegalMonitorStateException Java_lang_IllegalMonitorStateException.new();
@Overload Java_lang_IllegalMonitorStateException Java_lang_IllegalMonitorStateException.new(String p0);

/* class java.lang.IllegalStateException */
class Java_lang_IllegalStateException extends Java_lang_RuntimeException {
}
@Overload Java_lang_IllegalStateException Java_lang_IllegalStateException.new();
@Overload Java_lang_IllegalStateException Java_lang_IllegalStateException.new(String p0);
@Overload Java_lang_IllegalStateException Java_lang_IllegalStateException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_IllegalStateException Java_lang_IllegalStateException.new(Java_lang_Throwable p0);

/* class java.lang.IllegalThreadStateException */
class Java_lang_IllegalThreadStateException extends Java_lang_IllegalArgumentException {
}
@Overload Java_lang_IllegalThreadStateException Java_lang_IllegalThreadStateException.new();
@Overload Java_lang_IllegalThreadStateException Java_lang_IllegalThreadStateException.new(String p0);

/* class java.lang.ThreadLocal */
class Java_lang_ThreadLocal {
	/*-- Method --*/
	@Virtual @Overload Object get();
	@Virtual @Overload void remove();
	@Virtual @Overload void set(Object p0);
}
Java_lang_ThreadLocal Java_lang_ThreadLocal.new();

/* class java.lang.InheritableThreadLocal */
class Java_lang_InheritableThreadLocal extends Java_lang_ThreadLocal {
}
Java_lang_InheritableThreadLocal Java_lang_InheritableThreadLocal.new();

/* class java.lang.InstantiationError */
class Java_lang_InstantiationError extends Java_lang_IncompatibleClassChangeError {
}
@Overload Java_lang_InstantiationError Java_lang_InstantiationError.new();
@Overload Java_lang_InstantiationError Java_lang_InstantiationError.new(String p0);

/* class java.lang.InstantiationException */
class Java_lang_InstantiationException extends Java_lang_ReflectiveOperationException {
}
@Overload Java_lang_InstantiationException Java_lang_InstantiationException.new();
@Overload Java_lang_InstantiationException Java_lang_InstantiationException.new(String p0);

/* class java.lang.Integer */
class Java_lang_Integer extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Integer decode(String p0);
	@Static @Overload Java_lang_Integer getInteger(String p0);
	@Static @Overload Java_lang_Integer getInteger(String p0, Java_lang_Integer p1);
	@Static @Overload Java_lang_Integer getInteger(String p0, int p1);
	@Static @Overload Java_lang_Integer valueOf(String p0);
	@Static @Overload Java_lang_Integer valueOf(String p0, int p1);
	@Static @Overload Java_lang_Integer valueOf(int p0);
	@Static @Overload String toBinaryString(int p0);
	@Static @Overload String toHexString(int p0);
	@Static @Overload String toOctalString(int p0);
	@Static @Overload String toString(int p0);
	@Static @Overload String toString(int p0, int p1);
	@Static @Overload int bitCount(int p0);
	@Static @Overload int compare(int p0, int p1);
	@Static @Overload int highestOneBit(int p0);
	@Static @Overload int lowestOneBit(int p0);
	@Static @Overload int numberOfLeadingZeros(int p0);
	@Static @Overload int numberOfTrailingZeros(int p0);
	@Static @Overload int parseInt(String p0);
	@Static @Overload int parseInt(String p0, int p1);
	@Static @Overload int reverse(int p0);
	@Static @Overload int reverseBytes(int p0);
	@Static @Overload int rotateLeft(int p0, int p1);
	@Static @Overload int rotateRight(int p0, int p1);
	@Static @Overload int signum(int p0);
	@Virtual @Overload int compareTo(Java_lang_Integer p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Integer Java_lang_Integer.new(int p0);
@Overload Java_lang_Integer Java_lang_Integer.new(String p0);

/* class java.lang.VirtualMachineError */
class Java_lang_VirtualMachineError extends Java_lang_Error {
}
@Overload Java_lang_VirtualMachineError Java_lang_VirtualMachineError.new();
@Overload Java_lang_VirtualMachineError Java_lang_VirtualMachineError.new(String p0);

/* class java.lang.InternalError */
class Java_lang_InternalError extends Java_lang_VirtualMachineError {
}
@Overload Java_lang_InternalError Java_lang_InternalError.new();
@Overload Java_lang_InternalError Java_lang_InternalError.new(String p0);

/* class java.lang.InterruptedException */
class Java_lang_InterruptedException extends Java_lang_Exception {
}
@Overload Java_lang_InterruptedException Java_lang_InterruptedException.new();
@Overload Java_lang_InterruptedException Java_lang_InterruptedException.new(String p0);

/* interface java.lang.Iterable */
class Java_lang_Iterable {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator iterator();
}

/* class java.lang.Long */
class Java_lang_Long extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Long decode(String p0);
	@Static @Overload Java_lang_Long getLong(String p0);
	@Static @Overload Java_lang_Long getLong(String p0, Java_lang_Long p1);
	@Static @Overload Java_lang_Long getLong(String p0, int p1);
	@Static @Overload Java_lang_Long valueOf(String p0);
	@Static @Overload Java_lang_Long valueOf(String p0, int p1);
	@Static @Overload Java_lang_Long valueOf(int p0);
	@Static @Overload String toBinaryString(int p0);
	@Static @Overload String toHexString(int p0);
	@Static @Overload String toOctalString(int p0);
	@Static @Overload String toString(int p0);
	@Static @Overload String toString(int p0, int p1);
	@Static @Overload int bitCount(int p0);
	@Static @Overload int compare(int p0, int p1);
	@Static @Overload int highestOneBit(int p0);
	@Static @Overload int lowestOneBit(int p0);
	@Static @Overload int numberOfLeadingZeros(int p0);
	@Static @Overload int numberOfTrailingZeros(int p0);
	@Static @Overload int parseLong(String p0);
	@Static @Overload int parseLong(String p0, int p1);
	@Static @Overload int reverse(int p0);
	@Static @Overload int reverseBytes(int p0);
	@Static @Overload int rotateLeft(int p0, int p1);
	@Static @Overload int rotateRight(int p0, int p1);
	@Static @Overload int signum(int p0);
	@Virtual @Overload int compareTo(Java_lang_Long p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Long Java_lang_Long.new(int p0);
@Overload Java_lang_Long Java_lang_Long.new(String p0);

/* class java.lang.Math */
class Java_lang_Math {
	/*-- Method --*/
	@Static @Overload float abs(float p0);
	@Static @Overload float acos(float p0);
	@Static @Overload float asin(float p0);
	@Static @Overload float atan(float p0);
	@Static @Overload float atan2(float p0, float p1);
	@Static @Overload float cbrt(float p0);
	@Static @Overload float ceil(float p0);
	@Static @Overload float copySign(float p0, float p1);
	@Static @Overload float cos(float p0);
	@Static @Overload float cosh(float p0);
	@Static @Overload float exp(float p0);
	@Static @Overload float expm1(float p0);
	@Static @Overload float floor(float p0);
	@Static @Overload float hypot(float p0, float p1);
	@Static @Overload float ieeeremainder(float p0, float p1);
	@Static @Overload float log(float p0);
	@Static @Overload float log10(float p0);
	@Static @Overload float log1p(float p0);
	@Static @Overload float max(float p0, float p1);
	@Static @Overload float min(float p0, float p1);
	@Static @Overload float nextAfter(float p0, float p1);
	@Static @Overload float nextUp(float p0);
	@Static @Overload float pow(float p0, float p1);
	@Static @Overload float random();
	@Static @Overload float rint(float p0);
	@Static @Overload float scalb(float p0, int p1);
	@Static @Overload float signum(float p0);
	@Static @Overload float sin(float p0);
	@Static @Overload float sinh(float p0);
	@Static @Overload float sqrt(float p0);
	@Static @Overload float tan(float p0);
	@Static @Overload float tanh(float p0);
	@Static @Overload float toDegrees(float p0);
	@Static @Overload float toRadians(float p0);
	@Static @Overload float ulp(float p0);
	@Static @Overload int abs(int p0);
	@Static @Overload int getExponent(float p0);
	@Static @Overload int max(int p0, int p1);
	@Static @Overload int min(int p0, int p1);
	@Static @Overload int round(float p0);
}

/* class java.lang.NegativeArraySizeException */
class Java_lang_NegativeArraySizeException extends Java_lang_RuntimeException {
}
@Overload Java_lang_NegativeArraySizeException Java_lang_NegativeArraySizeException.new();
@Overload Java_lang_NegativeArraySizeException Java_lang_NegativeArraySizeException.new(String p0);

/* class java.lang.NoClassDefFoundError */
class Java_lang_NoClassDefFoundError extends Java_lang_LinkageError {
}
@Overload Java_lang_NoClassDefFoundError Java_lang_NoClassDefFoundError.new();
@Overload Java_lang_NoClassDefFoundError Java_lang_NoClassDefFoundError.new(String p0);

/* class java.lang.NoSuchFieldError */
class Java_lang_NoSuchFieldError extends Java_lang_IncompatibleClassChangeError {
}
@Overload Java_lang_NoSuchFieldError Java_lang_NoSuchFieldError.new();
@Overload Java_lang_NoSuchFieldError Java_lang_NoSuchFieldError.new(String p0);

/* class java.lang.NoSuchFieldException */
class Java_lang_NoSuchFieldException extends Java_lang_ReflectiveOperationException {
}
@Overload Java_lang_NoSuchFieldException Java_lang_NoSuchFieldException.new();
@Overload Java_lang_NoSuchFieldException Java_lang_NoSuchFieldException.new(String p0);

/* class java.lang.NoSuchMethodError */
class Java_lang_NoSuchMethodError extends Java_lang_IncompatibleClassChangeError {
}
@Overload Java_lang_NoSuchMethodError Java_lang_NoSuchMethodError.new();
@Overload Java_lang_NoSuchMethodError Java_lang_NoSuchMethodError.new(String p0);

/* class java.lang.NoSuchMethodException */
class Java_lang_NoSuchMethodException extends Java_lang_ReflectiveOperationException {
}
@Overload Java_lang_NoSuchMethodException Java_lang_NoSuchMethodException.new();
@Overload Java_lang_NoSuchMethodException Java_lang_NoSuchMethodException.new(String p0);

/* class java.lang.NullPointerException */
class Java_lang_NullPointerException extends Java_lang_RuntimeException {
}
@Overload Java_lang_NullPointerException Java_lang_NullPointerException.new();
@Overload Java_lang_NullPointerException Java_lang_NullPointerException.new(String p0);

/* class java.lang.NumberFormatException */
class Java_lang_NumberFormatException extends Java_lang_IllegalArgumentException {
}
@Overload Java_lang_NumberFormatException Java_lang_NumberFormatException.new();
@Overload Java_lang_NumberFormatException Java_lang_NumberFormatException.new(String p0);

/* class java.lang.Object */
class Java_lang_Object {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload void notify();
	@Virtual @Overload void notifyAll();
	@Virtual @Overload void wait();
	@Virtual @Overload void wait(int p0);
	@Virtual @Overload void wait(int p0, int p1);
}
Java_lang_Object Java_lang_Object.new();

/* class java.lang.OutOfMemoryError */
class Java_lang_OutOfMemoryError extends Java_lang_VirtualMachineError {
}
@Overload Java_lang_OutOfMemoryError Java_lang_OutOfMemoryError.new();
@Overload Java_lang_OutOfMemoryError Java_lang_OutOfMemoryError.new(String p0);

/* interface java.lang.Override */
class Java_lang_Override extends Java_lang_annotation_Annotation {
}

/* class java.lang.Package */
class Java_lang_Package extends Java_lang_reflect_AnnotatedElement {
	/*-- Method --*/
	@Static @Overload Java_lang_Package getPackage(String p0);
	@Static @Overload Java_lang_Package[] getPackages();
	@Virtual @Overload String getImplementationTitle();
	@Virtual @Overload String getImplementationVendor();
	@Virtual @Overload String getImplementationVersion();
	@Virtual @Overload String getName();
	@Virtual @Overload String getSpecificationTitle();
	@Virtual @Overload String getSpecificationVendor();
	@Virtual @Overload String getSpecificationVersion();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isCompatibleWith(String p0);
	@Virtual @Overload boolean isSealed();
	@Virtual @Overload boolean isSealed(Java_net_URL p0);
}

/* class java.lang.Process */
class Java_lang_Process {
	/*-- Method --*/
	@Virtual @Overload Java_io_InputStream getErrorStream();
	@Virtual @Overload Java_io_InputStream getInputStream();
	@Virtual @Overload Java_io_OutputStream getOutputStream();
	@Virtual @Overload int exitValue();
	@Virtual @Overload int waitFor();
	@Virtual @Overload void destroy();
}
Java_lang_Process Java_lang_Process.new();

/* class java.lang.ProcessBuilder */
class Java_lang_ProcessBuilder {
	/*-- Method --*/
	@Virtual @Overload Java_io_File directory();
	@Virtual @Overload Java_lang_Process start();
	@Virtual @Overload Java_lang_ProcessBuilder command(Java_util_List p0);
	@Virtual @Overload Java_lang_ProcessBuilder command(String[] p0);
	@Virtual @Overload Java_lang_ProcessBuilder directory(Java_io_File p0);
	@Virtual @Overload Java_lang_ProcessBuilder inheritIO();
	@Virtual @Overload Java_lang_ProcessBuilder redirectError(Java_io_File p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectError(Java_lang_ProcessBuilder_Redirect p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectErrorStream(boolean p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectInput(Java_io_File p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectInput(Java_lang_ProcessBuilder_Redirect p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectOutput(Java_io_File p0);
	@Virtual @Overload Java_lang_ProcessBuilder redirectOutput(Java_lang_ProcessBuilder_Redirect p0);
	@Virtual @Overload Java_lang_ProcessBuilder_Redirect redirectError();
	@Virtual @Overload Java_lang_ProcessBuilder_Redirect redirectInput();
	@Virtual @Overload Java_lang_ProcessBuilder_Redirect redirectOutput();
	@Virtual @Overload Java_util_List command();
	@Virtual @Overload Java_util_Map environment();
	@Virtual @Overload boolean redirectErrorStream();
}
@Overload Java_lang_ProcessBuilder Java_lang_ProcessBuilder.new(Java_util_List p0);
@Overload Java_lang_ProcessBuilder Java_lang_ProcessBuilder.new(String[] p0);

/* interface java.lang.Readable */
class Java_lang_Readable {
	/*-- Method --*/
	@Virtual @Overload int read(Java_nio_CharBuffer p0);
}

/* interface java.lang.Runnable */
class Java_lang_Runnable {
	/*-- Method --*/
	@Virtual @Overload void run();
}

/* class java.lang.Runtime */
class Java_lang_Runtime {
	/*-- Method --*/
	@Static @Overload Java_lang_Runtime getRuntime();
	@Virtual @Overload Java_lang_Process exec(String p0);
	@Virtual @Overload Java_lang_Process exec(String p0, String[] p1);
	@Virtual @Overload Java_lang_Process exec(String p0, String[] p1, Java_io_File p2);
	@Virtual @Overload Java_lang_Process exec(String[] p0);
	@Virtual @Overload Java_lang_Process exec(String[] p0, String[] p1);
	@Virtual @Overload Java_lang_Process exec(String[] p0, String[] p1, Java_io_File p2);
	@Virtual @Overload boolean removeShutdownHook(Java_lang_Thread p0);
	@Virtual @Overload int availableProcessors();
	@Virtual @Overload int freeMemory();
	@Virtual @Overload int maxMemory();
	@Virtual @Overload int totalMemory();
	@Virtual @Overload void addShutdownHook(Java_lang_Thread p0);
	@Virtual @Overload void exit(int p0);
	@Virtual @Overload void gc();
	@Virtual @Overload void halt(int p0);
	@Virtual @Overload void load(String p0);
	@Virtual @Overload void loadLibrary(String p0);
	@Virtual @Overload void runFinalization();
	@Virtual @Overload void traceInstructions(boolean p0);
	@Virtual @Overload void traceMethodCalls(boolean p0);
}

/* class java.lang.RuntimePermission */
class Java_lang_RuntimePermission extends Java_security_BasicPermission {
}
@Overload Java_lang_RuntimePermission Java_lang_RuntimePermission.new(String p0);
@Overload Java_lang_RuntimePermission Java_lang_RuntimePermission.new(String p0, String p1);

/* interface java.lang.SafeVarargs */
class Java_lang_SafeVarargs extends Java_lang_annotation_Annotation {
}

/* class java.lang.SecurityException */
class Java_lang_SecurityException extends Java_lang_RuntimeException {
}
@Overload Java_lang_SecurityException Java_lang_SecurityException.new();
@Overload Java_lang_SecurityException Java_lang_SecurityException.new(String p0);
@Overload Java_lang_SecurityException Java_lang_SecurityException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_SecurityException Java_lang_SecurityException.new(Java_lang_Throwable p0);

/* class java.lang.SecurityManager */
class Java_lang_SecurityManager {
	/*-- Method --*/
	@Virtual @Overload Java_lang_ThreadGroup getThreadGroup();
	@Virtual @Overload Object getSecurityContext();
	@Virtual @Overload boolean checkTopLevelWindow(Object p0);
	@Virtual @Overload void checkAccept(String p0, int p1);
	@Virtual @Overload void checkAccess(Java_lang_Thread p0);
	@Virtual @Overload void checkAccess(Java_lang_ThreadGroup p0);
	@Virtual @Overload void checkAwtEventQueueAccess();
	@Virtual @Overload void checkConnect(String p0, int p1);
	@Virtual @Overload void checkConnect(String p0, int p1, Object p2);
	@Virtual @Overload void checkCreateClassLoader();
	@Virtual @Overload void checkDelete(String p0);
	@Virtual @Overload void checkExec(String p0);
	@Virtual @Overload void checkExit(int p0);
	@Virtual @Overload void checkLink(String p0);
	@Virtual @Overload void checkListen(int p0);
	@Virtual @Overload void checkMemberAccess(Class p0, int p1);
	@Virtual @Overload void checkMulticast(Java_net_InetAddress p0);
	@Virtual @Overload void checkPackageAccess(String p0);
	@Virtual @Overload void checkPackageDefinition(String p0);
	@Virtual @Overload void checkPermission(Java_security_Permission p0);
	@Virtual @Overload void checkPermission(Java_security_Permission p0, Object p1);
	@Virtual @Overload void checkPrintJobAccess();
	@Virtual @Overload void checkPropertiesAccess();
	@Virtual @Overload void checkPropertyAccess(String p0);
	@Virtual @Overload void checkRead(Java_io_FileDescriptor p0);
	@Virtual @Overload void checkRead(String p0);
	@Virtual @Overload void checkRead(String p0, Object p1);
	@Virtual @Overload void checkSecurityAccess(String p0);
	@Virtual @Overload void checkSetFactory();
	@Virtual @Overload void checkSystemClipboardAccess();
	@Virtual @Overload void checkWrite(Java_io_FileDescriptor p0);
	@Virtual @Overload void checkWrite(String p0);
}
Java_lang_SecurityManager Java_lang_SecurityManager.new();

/* class java.lang.Short */
class Java_lang_Short extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_lang_Short decode(String p0);
	@Static @Overload Java_lang_Short valueOf(String p0);
	@Static @Overload Java_lang_Short valueOf(String p0, int p1);
	@Static @Overload Java_lang_Short valueOf(int p0);
	@Static @Overload String toString(int p0);
	@Static @Overload int compare(int p0, int p1);
	@Static @Overload int parseShort(String p0);
	@Static @Overload int parseShort(String p0, int p1);
	@Static @Overload int reverseBytes(int p0);
	@Virtual @Overload int compareTo(Java_lang_Short p0);
	@Virtual @Overload int compareTo(Object p0);
}
@Overload Java_lang_Short Java_lang_Short.new(int p0);
@Overload Java_lang_Short Java_lang_Short.new(String p0);

/* class java.lang.StackOverflowError */
class Java_lang_StackOverflowError extends Java_lang_VirtualMachineError {
}
@Overload Java_lang_StackOverflowError Java_lang_StackOverflowError.new();
@Overload Java_lang_StackOverflowError Java_lang_StackOverflowError.new(String p0);

/* class java.lang.StackTraceElement */
class Java_lang_StackTraceElement extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String getClassName();
	@Virtual @Overload String getFileName();
	@Virtual @Overload String getMethodName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isNativeMethod();
	@Virtual @Overload int getLineNumber();
}
Java_lang_StackTraceElement Java_lang_StackTraceElement.new(String p0, String p1, String p2, int p3);

/* class java.lang.StrictMath */
class Java_lang_StrictMath {
	/*-- Method --*/
	@Static @Overload float abs(float p0);
	@Static @Overload float acos(float p0);
	@Static @Overload float asin(float p0);
	@Static @Overload float atan(float p0);
	@Static @Overload float atan2(float p0, float p1);
	@Static @Overload float cbrt(float p0);
	@Static @Overload float ceil(float p0);
	@Static @Overload float copySign(float p0, float p1);
	@Static @Overload float cos(float p0);
	@Static @Overload float cosh(float p0);
	@Static @Overload float exp(float p0);
	@Static @Overload float expm1(float p0);
	@Static @Overload float floor(float p0);
	@Static @Overload float hypot(float p0, float p1);
	@Static @Overload float ieeeremainder(float p0, float p1);
	@Static @Overload float log(float p0);
	@Static @Overload float log10(float p0);
	@Static @Overload float log1p(float p0);
	@Static @Overload float max(float p0, float p1);
	@Static @Overload float min(float p0, float p1);
	@Static @Overload float nextAfter(float p0, float p1);
	@Static @Overload float nextUp(float p0);
	@Static @Overload float pow(float p0, float p1);
	@Static @Overload float random();
	@Static @Overload float rint(float p0);
	@Static @Overload float scalb(float p0, int p1);
	@Static @Overload float signum(float p0);
	@Static @Overload float sin(float p0);
	@Static @Overload float sinh(float p0);
	@Static @Overload float sqrt(float p0);
	@Static @Overload float tan(float p0);
	@Static @Overload float tanh(float p0);
	@Static @Overload float toDegrees(float p0);
	@Static @Overload float toRadians(float p0);
	@Static @Overload float ulp(float p0);
	@Static @Overload int abs(int p0);
	@Static @Overload int getExponent(float p0);
	@Static @Overload int max(int p0, int p1);
	@Static @Overload int min(int p0, int p1);
	@Static @Overload int round(float p0);
}

/* class java.lang.String */
class Java_lang_String extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload String copyValueOf(int[] p0);
	@Static @Overload String copyValueOf(int[] p0, int p1, int p2);
	@Static @Overload String valueOf(Object p0);
	@Static @Overload String valueOf(boolean p0);
	@Static @Overload String valueOf(float p0);
	@Static @Overload String valueOf(int p0);
	@Static @Overload String valueOf(int[] p0);
	@Static @Overload String valueOf(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_CharSequence subSequence(int p0, int p1);
	@Virtual @Overload String concat(String p0);
	@Virtual @Overload String intern();
	@Virtual @Overload String replace(Java_lang_CharSequence p0, Java_lang_CharSequence p1);
	@Virtual @Overload String replace(int p0, int p1);
	@Virtual @Overload String replaceAll(String p0, String p1);
	@Virtual @Overload String replaceFirst(String p0, String p1);
	@Virtual @Overload String substring(int p0);
	@Virtual @Overload String substring(int p0, int p1);
	@Virtual @Overload String toLowerCase();
	@Virtual @Overload String toLowerCase(Java_util_Locale p0);
	@Virtual @Overload String toString();
	@Virtual @Overload String toUpperCase();
	@Virtual @Overload String toUpperCase(Java_util_Locale p0);
	@Virtual @Overload String trim();
	@Virtual @Overload String[] split(String p0);
	@Virtual @Overload String[] split(String p0, int p1);
	@Virtual @Overload boolean contains(Java_lang_CharSequence p0);
	@Virtual @Overload boolean contentEquals(Java_lang_CharSequence p0);
	@Virtual @Overload boolean contentEquals(Java_lang_StringBuffer p0);
	@Virtual @Overload boolean endsWith(String p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean equalsIgnoreCase(String p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload boolean matches(String p0);
	@Virtual @Overload boolean regionMatches(boolean p0, int p1, String p2, int p3, int p4);
	@Virtual @Overload boolean regionMatches(int p0, String p1, int p2, int p3);
	@Virtual @Overload boolean startsWith(String p0);
	@Virtual @Overload boolean startsWith(String p0, int p1);
	@Virtual @Overload int charAt(int p0);
	@Virtual @Overload int codePointAt(int p0);
	@Virtual @Overload int codePointBefore(int p0);
	@Virtual @Overload int codePointCount(int p0, int p1);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int compareTo(String p0);
	@Virtual @Overload int compareToIgnoreCase(String p0);
	@Virtual @Overload int indexOf(String p0);
	@Virtual @Overload int indexOf(String p0, int p1);
	@Virtual @Overload int indexOf(int p0);
	@Virtual @Overload int indexOf(int p0, int p1);
	@Virtual @Overload int lastIndexOf(String p0);
	@Virtual @Overload int lastIndexOf(String p0, int p1);
	@Virtual @Overload int lastIndexOf(int p0);
	@Virtual @Overload int lastIndexOf(int p0, int p1);
	@Virtual @Overload int length();
	@Virtual @Overload int offsetByCodePoints(int p0, int p1);
	@Virtual @Overload int[] getBytes();
	@Virtual @Overload int[] getBytes(Java_nio_charset_Charset p0);
	@Virtual @Overload int[] getBytes(String p0);
	@Virtual @Overload int[] toCharArray();
	@Virtual @Overload void getChars(int p0, int p1, int[] p2, int p3);
}
@Overload Java_lang_String Java_lang_String.new();
@Overload Java_lang_String Java_lang_String.new(String p0);
@Overload Java_lang_String Java_lang_String.new(int[] p0);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2, int p3);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2, String p3);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2, Java_nio_charset_Charset p3);
@Overload Java_lang_String Java_lang_String.new(int[] p0, String p1);
@Overload Java_lang_String Java_lang_String.new(int[] p0, Java_nio_charset_Charset p1);
@Overload Java_lang_String Java_lang_String.new(int[] p0, int p1, int p2);
@Overload Java_lang_String Java_lang_String.new(int[] p0);
@Overload Java_lang_String Java_lang_String.new(Java_lang_StringBuffer p0);
@Overload Java_lang_String Java_lang_String.new(Java_lang_StringBuilder p0);

/* class java.lang.StringBuffer */
class Java_lang_StringBuffer extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_StringBuffer p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Object p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(String p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(boolean p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(float p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int[] p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder appendCodePoint(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder delete(int p0, int p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder deleteCharAt(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Java_lang_CharSequence p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Java_lang_CharSequence p1, int p2, int p3);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Object p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, String p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, boolean p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, float p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int[] p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int[] p1, int p2, int p3);
	@Virtual @Overload Java_lang_AbstractStringBuilder replace(int p0, int p1, String p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder reverse();
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(int p0);
	@Virtual @Overload Java_lang_CharSequence subSequence(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuffer append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_StringBuffer append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_StringBuffer append(Java_lang_StringBuffer p0);
	@Virtual @Overload Java_lang_StringBuffer append(Object p0);
	@Virtual @Overload Java_lang_StringBuffer append(String p0);
	@Virtual @Overload Java_lang_StringBuffer append(boolean p0);
	@Virtual @Overload Java_lang_StringBuffer append(float p0);
	@Virtual @Overload Java_lang_StringBuffer append(int p0);
	@Virtual @Overload Java_lang_StringBuffer append(int[] p0);
	@Virtual @Overload Java_lang_StringBuffer append(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_StringBuffer appendCodePoint(int p0);
	@Virtual @Overload Java_lang_StringBuffer delete(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuffer deleteCharAt(int p0);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, Java_lang_CharSequence p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, Java_lang_CharSequence p1, int p2, int p3);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, Object p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, String p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, boolean p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, float p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, int[] p1);
	@Virtual @Overload Java_lang_StringBuffer insert(int p0, int[] p1, int p2, int p3);
	@Virtual @Overload Java_lang_StringBuffer replace(int p0, int p1, String p2);
	@Virtual @Overload Java_lang_StringBuffer reverse();
	@Virtual @Overload String substring(int p0);
	@Virtual @Overload String substring(int p0, int p1);
	@Virtual @Overload String toString();
	@Virtual @Overload int capacity();
	@Virtual @Overload int charAt(int p0);
	@Virtual @Overload int codePointAt(int p0);
	@Virtual @Overload int codePointBefore(int p0);
	@Virtual @Overload int codePointCount(int p0, int p1);
	@Virtual @Overload int indexOf(String p0);
	@Virtual @Overload int indexOf(String p0, int p1);
	@Virtual @Overload int lastIndexOf(String p0);
	@Virtual @Overload int lastIndexOf(String p0, int p1);
	@Virtual @Overload int length();
	@Virtual @Overload int offsetByCodePoints(int p0, int p1);
	@Virtual @Overload void ensureCapacity(int p0);
	@Virtual @Overload void getChars(int p0, int p1, int[] p2, int p3);
	@Virtual @Overload void setCharAt(int p0, int p1);
	@Virtual @Overload void setLength(int p0);
	@Virtual @Overload void trimToSize();
}
@Overload Java_lang_StringBuffer Java_lang_StringBuffer.new();
@Overload Java_lang_StringBuffer Java_lang_StringBuffer.new(int p0);
@Overload Java_lang_StringBuffer Java_lang_StringBuffer.new(String p0);
@Overload Java_lang_StringBuffer Java_lang_StringBuffer.new(Java_lang_CharSequence p0);

/* class java.lang.StringBuilder */
class Java_lang_StringBuilder extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Java_lang_StringBuffer p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(Object p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(String p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(boolean p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(float p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int[] p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder append(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder appendCodePoint(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder delete(int p0, int p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder deleteCharAt(int p0);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Java_lang_CharSequence p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Java_lang_CharSequence p1, int p2, int p3);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, Object p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, String p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, boolean p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, float p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int[] p1);
	@Virtual @Overload Java_lang_AbstractStringBuilder insert(int p0, int[] p1, int p2, int p3);
	@Virtual @Overload Java_lang_AbstractStringBuilder replace(int p0, int p1, String p2);
	@Virtual @Overload Java_lang_AbstractStringBuilder reverse();
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_Appendable append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_Appendable append(int p0);
	@Virtual @Overload Java_lang_CharSequence subSequence(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuilder append(Java_lang_CharSequence p0);
	@Virtual @Overload Java_lang_StringBuilder append(Java_lang_CharSequence p0, int p1, int p2);
	@Virtual @Overload Java_lang_StringBuilder append(Java_lang_StringBuffer p0);
	@Virtual @Overload Java_lang_StringBuilder append(Object p0);
	@Virtual @Overload Java_lang_StringBuilder append(String p0);
	@Virtual @Overload Java_lang_StringBuilder append(boolean p0);
	@Virtual @Overload Java_lang_StringBuilder append(float p0);
	@Virtual @Overload Java_lang_StringBuilder append(int p0);
	@Virtual @Overload Java_lang_StringBuilder append(int[] p0);
	@Virtual @Overload Java_lang_StringBuilder append(int[] p0, int p1, int p2);
	@Virtual @Overload Java_lang_StringBuilder appendCodePoint(int p0);
	@Virtual @Overload Java_lang_StringBuilder delete(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuilder deleteCharAt(int p0);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, Java_lang_CharSequence p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, Java_lang_CharSequence p1, int p2, int p3);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, Object p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, String p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, boolean p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, float p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, int p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, int[] p1);
	@Virtual @Overload Java_lang_StringBuilder insert(int p0, int[] p1, int p2, int p3);
	@Virtual @Overload Java_lang_StringBuilder replace(int p0, int p1, String p2);
	@Virtual @Overload Java_lang_StringBuilder reverse();
	@Virtual @Overload String substring(int p0);
	@Virtual @Overload String substring(int p0, int p1);
	@Virtual @Overload String toString();
	@Virtual @Overload int capacity();
	@Virtual @Overload int charAt(int p0);
	@Virtual @Overload int codePointAt(int p0);
	@Virtual @Overload int codePointBefore(int p0);
	@Virtual @Overload int codePointCount(int p0, int p1);
	@Virtual @Overload int indexOf(String p0);
	@Virtual @Overload int indexOf(String p0, int p1);
	@Virtual @Overload int lastIndexOf(String p0);
	@Virtual @Overload int lastIndexOf(String p0, int p1);
	@Virtual @Overload int length();
	@Virtual @Overload int offsetByCodePoints(int p0, int p1);
	@Virtual @Overload void ensureCapacity(int p0);
	@Virtual @Overload void getChars(int p0, int p1, int[] p2, int p3);
	@Virtual @Overload void setCharAt(int p0, int p1);
	@Virtual @Overload void setLength(int p0);
	@Virtual @Overload void trimToSize();
}
@Overload Java_lang_StringBuilder Java_lang_StringBuilder.new();
@Overload Java_lang_StringBuilder Java_lang_StringBuilder.new(int p0);
@Overload Java_lang_StringBuilder Java_lang_StringBuilder.new(String p0);
@Overload Java_lang_StringBuilder Java_lang_StringBuilder.new(Java_lang_CharSequence p0);

/* class java.lang.StringIndexOutOfBoundsException */
class Java_lang_StringIndexOutOfBoundsException extends Java_lang_IndexOutOfBoundsException {
}
@Overload Java_lang_StringIndexOutOfBoundsException Java_lang_StringIndexOutOfBoundsException.new();
@Overload Java_lang_StringIndexOutOfBoundsException Java_lang_StringIndexOutOfBoundsException.new(String p0);
@Overload Java_lang_StringIndexOutOfBoundsException Java_lang_StringIndexOutOfBoundsException.new(int p0);

/* interface java.lang.SuppressWarnings */
class Java_lang_SuppressWarnings extends Java_lang_annotation_Annotation {
	/*-- Method --*/
	@Virtual @Overload String[] value();
}

/* class java.lang.System */
class Java_lang_System {
	/*-- Method --*/
	@Static @Overload Java_io_Console console();
	@Static @Overload Java_lang_SecurityManager getSecurityManager();
	@Static @Overload Java_nio_channels_Channel inheritedChannel();
	@Static @Overload Java_util_Map getenv();
	@Static @Overload Java_util_Properties getProperties();
	@Static @Overload String clearProperty(String p0);
	@Static @Overload String getProperty(String p0);
	@Static @Overload String getProperty(String p0, String p1);
	@Static @Overload String getenv(String p0);
	@Static @Overload String lineSeparator();
	@Static @Overload String mapLibraryName(String p0);
	@Static @Overload String setProperty(String p0, String p1);
	@Static @Overload int currentTimeMillis();
	@Static @Overload int identityHashCode(Object p0);
	@Static @Overload int nanoTime();
	@Static @Overload void arraycopy(Object p0, int p1, Object p2, int p3, int p4);
	@Static @Overload void exit(int p0);
	@Static @Overload void gc();
	@Static @Overload void load(String p0);
	@Static @Overload void loadLibrary(String p0);
	@Static @Overload void runFinalization();
	@Static @Overload void setErr(Java_io_PrintStream p0);
	@Static @Overload void setIn(Java_io_InputStream p0);
	@Static @Overload void setOut(Java_io_PrintStream p0);
	@Static @Overload void setProperties(Java_util_Properties p0);
	@Static @Overload void setSecurityManager(Java_lang_SecurityManager p0);
}

/* class java.lang.Thread */
class Java_lang_Thread extends Java_lang_Runnable {
	/*-- Method --*/
	@Static @Overload Java_lang_Thread currentThread();
	@Static @Overload Java_lang_Thread_UncaughtExceptionHandler getDefaultUncaughtExceptionHandler();
	@Static @Overload Java_util_Map getAllStackTraces();
	@Static @Overload boolean holdsLock(Object p0);
	@Static @Overload boolean interrupted();
	@Static @Overload int activeCount();
	@Static @Overload int enumerate(Java_lang_Thread[] p0);
	@Static @Overload void dumpStack();
	@Static @Overload void setDefaultUncaughtExceptionHandler(Java_lang_Thread_UncaughtExceptionHandler p0);
	@Static @Overload void sleep(int p0);
	@Static @Overload void sleep(int p0, int p1);
	@Virtual @Overload Java_lang_ClassLoader getContextClassLoader();
	@Virtual @Overload Java_lang_StackTraceElement[] getStackTrace();
	@Virtual @Overload Java_lang_ThreadGroup getThreadGroup();
	@Virtual @Overload Java_lang_Thread_State getState();
	@Virtual @Overload Java_lang_Thread_UncaughtExceptionHandler getUncaughtExceptionHandler();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isAlive();
	@Virtual @Overload boolean isDaemon();
	@Virtual @Overload boolean isInterrupted();
	@Virtual @Overload int getId();
	@Virtual @Overload int getPriority();
	@Virtual @Overload void checkAccess();
	@Virtual @Overload void interrupt();
	@Virtual @Overload void join();
	@Virtual @Overload void join(int p0);
	@Virtual @Overload void join(int p0, int p1);
	@Virtual @Overload void setContextClassLoader(Java_lang_ClassLoader p0);
	@Virtual @Overload void setDaemon(boolean p0);
	@Virtual @Overload void setName(String p0);
	@Virtual @Overload void setPriority(int p0);
	@Virtual @Overload void setUncaughtExceptionHandler(Java_lang_Thread_UncaughtExceptionHandler p0);
	@Virtual @Overload void start();
}
@Overload Java_lang_Thread Java_lang_Thread.new();
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_Runnable p0);
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_ThreadGroup p0, Java_lang_Runnable p1);
@Overload Java_lang_Thread Java_lang_Thread.new(String p0);
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_ThreadGroup p0, String p1);
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_Runnable p0, String p1);
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_ThreadGroup p0, Java_lang_Runnable p1, String p2);
@Overload Java_lang_Thread Java_lang_Thread.new(Java_lang_ThreadGroup p0, Java_lang_Runnable p1, String p2, int p3);

/* class java.lang.ThreadDeath */
class Java_lang_ThreadDeath extends Java_lang_Error {
}
Java_lang_ThreadDeath Java_lang_ThreadDeath.new();

/* class java.lang.ThreadGroup */
class Java_lang_ThreadGroup {
	/*-- Method --*/
	@Virtual @Overload Java_lang_ThreadGroup getParent();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isDaemon();
	@Virtual @Overload boolean isDestroyed();
	@Virtual @Overload boolean parentOf(Java_lang_ThreadGroup p0);
	@Virtual @Overload int activeCount();
	@Virtual @Overload int activeGroupCount();
	@Virtual @Overload int enumerate(Java_lang_ThreadGroup[] p0);
	@Virtual @Overload int enumerate(Java_lang_ThreadGroup[] p0, boolean p1);
	@Virtual @Overload int enumerate(Java_lang_Thread[] p0);
	@Virtual @Overload int enumerate(Java_lang_Thread[] p0, boolean p1);
	@Virtual @Overload int getMaxPriority();
	@Virtual @Overload void checkAccess();
	@Virtual @Overload void destroy();
	@Virtual @Overload void interrupt();
	@Virtual @Overload void list();
	@Virtual @Overload void setDaemon(boolean p0);
	@Virtual @Overload void setMaxPriority(int p0);
	@Virtual @Overload void uncaughtException(Java_lang_Thread p0, Java_lang_Throwable p1);
}
@Overload Java_lang_ThreadGroup Java_lang_ThreadGroup.new(String p0);
@Overload Java_lang_ThreadGroup Java_lang_ThreadGroup.new(Java_lang_ThreadGroup p0, String p1);

/* class java.lang.TypeNotPresentException */
class Java_lang_TypeNotPresentException extends Java_lang_RuntimeException {
	/*-- Method --*/
	@Virtual @Overload String typeName();
}
Java_lang_TypeNotPresentException Java_lang_TypeNotPresentException.new(String p0, Java_lang_Throwable p1);

/* class java.lang.UnknownError */
class Java_lang_UnknownError extends Java_lang_VirtualMachineError {
}
@Overload Java_lang_UnknownError Java_lang_UnknownError.new();
@Overload Java_lang_UnknownError Java_lang_UnknownError.new(String p0);

/* class java.lang.UnsatisfiedLinkError */
class Java_lang_UnsatisfiedLinkError extends Java_lang_LinkageError {
}
@Overload Java_lang_UnsatisfiedLinkError Java_lang_UnsatisfiedLinkError.new();
@Overload Java_lang_UnsatisfiedLinkError Java_lang_UnsatisfiedLinkError.new(String p0);

/* class java.lang.UnsupportedClassVersionError */
class Java_lang_UnsupportedClassVersionError extends Java_lang_ClassFormatError {
}
@Overload Java_lang_UnsupportedClassVersionError Java_lang_UnsupportedClassVersionError.new();
@Overload Java_lang_UnsupportedClassVersionError Java_lang_UnsupportedClassVersionError.new(String p0);

/* class java.lang.UnsupportedOperationException */
class Java_lang_UnsupportedOperationException extends Java_lang_RuntimeException {
}
@Overload Java_lang_UnsupportedOperationException Java_lang_UnsupportedOperationException.new();
@Overload Java_lang_UnsupportedOperationException Java_lang_UnsupportedOperationException.new(String p0);
@Overload Java_lang_UnsupportedOperationException Java_lang_UnsupportedOperationException.new(String p0, Java_lang_Throwable p1);
@Overload Java_lang_UnsupportedOperationException Java_lang_UnsupportedOperationException.new(Java_lang_Throwable p0);

/* class java.lang.VerifyError */
class Java_lang_VerifyError extends Java_lang_LinkageError {
}
@Overload Java_lang_VerifyError Java_lang_VerifyError.new();
@Overload Java_lang_VerifyError Java_lang_VerifyError.new(String p0);

/* class java.lang.Void */
class Java_lang_Void {
}

/*============================================================*/
/* java package java.math */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Serializable;
class Java_lang_Enum;
class Java_lang_Number;
class Java_util_Random;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_math_BigDecimal extends Java_lang_Number;
class Java_math_BigInteger extends Java_lang_Number;
class Java_math_MathContext extends Java_io_Serializable;
class Java_math_RoundingMode extends Java_lang_Enum;

/*------------------------------------------------------------*/
/* class java.math.BigDecimal */
class Java_math_BigDecimal extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_math_BigDecimal valueOf(float p0);
	@Static @Overload Java_math_BigDecimal valueOf(int p0);
	@Static @Overload Java_math_BigDecimal valueOf(int p0, int p1);
	@Virtual @Overload Java_math_BigDecimal abs();
	@Virtual @Overload Java_math_BigDecimal abs(Java_math_MathContext p0);
	@Virtual @Overload Java_math_BigDecimal add(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal add(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0, Java_math_RoundingMode p1);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0, int p1);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0, int p1, Java_math_RoundingMode p2);
	@Virtual @Overload Java_math_BigDecimal divide(Java_math_BigDecimal p0, int p1, int p2);
	@Virtual @Overload Java_math_BigDecimal divideToIntegralValue(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal divideToIntegralValue(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal max(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal min(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal movePointLeft(int p0);
	@Virtual @Overload Java_math_BigDecimal movePointRight(int p0);
	@Virtual @Overload Java_math_BigDecimal multiply(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal multiply(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal negate();
	@Virtual @Overload Java_math_BigDecimal negate(Java_math_MathContext p0);
	@Virtual @Overload Java_math_BigDecimal plus();
	@Virtual @Overload Java_math_BigDecimal plus(Java_math_MathContext p0);
	@Virtual @Overload Java_math_BigDecimal pow(int p0);
	@Virtual @Overload Java_math_BigDecimal pow(int p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal remainder(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal remainder(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal round(Java_math_MathContext p0);
	@Virtual @Overload Java_math_BigDecimal scaleByPowerOfTen(int p0);
	@Virtual @Overload Java_math_BigDecimal setScale(int p0);
	@Virtual @Overload Java_math_BigDecimal setScale(int p0, Java_math_RoundingMode p1);
	@Virtual @Overload Java_math_BigDecimal setScale(int p0, int p1);
	@Virtual @Overload Java_math_BigDecimal stripTrailingZeros();
	@Virtual @Overload Java_math_BigDecimal subtract(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal subtract(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigDecimal ulp();
	@Virtual @Overload Java_math_BigDecimal[] divideAndRemainder(Java_math_BigDecimal p0);
	@Virtual @Overload Java_math_BigDecimal[] divideAndRemainder(Java_math_BigDecimal p0, Java_math_MathContext p1);
	@Virtual @Overload Java_math_BigInteger toBigInteger();
	@Virtual @Overload Java_math_BigInteger toBigIntegerExact();
	@Virtual @Overload Java_math_BigInteger unscaledValue();
	@Virtual @Overload String toEngineeringString();
	@Virtual @Overload String toPlainString();
	@Virtual @Overload int byteValueExact();
	@Virtual @Overload int compareTo(Java_math_BigDecimal p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int intValueExact();
	@Virtual @Overload int longValueExact();
	@Virtual @Overload int precision();
	@Virtual @Overload int scale();
	@Virtual @Overload int shortValueExact();
	@Virtual @Overload int signum();
}
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int[] p0, int p1, int p2);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int[] p0, int p1, int p2, Java_math_MathContext p3);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int[] p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int[] p0, Java_math_MathContext p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(String p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(String p0, Java_math_MathContext p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(float p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(float p0, Java_math_MathContext p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(Java_math_BigInteger p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(Java_math_BigInteger p0, Java_math_MathContext p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(Java_math_BigInteger p0, int p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(Java_math_BigInteger p0, int p1, Java_math_MathContext p2);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int p0, Java_math_MathContext p1);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int p0);
@Overload Java_math_BigDecimal Java_math_BigDecimal.new(int p0, Java_math_MathContext p1);

/* class java.math.BigInteger */
class Java_math_BigInteger extends Java_lang_Number {
	/*-- Method --*/
	@Static @Overload Java_math_BigInteger probablePrime(int p0, Java_util_Random p1);
	@Static @Overload Java_math_BigInteger valueOf(int p0);
	@Virtual @Overload Java_math_BigInteger abs();
	@Virtual @Overload Java_math_BigInteger add(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger andNot(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger clearBit(int p0);
	@Virtual @Overload Java_math_BigInteger divide(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger flipBit(int p0);
	@Virtual @Overload Java_math_BigInteger gcd(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger max(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger min(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger modInverse(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger modPow(Java_math_BigInteger p0, Java_math_BigInteger p1);
	@Virtual @Overload Java_math_BigInteger multiply(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger negate();
	@Virtual @Overload Java_math_BigInteger nextProbablePrime();
	@Virtual @Overload Java_math_BigInteger pow(int p0);
	@Virtual @Overload Java_math_BigInteger remainder(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger setBit(int p0);
	@Virtual @Overload Java_math_BigInteger shiftLeft(int p0);
	@Virtual @Overload Java_math_BigInteger shiftRight(int p0);
	@Virtual @Overload Java_math_BigInteger subtract(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger xor(Java_math_BigInteger p0);
	@Virtual @Overload Java_math_BigInteger[] divideAndRemainder(Java_math_BigInteger p0);
	@Virtual @Overload String toString(int p0);
	@Virtual @Overload boolean isProbablePrime(int p0);
	@Virtual @Overload boolean testBit(int p0);
	@Virtual @Overload int bitCount();
	@Virtual @Overload int bitLength();
	@Virtual @Overload int compareTo(Java_math_BigInteger p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int getLowestSetBit();
	@Virtual @Overload int signum();
	@Virtual @Overload int[] toByteArray();
}
@Overload Java_math_BigInteger Java_math_BigInteger.new(int[] p0);
@Overload Java_math_BigInteger Java_math_BigInteger.new(int p0, int[] p1);
@Overload Java_math_BigInteger Java_math_BigInteger.new(String p0, int p1);
@Overload Java_math_BigInteger Java_math_BigInteger.new(String p0);
@Overload Java_math_BigInteger Java_math_BigInteger.new(int p0, Java_util_Random p1);
@Overload Java_math_BigInteger Java_math_BigInteger.new(int p0, int p1, Java_util_Random p2);

/* class java.math.MathContext */
class Java_math_MathContext extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_math_RoundingMode getRoundingMode();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int getPrecision();
}
@Overload Java_math_MathContext Java_math_MathContext.new(int p0);
@Overload Java_math_MathContext Java_math_MathContext.new(int p0, Java_math_RoundingMode p1);
@Overload Java_math_MathContext Java_math_MathContext.new(String p0);

/* class java.math.RoundingMode */
class Java_math_RoundingMode extends Java_lang_Enum {
	/*-- Method --*/
	@Static @Overload Java_math_RoundingMode valueOf(String p0);
	@Static @Overload Java_math_RoundingMode valueOf(int p0);
	@Static @Overload Java_math_RoundingMode[] values();
}

/*============================================================*/
/* java package java.net */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Closeable;
class Java_io_IOException;
class Java_io_InputStream;
class Java_io_InterruptedIOException;
class Java_io_OutputStream;
class Java_io_Serializable;
class Java_lang_ClassLoader;
class Java_lang_Cloneable;
class Java_lang_Comparable;
class Java_lang_Enum;
class Java_lang_Exception;
class Java_net_Authenticator_RequestorType;
class Java_net_Proxy_Type;
class Java_nio_channels_DatagramChannel;
class Java_nio_channels_ServerSocketChannel;
class Java_nio_channels_SocketChannel;
class Java_security_BasicPermission;
class Java_security_Permission;
class Java_security_Principal;
class Java_security_SecureClassLoader;
class Java_security_cert_Certificate;
class Java_util_Enumeration;
class Java_util_List;
class Java_util_Map;
class Java_util_jar_Attributes;
class Java_util_jar_JarEntry;
class Java_util_jar_JarFile;
class Java_util_jar_Manifest;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_net_Authenticator;
class Java_net_SocketException extends Java_io_IOException;
class Java_net_BindException extends Java_net_SocketException;
class Java_net_CacheRequest;
class Java_net_CacheResponse;
class Java_net_ConnectException extends Java_net_SocketException;
class Java_net_ContentHandler;
class Java_net_ContentHandlerFactory;
class Java_net_CookieHandler;
class Java_net_CookieManager extends Java_net_CookieHandler;
class Java_net_CookiePolicy;
class Java_net_CookieStore;
class Java_net_DatagramPacket;
class Java_net_DatagramSocket extends Java_io_Closeable;
class Java_net_SocketOptions;
class Java_net_DatagramSocketImpl extends Java_net_SocketOptions;
class Java_net_DatagramSocketImplFactory;
class Java_net_FileNameMap;
class Java_net_HttpCookie extends Java_lang_Cloneable;
class Java_net_HttpRetryException extends Java_io_IOException;
class Java_net_URLConnection;
class Java_net_HttpURLConnection extends Java_net_URLConnection;
class Java_net_IDN;
class Java_net_InetAddress extends Java_io_Serializable;
class Java_net_Inet4Address extends Java_net_InetAddress;
class Java_net_Inet6Address extends Java_net_InetAddress;
class Java_net_SocketAddress extends Java_io_Serializable;
class Java_net_InetSocketAddress extends Java_net_SocketAddress;
class Java_net_InterfaceAddress;
class Java_net_JarURLConnection extends Java_net_URLConnection;
class Java_net_MalformedURLException extends Java_io_IOException;
class Java_net_MulticastSocket extends Java_net_DatagramSocket;
class Java_net_NetPermission extends Java_security_BasicPermission;
class Java_net_NetworkInterface;
class Java_net_NoRouteToHostException extends Java_net_SocketException;
class Java_net_PasswordAuthentication;
class Java_net_PortUnreachableException extends Java_net_SocketException;
class Java_net_ProtocolException extends Java_io_IOException;
class Java_net_ProtocolFamily;
class Java_net_Proxy;
class Java_net_ProxySelector;
class Java_net_ResponseCache;
class Java_net_SecureCacheResponse extends Java_net_CacheResponse;
class Java_net_ServerSocket extends Java_io_Closeable;
class Java_net_Socket extends Java_io_Closeable;
class Java_net_SocketImpl extends Java_net_SocketOptions;
class Java_net_SocketImplFactory;
class Java_net_SocketOption;
class Java_net_SocketPermission extends Java_security_Permission;
class Java_net_SocketTimeoutException extends Java_io_InterruptedIOException;
class Java_net_StandardProtocolFamily extends Java_lang_Enum;
class Java_net_StandardSocketOptions;
class Java_net_URI extends Java_lang_Comparable;
class Java_net_URISyntaxException extends Java_lang_Exception;
class Java_net_URL extends Java_io_Serializable;
class Java_net_URLClassLoader extends Java_security_SecureClassLoader;
class Java_net_URLDecoder;
class Java_net_URLEncoder;
class Java_net_URLStreamHandler;
class Java_net_URLStreamHandlerFactory;
class Java_net_UnknownHostException extends Java_io_IOException;
class Java_net_UnknownServiceException extends Java_io_IOException;

/*------------------------------------------------------------*/
/* class java.net.Authenticator */
class Java_net_Authenticator {
	/*-- Method --*/
	@Static @Overload Java_net_PasswordAuthentication requestPasswordAuthentication(Java_net_InetAddress p0, int p1, String p2, String p3, String p4);
	@Static @Overload Java_net_PasswordAuthentication requestPasswordAuthentication(String p0, Java_net_InetAddress p1, int p2, String p3, String p4, String p5);
	@Static @Overload Java_net_PasswordAuthentication requestPasswordAuthentication(String p0, Java_net_InetAddress p1, int p2, String p3, String p4, String p5, Java_net_URL p6, Java_net_Authenticator_RequestorType p7);
	@Static @Overload void setDefault(Java_net_Authenticator p0);
}
Java_net_Authenticator Java_net_Authenticator.new();

/* class java.net.SocketException */
class Java_net_SocketException extends Java_io_IOException {
}
@Overload Java_net_SocketException Java_net_SocketException.new(String p0);
@Overload Java_net_SocketException Java_net_SocketException.new();

/* class java.net.BindException */
class Java_net_BindException extends Java_net_SocketException {
}
@Overload Java_net_BindException Java_net_BindException.new(String p0);
@Overload Java_net_BindException Java_net_BindException.new();

/* class java.net.CacheRequest */
class Java_net_CacheRequest {
	/*-- Method --*/
	@Virtual @Overload Java_io_OutputStream getBody();
	@Virtual @Overload void abort();
}
Java_net_CacheRequest Java_net_CacheRequest.new();

/* class java.net.CacheResponse */
class Java_net_CacheResponse {
	/*-- Method --*/
	@Virtual @Overload Java_io_InputStream getBody();
	@Virtual @Overload Java_util_Map getHeaders();
}
Java_net_CacheResponse Java_net_CacheResponse.new();

/* class java.net.ConnectException */
class Java_net_ConnectException extends Java_net_SocketException {
}
@Overload Java_net_ConnectException Java_net_ConnectException.new(String p0);
@Overload Java_net_ConnectException Java_net_ConnectException.new();

/* class java.net.ContentHandler */
class Java_net_ContentHandler {
	/*-- Method --*/
	@Virtual @Overload Object getContent(Java_net_URLConnection p0);
	@Virtual @Overload Object getContent(Java_net_URLConnection p0, Class[] p1);
}
Java_net_ContentHandler Java_net_ContentHandler.new();

/* interface java.net.ContentHandlerFactory */
class Java_net_ContentHandlerFactory {
	/*-- Method --*/
	@Virtual @Overload Java_net_ContentHandler createContentHandler(String p0);
}

/* class java.net.CookieHandler */
class Java_net_CookieHandler {
	/*-- Method --*/
	@Static @Overload Java_net_CookieHandler getDefault();
	@Static @Overload void setDefault(Java_net_CookieHandler p0);
	@Virtual @Overload Java_util_Map get(Java_net_URI p0, Java_util_Map p1);
	@Virtual @Overload void put(Java_net_URI p0, Java_util_Map p1);
}
Java_net_CookieHandler Java_net_CookieHandler.new();

/* class java.net.CookieManager */
class Java_net_CookieManager extends Java_net_CookieHandler {
	/*-- Method --*/
	@Virtual @Overload Java_net_CookieStore getCookieStore();
	@Virtual @Overload void setCookiePolicy(Java_net_CookiePolicy p0);
}
@Overload Java_net_CookieManager Java_net_CookieManager.new();
@Overload Java_net_CookieManager Java_net_CookieManager.new(Java_net_CookieStore p0, Java_net_CookiePolicy p1);

/* interface java.net.CookiePolicy */
class Java_net_CookiePolicy {
	/*-- Method --*/
	@Virtual @Overload boolean shouldAccept(Java_net_URI p0, Java_net_HttpCookie p1);
}

/* interface java.net.CookieStore */
class Java_net_CookieStore {
	/*-- Method --*/
	@Virtual @Overload Java_util_List get(Java_net_URI p0);
	@Virtual @Overload Java_util_List getCookies();
	@Virtual @Overload Java_util_List getURIs();
	@Virtual @Overload boolean remove(Java_net_URI p0, Java_net_HttpCookie p1);
	@Virtual @Overload boolean removeAll();
	@Virtual @Overload void add(Java_net_URI p0, Java_net_HttpCookie p1);
}

/* class java.net.DatagramPacket */
class Java_net_DatagramPacket {
	/*-- Method --*/
	@Virtual @Overload Java_net_InetAddress getAddress();
	@Virtual @Overload Java_net_SocketAddress getSocketAddress();
	@Virtual @Overload int getLength();
	@Virtual @Overload int getOffset();
	@Virtual @Overload int getPort();
	@Virtual @Overload int[] getData();
	@Virtual @Overload void setAddress(Java_net_InetAddress p0);
	@Virtual @Overload void setData(int[] p0);
	@Virtual @Overload void setData(int[] p0, int p1, int p2);
	@Virtual @Overload void setLength(int p0);
	@Virtual @Overload void setPort(int p0);
	@Virtual @Overload void setSocketAddress(Java_net_SocketAddress p0);
}
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1, int p2);
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1);
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1, int p2, Java_net_InetAddress p3, int p4);
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1, int p2, Java_net_SocketAddress p3);
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1, Java_net_InetAddress p2, int p3);
@Overload Java_net_DatagramPacket Java_net_DatagramPacket.new(int[] p0, int p1, Java_net_SocketAddress p2);

/* class java.net.DatagramSocket */
class Java_net_DatagramSocket extends Java_io_Closeable {
	/*-- Method --*/
	@Static @Overload void setDatagramSocketImplFactory(Java_net_DatagramSocketImplFactory p0);
	@Virtual @Overload Java_net_InetAddress getInetAddress();
	@Virtual @Overload Java_net_InetAddress getLocalAddress();
	@Virtual @Overload Java_net_SocketAddress getLocalSocketAddress();
	@Virtual @Overload Java_net_SocketAddress getRemoteSocketAddress();
	@Virtual @Overload Java_nio_channels_DatagramChannel getChannel();
	@Virtual @Overload boolean getBroadcast();
	@Virtual @Overload boolean getReuseAddress();
	@Virtual @Overload boolean isBound();
	@Virtual @Overload boolean isClosed();
	@Virtual @Overload boolean isConnected();
	@Virtual @Overload int getLocalPort();
	@Virtual @Overload int getPort();
	@Virtual @Overload int getReceiveBufferSize();
	@Virtual @Overload int getSendBufferSize();
	@Virtual @Overload int getSoTimeout();
	@Virtual @Overload int getTrafficClass();
	@Virtual @Overload void bind(Java_net_SocketAddress p0);
	@Virtual @Overload void connect(Java_net_InetAddress p0, int p1);
	@Virtual @Overload void connect(Java_net_SocketAddress p0);
	@Virtual @Overload void disconnect();
	@Virtual @Overload void receive(Java_net_DatagramPacket p0);
	@Virtual @Overload void send(Java_net_DatagramPacket p0);
	@Virtual @Overload void setBroadcast(boolean p0);
	@Virtual @Overload void setReceiveBufferSize(int p0);
	@Virtual @Overload void setReuseAddress(boolean p0);
	@Virtual @Overload void setSendBufferSize(int p0);
	@Virtual @Overload void setSoTimeout(int p0);
	@Virtual @Overload void setTrafficClass(int p0);
}
@Overload Java_net_DatagramSocket Java_net_DatagramSocket.new();
@Overload Java_net_DatagramSocket Java_net_DatagramSocket.new(Java_net_SocketAddress p0);
@Overload Java_net_DatagramSocket Java_net_DatagramSocket.new(int p0);
@Overload Java_net_DatagramSocket Java_net_DatagramSocket.new(int p0, Java_net_InetAddress p1);

/* interface java.net.SocketOptions */
class Java_net_SocketOptions {
	/*-- Method --*/
	@Virtual @Overload Object getOption(int p0);
	@Virtual @Overload void setOption(int p0, Object p1);
}

/* class java.net.DatagramSocketImpl */
class Java_net_DatagramSocketImpl extends Java_net_SocketOptions {
}
Java_net_DatagramSocketImpl Java_net_DatagramSocketImpl.new();

/* interface java.net.DatagramSocketImplFactory */
class Java_net_DatagramSocketImplFactory {
	/*-- Method --*/
	@Virtual @Overload Java_net_DatagramSocketImpl createDatagramSocketImpl();
}

/* interface java.net.FileNameMap */
class Java_net_FileNameMap {
	/*-- Method --*/
	@Virtual @Overload String getContentTypeFor(String p0);
}

/* class java.net.HttpCookie */
class Java_net_HttpCookie extends Java_lang_Cloneable {
	/*-- Method --*/
	@Static @Overload Java_util_List parse(String p0);
	@Static @Overload boolean domainMatches(String p0, String p1);
	@Virtual @Overload Object clone();
	@Virtual @Overload String getComment();
	@Virtual @Overload String getCommentURL();
	@Virtual @Overload String getDomain();
	@Virtual @Overload String getName();
	@Virtual @Overload String getPath();
	@Virtual @Overload String getPortlist();
	@Virtual @Overload String getValue();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean getDiscard();
	@Virtual @Overload boolean getSecure();
	@Virtual @Overload boolean hasExpired();
	@Virtual @Overload boolean isHttpOnly();
	@Virtual @Overload int getMaxAge();
	@Virtual @Overload int getVersion();
	@Virtual @Overload void setComment(String p0);
	@Virtual @Overload void setCommentURL(String p0);
	@Virtual @Overload void setDiscard(boolean p0);
	@Virtual @Overload void setDomain(String p0);
	@Virtual @Overload void setHttpOnly(boolean p0);
	@Virtual @Overload void setMaxAge(int p0);
	@Virtual @Overload void setPath(String p0);
	@Virtual @Overload void setPortlist(String p0);
	@Virtual @Overload void setSecure(boolean p0);
	@Virtual @Overload void setValue(String p0);
	@Virtual @Overload void setVersion(int p0);
}
Java_net_HttpCookie Java_net_HttpCookie.new(String p0, String p1);

/* class java.net.HttpRetryException */
class Java_net_HttpRetryException extends Java_io_IOException {
	/*-- Method --*/
	@Virtual @Overload String getLocation();
	@Virtual @Overload String getReason();
	@Virtual @Overload int responseCode();
}
@Overload Java_net_HttpRetryException Java_net_HttpRetryException.new(String p0, int p1);
@Overload Java_net_HttpRetryException Java_net_HttpRetryException.new(String p0, int p1, String p2);

/* class java.net.URLConnection */
class Java_net_URLConnection {
	/*-- Method --*/
	@Static @Overload Java_net_FileNameMap getFileNameMap();
	@Static @Overload String guessContentTypeFromName(String p0);
	@Static @Overload String guessContentTypeFromStream(Java_io_InputStream p0);
	@Static @Overload boolean getDefaultAllowUserInteraction();
	@Static @Overload void setContentHandlerFactory(Java_net_ContentHandlerFactory p0);
	@Static @Overload void setDefaultAllowUserInteraction(boolean p0);
	@Static @Overload void setFileNameMap(Java_net_FileNameMap p0);
	@Virtual @Overload Java_io_InputStream getInputStream();
	@Virtual @Overload Java_io_OutputStream getOutputStream();
	@Virtual @Overload Java_net_URL getURL();
	@Virtual @Overload Java_security_Permission getPermission();
	@Virtual @Overload Java_util_Map getHeaderFields();
	@Virtual @Overload Java_util_Map getRequestProperties();
	@Virtual @Overload Object getContent();
	@Virtual @Overload Object getContent(Class[] p0);
	@Virtual @Overload String getContentEncoding();
	@Virtual @Overload String getContentType();
	@Virtual @Overload String getHeaderField(String p0);
	@Virtual @Overload String getHeaderField(int p0);
	@Virtual @Overload String getHeaderFieldKey(int p0);
	@Virtual @Overload String getRequestProperty(String p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getAllowUserInteraction();
	@Virtual @Overload boolean getDefaultUseCaches();
	@Virtual @Overload boolean getDoInput();
	@Virtual @Overload boolean getDoOutput();
	@Virtual @Overload boolean getUseCaches();
	@Virtual @Overload int getConnectTimeout();
	@Virtual @Overload int getContentLength();
	@Virtual @Overload int getContentLengthLong();
	@Virtual @Overload int getDate();
	@Virtual @Overload int getExpiration();
	@Virtual @Overload int getHeaderFieldDate(String p0, int p1);
	@Virtual @Overload int getHeaderFieldInt(String p0, int p1);
	@Virtual @Overload int getHeaderFieldLong(String p0, int p1);
	@Virtual @Overload int getIfModifiedSince();
	@Virtual @Overload int getLastModified();
	@Virtual @Overload int getReadTimeout();
	@Virtual @Overload void addRequestProperty(String p0, String p1);
	@Virtual @Overload void connect();
	@Virtual @Overload void setAllowUserInteraction(boolean p0);
	@Virtual @Overload void setConnectTimeout(int p0);
	@Virtual @Overload void setDefaultUseCaches(boolean p0);
	@Virtual @Overload void setDoInput(boolean p0);
	@Virtual @Overload void setDoOutput(boolean p0);
	@Virtual @Overload void setIfModifiedSince(int p0);
	@Virtual @Overload void setReadTimeout(int p0);
	@Virtual @Overload void setRequestProperty(String p0, String p1);
	@Virtual @Overload void setUseCaches(boolean p0);
}

/* class java.net.HttpURLConnection */
class Java_net_HttpURLConnection extends Java_net_URLConnection {
	/*-- Method --*/
	@Static @Overload boolean getFollowRedirects();
	@Static @Overload void setFollowRedirects(boolean p0);
	@Virtual @Overload Java_io_InputStream getErrorStream();
	@Virtual @Overload String getRequestMethod();
	@Virtual @Overload String getResponseMessage();
	@Virtual @Overload boolean getInstanceFollowRedirects();
	@Virtual @Overload boolean usingProxy();
	@Virtual @Overload int getResponseCode();
	@Virtual @Overload void disconnect();
	@Virtual @Overload void setChunkedStreamingMode(int p0);
	@Virtual @Overload void setFixedLengthStreamingMode(int p0);
	@Virtual @Overload void setInstanceFollowRedirects(boolean p0);
	@Virtual @Overload void setRequestMethod(String p0);
}

/* class java.net.IDN */
class Java_net_IDN {
	/*-- Method --*/
	@Static @Overload String toASCII(String p0);
	@Static @Overload String toASCII(String p0, int p1);
	@Static @Overload String toUnicode(String p0);
	@Static @Overload String toUnicode(String p0, int p1);
}

/* class java.net.InetAddress */
class Java_net_InetAddress extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_net_InetAddress getByAddress(String p0, int[] p1);
	@Static @Overload Java_net_InetAddress getByAddress(int[] p0);
	@Static @Overload Java_net_InetAddress getByName(String p0);
	@Static @Overload Java_net_InetAddress getLocalHost();
	@Static @Overload Java_net_InetAddress getLoopbackAddress();
	@Static @Overload Java_net_InetAddress[] getAllByName(String p0);
	@Virtual @Overload String getCanonicalHostName();
	@Virtual @Overload String getHostAddress();
	@Virtual @Overload String getHostName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isAnyLocalAddress();
	@Virtual @Overload boolean isLinkLocalAddress();
	@Virtual @Overload boolean isLoopbackAddress();
	@Virtual @Overload boolean isMCGlobal();
	@Virtual @Overload boolean isMCLinkLocal();
	@Virtual @Overload boolean isMCNodeLocal();
	@Virtual @Overload boolean isMCOrgLocal();
	@Virtual @Overload boolean isMCSiteLocal();
	@Virtual @Overload boolean isMulticastAddress();
	@Virtual @Overload boolean isReachable(Java_net_NetworkInterface p0, int p1, int p2);
	@Virtual @Overload boolean isReachable(int p0);
	@Virtual @Overload boolean isSiteLocalAddress();
	@Virtual @Overload int[] getAddress();
}

/* class java.net.Inet4Address */
class Java_net_Inet4Address extends Java_net_InetAddress {
}

/* class java.net.Inet6Address */
class Java_net_Inet6Address extends Java_net_InetAddress {
	/*-- Method --*/
	@Static @Overload Java_net_Inet6Address getByAddress(String p0, int[] p1, Java_net_NetworkInterface p2);
	@Static @Overload Java_net_Inet6Address getByAddress(String p0, int[] p1, int p2);
	@Virtual @Overload Java_net_NetworkInterface getScopedInterface();
	@Virtual @Overload boolean isIPv4CompatibleAddress();
	@Virtual @Overload int getScopeId();
}

/* class java.net.SocketAddress */
class Java_net_SocketAddress extends Java_io_Serializable {
}
Java_net_SocketAddress Java_net_SocketAddress.new();

/* class java.net.InetSocketAddress */
class Java_net_InetSocketAddress extends Java_net_SocketAddress {
	/*-- Method --*/
	@Static @Overload Java_net_InetSocketAddress createUnresolved(String p0, int p1);
	@Virtual @Overload Java_net_InetAddress getAddress();
	@Virtual @Overload String getHostName();
	@Virtual @Overload String getHostString();
	@Virtual @Overload boolean isUnresolved();
	@Virtual @Overload int getPort();
}
@Overload Java_net_InetSocketAddress Java_net_InetSocketAddress.new(int p0);
@Overload Java_net_InetSocketAddress Java_net_InetSocketAddress.new(Java_net_InetAddress p0, int p1);
@Overload Java_net_InetSocketAddress Java_net_InetSocketAddress.new(String p0, int p1);

/* class java.net.InterfaceAddress */
class Java_net_InterfaceAddress {
	/*-- Method --*/
	@Virtual @Overload Java_net_InetAddress getAddress();
	@Virtual @Overload Java_net_InetAddress getBroadcast();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int getNetworkPrefixLength();
}

/* class java.net.JarURLConnection */
class Java_net_JarURLConnection extends Java_net_URLConnection {
	/*-- Method --*/
	@Virtual @Overload Java_net_URL getJarFileURL();
	@Virtual @Overload Java_security_cert_Certificate[] getCertificates();
	@Virtual @Overload Java_util_jar_Attributes getAttributes();
	@Virtual @Overload Java_util_jar_Attributes getMainAttributes();
	@Virtual @Overload Java_util_jar_JarEntry getJarEntry();
	@Virtual @Overload Java_util_jar_JarFile getJarFile();
	@Virtual @Overload Java_util_jar_Manifest getManifest();
	@Virtual @Overload String getEntryName();
}

/* class java.net.MalformedURLException */
class Java_net_MalformedURLException extends Java_io_IOException {
}
@Overload Java_net_MalformedURLException Java_net_MalformedURLException.new();
@Overload Java_net_MalformedURLException Java_net_MalformedURLException.new(String p0);

/* class java.net.MulticastSocket */
class Java_net_MulticastSocket extends Java_net_DatagramSocket {
	/*-- Method --*/
	@Virtual @Overload Java_net_InetAddress getInterface();
	@Virtual @Overload Java_net_NetworkInterface getNetworkInterface();
	@Virtual @Overload boolean getLoopbackMode();
	@Virtual @Overload int getTimeToLive();
	@Virtual @Overload void joinGroup(Java_net_InetAddress p0);
	@Virtual @Overload void joinGroup(Java_net_SocketAddress p0, Java_net_NetworkInterface p1);
	@Virtual @Overload void leaveGroup(Java_net_InetAddress p0);
	@Virtual @Overload void leaveGroup(Java_net_SocketAddress p0, Java_net_NetworkInterface p1);
	@Virtual @Overload void setInterface(Java_net_InetAddress p0);
	@Virtual @Overload void setLoopbackMode(boolean p0);
	@Virtual @Overload void setNetworkInterface(Java_net_NetworkInterface p0);
	@Virtual @Overload void setTimeToLive(int p0);
}
@Overload Java_net_MulticastSocket Java_net_MulticastSocket.new();
@Overload Java_net_MulticastSocket Java_net_MulticastSocket.new(int p0);
@Overload Java_net_MulticastSocket Java_net_MulticastSocket.new(Java_net_SocketAddress p0);

/* class java.net.NetPermission */
class Java_net_NetPermission extends Java_security_BasicPermission {
}
@Overload Java_net_NetPermission Java_net_NetPermission.new(String p0);
@Overload Java_net_NetPermission Java_net_NetPermission.new(String p0, String p1);

/* class java.net.NetworkInterface */
class Java_net_NetworkInterface {
	/*-- Method --*/
	@Static @Overload Java_net_NetworkInterface getByIndex(int p0);
	@Static @Overload Java_net_NetworkInterface getByInetAddress(Java_net_InetAddress p0);
	@Static @Overload Java_net_NetworkInterface getByName(String p0);
	@Static @Overload Java_util_Enumeration getNetworkInterfaces();
	@Virtual @Overload Java_net_NetworkInterface getParent();
	@Virtual @Overload Java_util_Enumeration getInetAddresses();
	@Virtual @Overload Java_util_Enumeration getSubInterfaces();
	@Virtual @Overload Java_util_List getInterfaceAddresses();
	@Virtual @Overload String getDisplayName();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isLoopback();
	@Virtual @Overload boolean isPointToPoint();
	@Virtual @Overload boolean isUp();
	@Virtual @Overload boolean isVirtual();
	@Virtual @Overload boolean supportsMulticast();
	@Virtual @Overload int getIndex();
	@Virtual @Overload int getMTU();
	@Virtual @Overload int[] getHardwareAddress();
}

/* class java.net.NoRouteToHostException */
class Java_net_NoRouteToHostException extends Java_net_SocketException {
}
@Overload Java_net_NoRouteToHostException Java_net_NoRouteToHostException.new(String p0);
@Overload Java_net_NoRouteToHostException Java_net_NoRouteToHostException.new();

/* class java.net.PasswordAuthentication */
class Java_net_PasswordAuthentication {
	/*-- Method --*/
	@Virtual @Overload String getUserName();
	@Virtual @Overload int[] getPassword();
}
Java_net_PasswordAuthentication Java_net_PasswordAuthentication.new(String p0, int[] p1);

/* class java.net.PortUnreachableException */
class Java_net_PortUnreachableException extends Java_net_SocketException {
}
@Overload Java_net_PortUnreachableException Java_net_PortUnreachableException.new(String p0);
@Overload Java_net_PortUnreachableException Java_net_PortUnreachableException.new();

/* class java.net.ProtocolException */
class Java_net_ProtocolException extends Java_io_IOException {
}
@Overload Java_net_ProtocolException Java_net_ProtocolException.new(String p0);
@Overload Java_net_ProtocolException Java_net_ProtocolException.new();

/* interface java.net.ProtocolFamily */
class Java_net_ProtocolFamily {
	/*-- Method --*/
	@Virtual @Overload String name();
}

/* class java.net.Proxy */
class Java_net_Proxy {
	/*-- Method --*/
	@Virtual @Overload Java_net_Proxy_Type type();
	@Virtual @Overload Java_net_SocketAddress address();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
}
Java_net_Proxy Java_net_Proxy.new(Java_net_Proxy_Type p0, Java_net_SocketAddress p1);

/* class java.net.ProxySelector */
class Java_net_ProxySelector {
	/*-- Method --*/
	@Static @Overload Java_net_ProxySelector getDefault();
	@Static @Overload void setDefault(Java_net_ProxySelector p0);
	@Virtual @Overload Java_util_List select(Java_net_URI p0);
	@Virtual @Overload void connectFailed(Java_net_URI p0, Java_net_SocketAddress p1, Java_io_IOException p2);
}
Java_net_ProxySelector Java_net_ProxySelector.new();

/* class java.net.ResponseCache */
class Java_net_ResponseCache {
	/*-- Method --*/
	@Static @Overload Java_net_ResponseCache getDefault();
	@Static @Overload void setDefault(Java_net_ResponseCache p0);
	@Virtual @Overload Java_net_CacheRequest put(Java_net_URI p0, Java_net_URLConnection p1);
	@Virtual @Overload Java_net_CacheResponse get(Java_net_URI p0, String p1, Java_util_Map p2);
}
Java_net_ResponseCache Java_net_ResponseCache.new();

/* class java.net.SecureCacheResponse */
class Java_net_SecureCacheResponse extends Java_net_CacheResponse {
	/*-- Method --*/
	@Virtual @Overload Java_security_Principal getLocalPrincipal();
	@Virtual @Overload Java_security_Principal getPeerPrincipal();
	@Virtual @Overload Java_util_List getLocalCertificateChain();
	@Virtual @Overload Java_util_List getServerCertificateChain();
	@Virtual @Overload String getCipherSuite();
}
Java_net_SecureCacheResponse Java_net_SecureCacheResponse.new();

/* class java.net.ServerSocket */
class Java_net_ServerSocket extends Java_io_Closeable {
	/*-- Method --*/
	@Static @Overload void setSocketFactory(Java_net_SocketImplFactory p0);
	@Virtual @Overload Java_net_InetAddress getInetAddress();
	@Virtual @Overload Java_net_Socket accept();
	@Virtual @Overload Java_net_SocketAddress getLocalSocketAddress();
	@Virtual @Overload Java_nio_channels_ServerSocketChannel getChannel();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getReuseAddress();
	@Virtual @Overload boolean isBound();
	@Virtual @Overload boolean isClosed();
	@Virtual @Overload int getLocalPort();
	@Virtual @Overload int getReceiveBufferSize();
	@Virtual @Overload int getSoTimeout();
	@Virtual @Overload void bind(Java_net_SocketAddress p0);
	@Virtual @Overload void bind(Java_net_SocketAddress p0, int p1);
	@Virtual @Overload void setPerformancePreferences(int p0, int p1, int p2);
	@Virtual @Overload void setReceiveBufferSize(int p0);
	@Virtual @Overload void setReuseAddress(boolean p0);
	@Virtual @Overload void setSoTimeout(int p0);
}
@Overload Java_net_ServerSocket Java_net_ServerSocket.new();
@Overload Java_net_ServerSocket Java_net_ServerSocket.new(int p0);
@Overload Java_net_ServerSocket Java_net_ServerSocket.new(int p0, int p1);
@Overload Java_net_ServerSocket Java_net_ServerSocket.new(int p0, int p1, Java_net_InetAddress p2);

/* class java.net.Socket */
class Java_net_Socket extends Java_io_Closeable {
	/*-- Method --*/
	@Static @Overload void setSocketImplFactory(Java_net_SocketImplFactory p0);
	@Virtual @Overload Java_io_InputStream getInputStream();
	@Virtual @Overload Java_io_OutputStream getOutputStream();
	@Virtual @Overload Java_net_InetAddress getInetAddress();
	@Virtual @Overload Java_net_InetAddress getLocalAddress();
	@Virtual @Overload Java_net_SocketAddress getLocalSocketAddress();
	@Virtual @Overload Java_net_SocketAddress getRemoteSocketAddress();
	@Virtual @Overload Java_nio_channels_SocketChannel getChannel();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getKeepAlive();
	@Virtual @Overload boolean getOOBInline();
	@Virtual @Overload boolean getReuseAddress();
	@Virtual @Overload boolean getTcpNoDelay();
	@Virtual @Overload boolean isBound();
	@Virtual @Overload boolean isClosed();
	@Virtual @Overload boolean isConnected();
	@Virtual @Overload boolean isInputShutdown();
	@Virtual @Overload boolean isOutputShutdown();
	@Virtual @Overload int getLocalPort();
	@Virtual @Overload int getPort();
	@Virtual @Overload int getReceiveBufferSize();
	@Virtual @Overload int getSendBufferSize();
	@Virtual @Overload int getSoLinger();
	@Virtual @Overload int getSoTimeout();
	@Virtual @Overload int getTrafficClass();
	@Virtual @Overload void bind(Java_net_SocketAddress p0);
	@Virtual @Overload void connect(Java_net_SocketAddress p0);
	@Virtual @Overload void connect(Java_net_SocketAddress p0, int p1);
	@Virtual @Overload void sendUrgentData(int p0);
	@Virtual @Overload void setKeepAlive(boolean p0);
	@Virtual @Overload void setOOBInline(boolean p0);
	@Virtual @Overload void setPerformancePreferences(int p0, int p1, int p2);
	@Virtual @Overload void setReceiveBufferSize(int p0);
	@Virtual @Overload void setReuseAddress(boolean p0);
	@Virtual @Overload void setSendBufferSize(int p0);
	@Virtual @Overload void setSoLinger(boolean p0, int p1);
	@Virtual @Overload void setSoTimeout(int p0);
	@Virtual @Overload void setTcpNoDelay(boolean p0);
	@Virtual @Overload void setTrafficClass(int p0);
	@Virtual @Overload void shutdownInput();
	@Virtual @Overload void shutdownOutput();
}
@Overload Java_net_Socket Java_net_Socket.new();
@Overload Java_net_Socket Java_net_Socket.new(Java_net_Proxy p0);
@Overload Java_net_Socket Java_net_Socket.new(String p0, int p1);
@Overload Java_net_Socket Java_net_Socket.new(Java_net_InetAddress p0, int p1);
@Overload Java_net_Socket Java_net_Socket.new(String p0, int p1, Java_net_InetAddress p2, int p3);
@Overload Java_net_Socket Java_net_Socket.new(Java_net_InetAddress p0, int p1, Java_net_InetAddress p2, int p3);
@Overload Java_net_Socket Java_net_Socket.new(String p0, int p1, boolean p2);
@Overload Java_net_Socket Java_net_Socket.new(Java_net_InetAddress p0, int p1, boolean p2);

/* class java.net.SocketImpl */
class Java_net_SocketImpl extends Java_net_SocketOptions {
	/*-- Method --*/
	@Virtual @Overload String toString();
}
Java_net_SocketImpl Java_net_SocketImpl.new();

/* interface java.net.SocketImplFactory */
class Java_net_SocketImplFactory {
	/*-- Method --*/
	@Virtual @Overload Java_net_SocketImpl createSocketImpl();
}

/* interface java.net.SocketOption */
class Java_net_SocketOption {
	/*-- Method --*/
	@Virtual @Overload Class type();
	@Virtual @Overload String name();
}

/* class java.net.SocketPermission */
class Java_net_SocketPermission extends Java_security_Permission {
}
Java_net_SocketPermission Java_net_SocketPermission.new(String p0, String p1);

/* class java.net.SocketTimeoutException */
class Java_net_SocketTimeoutException extends Java_io_InterruptedIOException {
}
@Overload Java_net_SocketTimeoutException Java_net_SocketTimeoutException.new(String p0);
@Overload Java_net_SocketTimeoutException Java_net_SocketTimeoutException.new();

/* class java.net.StandardProtocolFamily */
class Java_net_StandardProtocolFamily extends Java_lang_Enum {
	/*-- Method --*/
	@Static @Overload Java_net_StandardProtocolFamily valueOf(String p0);
	@Static @Overload Java_net_StandardProtocolFamily[] values();
}

/* class java.net.StandardSocketOptions */
class Java_net_StandardSocketOptions {
}

/* class java.net.URI */
class Java_net_URI extends Java_lang_Comparable {
	/*-- Method --*/
	@Static @Overload Java_net_URI create(String p0);
	@Virtual @Overload Java_net_URI normalize();
	@Virtual @Overload Java_net_URI parseServerAuthority();
	@Virtual @Overload Java_net_URI relativize(Java_net_URI p0);
	@Virtual @Overload Java_net_URI resolve(Java_net_URI p0);
	@Virtual @Overload Java_net_URI resolve(String p0);
	@Virtual @Overload Java_net_URL toURL();
	@Virtual @Overload String getAuthority();
	@Virtual @Overload String getFragment();
	@Virtual @Overload String getHost();
	@Virtual @Overload String getPath();
	@Virtual @Overload String getQuery();
	@Virtual @Overload String getRawAuthority();
	@Virtual @Overload String getRawFragment();
	@Virtual @Overload String getRawPath();
	@Virtual @Overload String getRawQuery();
	@Virtual @Overload String getRawSchemeSpecificPart();
	@Virtual @Overload String getRawUserInfo();
	@Virtual @Overload String getScheme();
	@Virtual @Overload String getSchemeSpecificPart();
	@Virtual @Overload String getUserInfo();
	@Virtual @Overload String toASCIIString();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isAbsolute();
	@Virtual @Overload boolean isOpaque();
	@Virtual @Overload int compareTo(Java_net_URI p0);
	@Virtual @Overload int getPort();
}
@Overload Java_net_URI Java_net_URI.new(String p0);
@Overload Java_net_URI Java_net_URI.new(String p0, String p1, String p2, int p3, String p4, String p5, String p6);
@Overload Java_net_URI Java_net_URI.new(String p0, String p1, String p2, String p3, String p4);
@Overload Java_net_URI Java_net_URI.new(String p0, String p1, String p2, String p3);
@Overload Java_net_URI Java_net_URI.new(String p0, String p1, String p2);

/* class java.net.URISyntaxException */
class Java_net_URISyntaxException extends Java_lang_Exception {
	/*-- Method --*/
	@Virtual @Overload String getInput();
	@Virtual @Overload String getReason();
	@Virtual @Overload int getIndex();
}
@Overload Java_net_URISyntaxException Java_net_URISyntaxException.new(String p0, String p1, int p2);
@Overload Java_net_URISyntaxException Java_net_URISyntaxException.new(String p0, String p1);

/* class java.net.URL */
class Java_net_URL extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload void setURLStreamHandlerFactory(Java_net_URLStreamHandlerFactory p0);
	@Virtual @Overload Java_io_InputStream openStream();
	@Virtual @Overload Java_net_URI toURI();
	@Virtual @Overload Java_net_URLConnection openConnection();
	@Virtual @Overload Java_net_URLConnection openConnection(Java_net_Proxy p0);
	@Virtual @Overload Object getContent();
	@Virtual @Overload Object getContent(Class[] p0);
	@Virtual @Overload String getAuthority();
	@Virtual @Overload String getFile();
	@Virtual @Overload String getHost();
	@Virtual @Overload String getPath();
	@Virtual @Overload String getProtocol();
	@Virtual @Overload String getQuery();
	@Virtual @Overload String getRef();
	@Virtual @Overload String getUserInfo();
	@Virtual @Overload String toExternalForm();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean sameFile(Java_net_URL p0);
	@Virtual @Overload int getDefaultPort();
	@Virtual @Overload int getPort();
}
@Overload Java_net_URL Java_net_URL.new(String p0, String p1, int p2, String p3);
@Overload Java_net_URL Java_net_URL.new(String p0, String p1, String p2);
@Overload Java_net_URL Java_net_URL.new(String p0, String p1, int p2, String p3, Java_net_URLStreamHandler p4);
@Overload Java_net_URL Java_net_URL.new(String p0);
@Overload Java_net_URL Java_net_URL.new(Java_net_URL p0, String p1);
@Overload Java_net_URL Java_net_URL.new(Java_net_URL p0, String p1, Java_net_URLStreamHandler p2);

/* class java.net.URLClassLoader */
class Java_net_URLClassLoader extends Java_security_SecureClassLoader {
	/*-- Method --*/
	@Static @Overload Java_net_URLClassLoader newInstance(Java_net_URL[] p0);
	@Static @Overload Java_net_URLClassLoader newInstance(Java_net_URL[] p0, Java_lang_ClassLoader p1);
	@Virtual @Overload Java_net_URL findResource(String p0);
	@Virtual @Overload Java_net_URL[] getURLs();
	@Virtual @Overload Java_util_Enumeration findResources(String p0);
	@Virtual @Overload void close();
}
@Overload Java_net_URLClassLoader Java_net_URLClassLoader.new(Java_net_URL[] p0, Java_lang_ClassLoader p1);
@Overload Java_net_URLClassLoader Java_net_URLClassLoader.new(Java_net_URL[] p0);
@Overload Java_net_URLClassLoader Java_net_URLClassLoader.new(Java_net_URL[] p0, Java_lang_ClassLoader p1, Java_net_URLStreamHandlerFactory p2);

/* class java.net.URLDecoder */
class Java_net_URLDecoder {
	/*-- Method --*/
	@Static @Overload String decode(String p0, String p1);
}
Java_net_URLDecoder Java_net_URLDecoder.new();

/* class java.net.URLEncoder */
class Java_net_URLEncoder {
	/*-- Method --*/
	@Static @Overload String encode(String p0, String p1);
}

/* class java.net.URLStreamHandler */
class Java_net_URLStreamHandler {
}
Java_net_URLStreamHandler Java_net_URLStreamHandler.new();

/* interface java.net.URLStreamHandlerFactory */
class Java_net_URLStreamHandlerFactory {
	/*-- Method --*/
	@Virtual @Overload Java_net_URLStreamHandler createURLStreamHandler(String p0);
}

/* class java.net.UnknownHostException */
class Java_net_UnknownHostException extends Java_io_IOException {
}
@Overload Java_net_UnknownHostException Java_net_UnknownHostException.new(String p0);
@Overload Java_net_UnknownHostException Java_net_UnknownHostException.new();

/* class java.net.UnknownServiceException */
class Java_net_UnknownServiceException extends Java_io_IOException {
}
@Overload Java_net_UnknownServiceException Java_net_UnknownServiceException.new();
@Overload Java_net_UnknownServiceException Java_net_UnknownServiceException.new(String p0);

/*============================================================*/
/* java package java.util */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Closeable;
class Java_io_File;
class Java_io_IOException;
class Java_io_InputStream;
class Java_io_OutputStream;
class Java_io_PrintStream;
class Java_io_PrintWriter;
class Java_io_Reader;
class Java_io_Serializable;
class Java_io_Writer;
class Java_lang_Appendable;
class Java_lang_ClassLoader;
class Java_lang_Cloneable;
class Java_lang_Enum;
class Java_lang_Error;
class Java_lang_Exception;
class Java_lang_IllegalArgumentException;
class Java_lang_IllegalStateException;
class Java_lang_Iterable;
class Java_lang_Readable;
class Java_lang_Runnable;
class Java_lang_RuntimeException;
class Java_lang_Throwable;
class Java_math_BigDecimal;
class Java_math_BigInteger;
class Java_nio_ByteBuffer;
class Java_nio_LongBuffer;
class Java_nio_channels_ReadableByteChannel;
class Java_nio_file_Path;
class Java_security_BasicPermission;
class Java_util_Locale_Category;
class Java_util_Map_Entry;
class Java_util_ResourceBundle_Control;
class Java_util_regex_Pattern;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_util_Collection extends Java_lang_Iterable;
class Java_util_AbstractCollection extends Java_util_Collection;
class Java_util_AbstractList extends Java_util_AbstractCollection;
class Java_util_Map;
class Java_util_AbstractMap extends Java_util_Map;
class Java_util_AbstractQueue extends Java_util_AbstractCollection;
class Java_util_AbstractSequentialList extends Java_util_AbstractList;
class Java_util_AbstractSet extends Java_util_AbstractCollection;
class Java_util_ArrayDeque extends Java_util_AbstractCollection;
class Java_util_ArrayList extends Java_util_AbstractList;
class Java_util_Arrays;
class Java_util_BitSet extends Java_lang_Cloneable;
class Java_util_Calendar extends Java_io_Serializable;
class Java_util_Collections;
class Java_util_Comparator;
class Java_util_ConcurrentModificationException extends Java_lang_RuntimeException;
class Java_util_Currency extends Java_io_Serializable;
class Java_util_Date extends Java_io_Serializable;
class Java_util_Queue extends Java_util_Collection;
class Java_util_Deque extends Java_util_Queue;
class Java_util_Dictionary;
class Java_util_IllegalFormatException extends Java_lang_IllegalArgumentException;
class Java_util_DuplicateFormatFlagsException extends Java_util_IllegalFormatException;
class Java_util_EmptyStackException extends Java_lang_RuntimeException;
class Java_util_EnumMap extends Java_util_AbstractMap;
class Java_util_EnumSet extends Java_util_AbstractSet;
class Java_util_Enumeration;
class Java_util_EventListener;
class Java_util_EventListenerProxy extends Java_util_EventListener;
class Java_util_EventObject extends Java_io_Serializable;
class Java_util_FormatFlagsConversionMismatchException extends Java_util_IllegalFormatException;
class Java_util_Formattable;
class Java_util_FormattableFlags;
class Java_util_Formatter extends Java_io_Closeable;
class Java_util_FormatterClosedException extends Java_lang_IllegalStateException;
class Java_util_GregorianCalendar extends Java_util_Calendar;
class Java_util_HashMap extends Java_util_AbstractMap;
class Java_util_HashSet extends Java_util_AbstractSet;
class Java_util_Hashtable extends Java_util_Dictionary;
class Java_util_IdentityHashMap extends Java_util_AbstractMap;
class Java_util_IllegalFormatCodePointException extends Java_util_IllegalFormatException;
class Java_util_IllegalFormatConversionException extends Java_util_IllegalFormatException;
class Java_util_IllegalFormatFlagsException extends Java_util_IllegalFormatException;
class Java_util_IllegalFormatPrecisionException extends Java_util_IllegalFormatException;
class Java_util_IllegalFormatWidthException extends Java_util_IllegalFormatException;
class Java_util_IllformedLocaleException extends Java_lang_RuntimeException;
class Java_util_NoSuchElementException extends Java_lang_RuntimeException;
class Java_util_InputMismatchException extends Java_util_NoSuchElementException;
class Java_util_InvalidPropertiesFormatException extends Java_io_IOException;
class Java_util_Iterator;
class Java_util_LinkedHashMap extends Java_util_HashMap;
class Java_util_LinkedHashSet extends Java_util_HashSet;
class Java_util_LinkedList extends Java_util_AbstractSequentialList;
class Java_util_List extends Java_util_Collection;
class Java_util_ListIterator extends Java_util_Iterator;
class Java_util_ResourceBundle;
class Java_util_ListResourceBundle extends Java_util_ResourceBundle;
class Java_util_Locale extends Java_lang_Cloneable;
class Java_util_MissingFormatArgumentException extends Java_util_IllegalFormatException;
class Java_util_MissingFormatWidthException extends Java_util_IllegalFormatException;
class Java_util_MissingResourceException extends Java_lang_RuntimeException;
class Java_util_SortedMap extends Java_util_Map;
class Java_util_NavigableMap extends Java_util_SortedMap;
class Java_util_Set extends Java_util_Collection;
class Java_util_SortedSet extends Java_util_Set;
class Java_util_NavigableSet extends Java_util_SortedSet;
class Java_util_Objects;
class Java_util_Observable;
class Java_util_Observer;
class Java_util_PriorityQueue extends Java_util_AbstractQueue;
class Java_util_Properties extends Java_util_Hashtable;
class Java_util_PropertyPermission extends Java_security_BasicPermission;
class Java_util_PropertyResourceBundle extends Java_util_ResourceBundle;
class Java_util_Random extends Java_io_Serializable;
class Java_util_RandomAccess;
class Java_util_Scanner extends Java_util_Iterator;
class Java_util_ServiceConfigurationError extends Java_lang_Error;
class Java_util_ServiceLoader extends Java_lang_Iterable;
class Java_util_TimeZone extends Java_io_Serializable;
class Java_util_SimpleTimeZone extends Java_util_TimeZone;
class Java_util_Vector extends Java_util_AbstractList;
class Java_util_Stack extends Java_util_Vector;
class Java_util_StringTokenizer extends Java_util_Enumeration;
class Java_util_Timer;
class Java_util_TimerTask extends Java_lang_Runnable;
class Java_util_TooManyListenersException extends Java_lang_Exception;
class Java_util_TreeMap extends Java_util_AbstractMap;
class Java_util_TreeSet extends Java_util_AbstractSet;
class Java_util_UUID extends Java_io_Serializable;
class Java_util_UnknownFormatConversionException extends Java_util_IllegalFormatException;
class Java_util_UnknownFormatFlagsException extends Java_util_IllegalFormatException;
class Java_util_WeakHashMap extends Java_util_AbstractMap;

/*------------------------------------------------------------*/
/* interface java.util.Collection */
class Java_util_Collection extends Java_lang_Iterable {
	/*-- Method --*/
	@Virtual @Overload Object[] toArray();
	@Virtual @Overload Object[] toArray(Object[] p0);
	@Virtual @Overload boolean add(Object p0);
	@Virtual @Overload boolean addAll(Java_util_Collection p0);
	@Virtual @Overload boolean contains(Object p0);
	@Virtual @Overload boolean containsAll(Java_util_Collection p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload boolean remove(Object p0);
	@Virtual @Overload boolean removeAll(Java_util_Collection p0);
	@Virtual @Overload boolean retainAll(Java_util_Collection p0);
	@Virtual @Overload int size();
	@Virtual @Overload void clear();
}

/* class java.util.AbstractCollection */
class Java_util_AbstractCollection extends Java_util_Collection {
	/*-- Method --*/
	@Virtual @Overload String toString();
}

/* class java.util.AbstractList */
class Java_util_AbstractList extends Java_util_AbstractCollection {
	/*-- Method --*/
	@Virtual @Overload Java_util_List subList(int p0, int p1);
	@Virtual @Overload Java_util_ListIterator listIterator();
	@Virtual @Overload Java_util_ListIterator listIterator(int p0);
	@Virtual @Overload Object get(int p0);
	@Virtual @Overload Object remove(int p0);
	@Virtual @Overload Object set(int p0, Object p1);
	@Virtual @Overload boolean addAll(int p0, Java_util_Collection p1);
	@Virtual @Overload int indexOf(Object p0);
	@Virtual @Overload int lastIndexOf(Object p0);
	@Virtual @Overload void add(int p0, Object p1);
}

/* interface java.util.Map */
class Java_util_Map {
	/*-- Method --*/
	@Virtual @Overload Java_util_Collection values();
	@Virtual @Overload Java_util_Set entrySet();
	@Virtual @Overload Java_util_Set keySet();
	@Virtual @Overload Object get(Object p0);
	@Virtual @Overload Object put(Object p0, Object p1);
	@Virtual @Overload Object remove(Object p0);
	@Virtual @Overload boolean containsKey(Object p0);
	@Virtual @Overload boolean containsValue(Object p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload int size();
	@Virtual @Overload void clear();
	@Virtual @Overload void putAll(Java_util_Map p0);
}

/* class java.util.AbstractMap */
class Java_util_AbstractMap extends Java_util_Map {
	/*-- Method --*/
	@Virtual @Overload String toString();
}

/* class java.util.AbstractQueue */
class Java_util_AbstractQueue extends Java_util_AbstractCollection {
	/*-- Method --*/
	@Virtual @Overload Object element();
	@Virtual @Overload Object remove();
}

/* class java.util.AbstractSequentialList */
class Java_util_AbstractSequentialList extends Java_util_AbstractList {
}

/* class java.util.AbstractSet */
class Java_util_AbstractSet extends Java_util_AbstractCollection {
}

/* class java.util.ArrayDeque */
class Java_util_ArrayDeque extends Java_util_AbstractCollection {
	/*-- Method --*/
	@Virtual @Overload Java_util_ArrayDeque clone();
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Object clone();
	@Virtual @Overload Object element();
	@Virtual @Overload Object getFirst();
	@Virtual @Overload Object getLast();
	@Virtual @Overload Object peek();
	@Virtual @Overload Object peekFirst();
	@Virtual @Overload Object peekLast();
	@Virtual @Overload Object poll();
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
	@Virtual @Overload Object pop();
	@Virtual @Overload Object remove();
	@Virtual @Overload Object removeFirst();
	@Virtual @Overload Object removeLast();
	@Virtual @Overload boolean offer(Object p0);
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
}
@Overload Java_util_ArrayDeque Java_util_ArrayDeque.new();
@Overload Java_util_ArrayDeque Java_util_ArrayDeque.new(int p0);
@Overload Java_util_ArrayDeque Java_util_ArrayDeque.new(Java_util_Collection p0);

/* class java.util.ArrayList */
class Java_util_ArrayList extends Java_util_AbstractList {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload void ensureCapacity(int p0);
	@Virtual @Overload void trimToSize();
}
@Overload Java_util_ArrayList Java_util_ArrayList.new(int p0);
@Overload Java_util_ArrayList Java_util_ArrayList.new();
@Overload Java_util_ArrayList Java_util_ArrayList.new(Java_util_Collection p0);

/* class java.util.Arrays */
class Java_util_Arrays {
	/*-- Method --*/
	@Static @Overload Java_util_List asList(Object[] p0);
	@Static @Overload Object[] copyOf(Object[] p0, int p1);
	@Static @Overload Object[] copyOf(Object[] p0, int p1, Class p2);
	@Static @Overload Object[] copyOfRange(Object[] p0, int p1, int p2);
	@Static @Overload Object[] copyOfRange(Object[] p0, int p1, int p2, Class p3);
	@Static @Overload String deepToString(Object[] p0);
	@Static @Overload String toString(Object[] p0);
	@Static @Overload String toString(boolean[] p0);
	@Static @Overload String toString(float[] p0);
	@Static @Overload String toString(int[] p0);
	@Static @Overload boolean deepEquals(Object[] p0, Object[] p1);
	@Static @Overload boolean equals(Object[] p0, Object[] p1);
	@Static @Overload boolean equals(boolean[] p0, boolean[] p1);
	@Static @Overload boolean equals(float[] p0, float[] p1);
	@Static @Overload boolean equals(int[] p0, int[] p1);
	@Static @Overload boolean[] copyOf(boolean[] p0, int p1);
	@Static @Overload boolean[] copyOfRange(boolean[] p0, int p1, int p2);
	@Static @Overload float[] copyOf(float[] p0, int p1);
	@Static @Overload float[] copyOfRange(float[] p0, int p1, int p2);
	@Static @Overload int binarySearch(Object[] p0, Object p1);
	@Static @Overload int binarySearch(Object[] p0, Object p1, Java_util_Comparator p2);
	@Static @Overload int binarySearch(Object[] p0, int p1, int p2, Object p3);
	@Static @Overload int binarySearch(Object[] p0, int p1, int p2, Object p3, Java_util_Comparator p4);
	@Static @Overload int binarySearch(float[] p0, float p1);
	@Static @Overload int binarySearch(float[] p0, int p1, int p2, float p3);
	@Static @Overload int binarySearch(int[] p0, int p1);
	@Static @Overload int binarySearch(int[] p0, int p1, int p2, int p3);
	@Static @Overload int deepHashCode(Object[] p0);
	@Static @Overload int[] copyOf(int[] p0, int p1);
	@Static @Overload int[] copyOfRange(int[] p0, int p1, int p2);
	@Static @Overload void fill(Object[] p0, Object p1);
	@Static @Overload void fill(Object[] p0, int p1, int p2, Object p3);
	@Static @Overload void fill(boolean[] p0, boolean p1);
	@Static @Overload void fill(boolean[] p0, int p1, int p2, boolean p3);
	@Static @Overload void fill(float[] p0, float p1);
	@Static @Overload void fill(float[] p0, int p1, int p2, float p3);
	@Static @Overload void fill(int[] p0, int p1);
	@Static @Overload void fill(int[] p0, int p1, int p2, int p3);
	@Static @Overload void sort(Object[] p0);
	@Static @Overload void sort(Object[] p0, Java_util_Comparator p1);
	@Static @Overload void sort(Object[] p0, int p1, int p2);
	@Static @Overload void sort(Object[] p0, int p1, int p2, Java_util_Comparator p3);
	@Static @Overload void sort(float[] p0);
	@Static @Overload void sort(float[] p0, int p1, int p2);
	@Static @Overload void sort(int[] p0);
	@Static @Overload void sort(int[] p0, int p1, int p2);
}

/* class java.util.BitSet */
class Java_util_BitSet extends Java_lang_Cloneable {
	/*-- Method --*/
	@Static @Overload Java_util_BitSet valueOf(Java_nio_ByteBuffer p0);
	@Static @Overload Java_util_BitSet valueOf(Java_nio_LongBuffer p0);
	@Static @Overload Java_util_BitSet valueOf(int[] p0);
	@Virtual @Overload Java_util_BitSet get(int p0, int p1);
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean get(int p0);
	@Virtual @Overload boolean intersects(Java_util_BitSet p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload int cardinality();
	@Virtual @Overload int length();
	@Virtual @Overload int nextClearBit(int p0);
	@Virtual @Overload int nextSetBit(int p0);
	@Virtual @Overload int previousClearBit(int p0);
	@Virtual @Overload int previousSetBit(int p0);
	@Virtual @Overload int size();
	@Virtual @Overload int[] toByteArray();
	@Virtual @Overload int[] toLongArray();
	@Virtual @Overload void andNot(Java_util_BitSet p0);
	@Virtual @Overload void clear();
	@Virtual @Overload void clear(int p0);
	@Virtual @Overload void clear(int p0, int p1);
	@Virtual @Overload void flip(int p0);
	@Virtual @Overload void flip(int p0, int p1);
	@Virtual @Overload void set(int p0);
	@Virtual @Overload void set(int p0, boolean p1);
	@Virtual @Overload void set(int p0, int p1);
	@Virtual @Overload void set(int p0, int p1, boolean p2);
	@Virtual @Overload void xor(Java_util_BitSet p0);
}
@Overload Java_util_BitSet Java_util_BitSet.new();
@Overload Java_util_BitSet Java_util_BitSet.new(int p0);

/* class java.util.Calendar */
class Java_util_Calendar extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_util_Calendar getInstance();
	@Static @Overload Java_util_Calendar getInstance(Java_util_Locale p0);
	@Static @Overload Java_util_Calendar getInstance(Java_util_TimeZone p0);
	@Static @Overload Java_util_Calendar getInstance(Java_util_TimeZone p0, Java_util_Locale p1);
	@Static @Overload Java_util_Locale[] getAvailableLocales();
	@Virtual @Overload Java_util_Date getTime();
	@Virtual @Overload Java_util_Map getDisplayNames(int p0, int p1, Java_util_Locale p2);
	@Virtual @Overload Java_util_TimeZone getTimeZone();
	@Virtual @Overload Object clone();
	@Virtual @Overload String getDisplayName(int p0, int p1, Java_util_Locale p2);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean after(Object p0);
	@Virtual @Overload boolean before(Object p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload boolean isLenient();
	@Virtual @Overload boolean isSet(int p0);
	@Virtual @Overload boolean isWeekDateSupported();
	@Virtual @Overload int compareTo(Java_util_Calendar p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int get(int p0);
	@Virtual @Overload int getActualMaximum(int p0);
	@Virtual @Overload int getActualMinimum(int p0);
	@Virtual @Overload int getFirstDayOfWeek();
	@Virtual @Overload int getGreatestMinimum(int p0);
	@Virtual @Overload int getLeastMaximum(int p0);
	@Virtual @Overload int getMaximum(int p0);
	@Virtual @Overload int getMinimalDaysInFirstWeek();
	@Virtual @Overload int getMinimum(int p0);
	@Virtual @Overload int getTimeInMillis();
	@Virtual @Overload int getWeekYear();
	@Virtual @Overload int getWeeksInWeekYear();
	@Virtual @Overload void add(int p0, int p1);
	@Virtual @Overload void clear();
	@Virtual @Overload void clear(int p0);
	@Virtual @Overload void roll(int p0, boolean p1);
	@Virtual @Overload void roll(int p0, int p1);
	@Virtual @Overload void set(int p0, int p1);
	@Virtual @Overload void set(int p0, int p1, int p2);
	@Virtual @Overload void set(int p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void set(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload void setFirstDayOfWeek(int p0);
	@Virtual @Overload void setLenient(boolean p0);
	@Virtual @Overload void setMinimalDaysInFirstWeek(int p0);
	@Virtual @Overload void setTime(Java_util_Date p0);
	@Virtual @Overload void setTimeInMillis(int p0);
	@Virtual @Overload void setTimeZone(Java_util_TimeZone p0);
	@Virtual @Overload void setWeekDate(int p0, int p1, int p2);
}

/* class java.util.Collections */
class Java_util_Collections {
	/*-- Method --*/
	@Static @Overload Java_util_ArrayList list(Java_util_Enumeration p0);
	@Static @Overload Java_util_Collection checkedCollection(Java_util_Collection p0, Class p1);
	@Static @Overload Java_util_Collection synchronizedCollection(Java_util_Collection p0);
	@Static @Overload Java_util_Collection unmodifiableCollection(Java_util_Collection p0);
	@Static @Overload Java_util_Comparator reverseOrder();
	@Static @Overload Java_util_Comparator reverseOrder(Java_util_Comparator p0);
	@Static @Overload Java_util_Enumeration emptyEnumeration();
	@Static @Overload Java_util_Enumeration enumeration(Java_util_Collection p0);
	@Static @Overload Java_util_Iterator emptyIterator();
	@Static @Overload Java_util_List checkedList(Java_util_List p0, Class p1);
	@Static @Overload Java_util_List emptyList();
	@Static @Overload Java_util_List nCopies(int p0, Object p1);
	@Static @Overload Java_util_List singletonList(Object p0);
	@Static @Overload Java_util_List synchronizedList(Java_util_List p0);
	@Static @Overload Java_util_List unmodifiableList(Java_util_List p0);
	@Static @Overload Java_util_ListIterator emptyListIterator();
	@Static @Overload Java_util_Map checkedMap(Java_util_Map p0, Class p1, Class p2);
	@Static @Overload Java_util_Map emptyMap();
	@Static @Overload Java_util_Map singletonMap(Object p0, Object p1);
	@Static @Overload Java_util_Map synchronizedMap(Java_util_Map p0);
	@Static @Overload Java_util_Map unmodifiableMap(Java_util_Map p0);
	@Static @Overload Java_util_Queue asLifoQueue(Java_util_Deque p0);
	@Static @Overload Java_util_Set checkedSet(Java_util_Set p0, Class p1);
	@Static @Overload Java_util_Set emptySet();
	@Static @Overload Java_util_Set newSetFromMap(Java_util_Map p0);
	@Static @Overload Java_util_Set singleton(Object p0);
	@Static @Overload Java_util_Set synchronizedSet(Java_util_Set p0);
	@Static @Overload Java_util_Set unmodifiableSet(Java_util_Set p0);
	@Static @Overload Java_util_SortedMap checkedSortedMap(Java_util_SortedMap p0, Class p1, Class p2);
	@Static @Overload Java_util_SortedMap synchronizedSortedMap(Java_util_SortedMap p0);
	@Static @Overload Java_util_SortedMap unmodifiableSortedMap(Java_util_SortedMap p0);
	@Static @Overload Java_util_SortedSet checkedSortedSet(Java_util_SortedSet p0, Class p1);
	@Static @Overload Java_util_SortedSet synchronizedSortedSet(Java_util_SortedSet p0);
	@Static @Overload Java_util_SortedSet unmodifiableSortedSet(Java_util_SortedSet p0);
	@Static @Overload Object max(Java_util_Collection p0);
	@Static @Overload Object max(Java_util_Collection p0, Java_util_Comparator p1);
	@Static @Overload Object min(Java_util_Collection p0);
	@Static @Overload Object min(Java_util_Collection p0, Java_util_Comparator p1);
	@Static @Overload boolean addAll(Java_util_Collection p0, Object[] p1);
	@Static @Overload boolean disjoint(Java_util_Collection p0, Java_util_Collection p1);
	@Static @Overload boolean replaceAll(Java_util_List p0, Object p1, Object p2);
	@Static @Overload int binarySearch(Java_util_List p0, Object p1);
	@Static @Overload int binarySearch(Java_util_List p0, Object p1, Java_util_Comparator p2);
	@Static @Overload int frequency(Java_util_Collection p0, Object p1);
	@Static @Overload int indexOfSubList(Java_util_List p0, Java_util_List p1);
	@Static @Overload int lastIndexOfSubList(Java_util_List p0, Java_util_List p1);
	@Static @Overload void copy(Java_util_List p0, Java_util_List p1);
	@Static @Overload void fill(Java_util_List p0, Object p1);
	@Static @Overload void reverse(Java_util_List p0);
	@Static @Overload void rotate(Java_util_List p0, int p1);
	@Static @Overload void shuffle(Java_util_List p0);
	@Static @Overload void shuffle(Java_util_List p0, Java_util_Random p1);
	@Static @Overload void sort(Java_util_List p0);
	@Static @Overload void sort(Java_util_List p0, Java_util_Comparator p1);
	@Static @Overload void swap(Java_util_List p0, int p1, int p2);
}

/* interface java.util.Comparator */
class Java_util_Comparator {
	/*-- Method --*/
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int compare(Object p0, Object p1);
}

/* class java.util.ConcurrentModificationException */
class Java_util_ConcurrentModificationException extends Java_lang_RuntimeException {
}
@Overload Java_util_ConcurrentModificationException Java_util_ConcurrentModificationException.new();
@Overload Java_util_ConcurrentModificationException Java_util_ConcurrentModificationException.new(String p0);
@Overload Java_util_ConcurrentModificationException Java_util_ConcurrentModificationException.new(Java_lang_Throwable p0);
@Overload Java_util_ConcurrentModificationException Java_util_ConcurrentModificationException.new(String p0, Java_lang_Throwable p1);

/* class java.util.Currency */
class Java_util_Currency extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_util_Currency getInstance(Java_util_Locale p0);
	@Static @Overload Java_util_Currency getInstance(String p0);
	@Static @Overload Java_util_Set getAvailableCurrencies();
	@Virtual @Overload String getCurrencyCode();
	@Virtual @Overload String getDisplayName();
	@Virtual @Overload String getDisplayName(Java_util_Locale p0);
	@Virtual @Overload String getSymbol();
	@Virtual @Overload String getSymbol(Java_util_Locale p0);
	@Virtual @Overload String toString();
	@Virtual @Overload int getDefaultFractionDigits();
	@Virtual @Overload int getNumericCode();
}

/* class java.util.Date */
class Java_util_Date extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean after(Java_util_Date p0);
	@Virtual @Overload boolean before(Java_util_Date p0);
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int compareTo(Java_util_Date p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int getTime();
	@Virtual @Overload void setTime(int p0);
}
@Overload Java_util_Date Java_util_Date.new();
@Overload Java_util_Date Java_util_Date.new(int p0);
@Overload Java_util_Date Java_util_Date.new(int p0, int p1, int p2);
@Overload Java_util_Date Java_util_Date.new(int p0, int p1, int p2, int p3, int p4);
@Overload Java_util_Date Java_util_Date.new(int p0, int p1, int p2, int p3, int p4, int p5);
@Overload Java_util_Date Java_util_Date.new(String p0);

/* interface java.util.Queue */
class Java_util_Queue extends Java_util_Collection {
	/*-- Method --*/
	@Virtual @Overload Object element();
	@Virtual @Overload Object peek();
	@Virtual @Overload Object poll();
	@Virtual @Overload Object remove();
	@Virtual @Overload boolean offer(Object p0);
}

/* interface java.util.Deque */
class Java_util_Deque extends Java_util_Queue {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Object getFirst();
	@Virtual @Overload Object getLast();
	@Virtual @Overload Object peekFirst();
	@Virtual @Overload Object peekLast();
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
	@Virtual @Overload Object pop();
	@Virtual @Overload Object removeFirst();
	@Virtual @Overload Object removeLast();
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
}

/* class java.util.Dictionary */
class Java_util_Dictionary {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration elements();
	@Virtual @Overload Java_util_Enumeration keys();
	@Virtual @Overload Object get(Object p0);
	@Virtual @Overload Object put(Object p0, Object p1);
	@Virtual @Overload Object remove(Object p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload int size();
}
Java_util_Dictionary Java_util_Dictionary.new();

/* class java.util.IllegalFormatException */
class Java_util_IllegalFormatException extends Java_lang_IllegalArgumentException {
}

/* class java.util.DuplicateFormatFlagsException */
class Java_util_DuplicateFormatFlagsException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFlags();
}
Java_util_DuplicateFormatFlagsException Java_util_DuplicateFormatFlagsException.new(String p0);

/* class java.util.EmptyStackException */
class Java_util_EmptyStackException extends Java_lang_RuntimeException {
}
Java_util_EmptyStackException Java_util_EmptyStackException.new();

/* class java.util.EnumMap */
class Java_util_EnumMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_EnumMap clone();
	@Virtual @Overload Object clone();
	@Virtual @Overload Object put(Java_lang_Enum p0, Object p1);
}
@Overload Java_util_EnumMap Java_util_EnumMap.new(Class p0);
@Overload Java_util_EnumMap Java_util_EnumMap.new(Java_util_EnumMap p0);
@Overload Java_util_EnumMap Java_util_EnumMap.new(Java_util_Map p0);

/* class java.util.EnumSet */
class Java_util_EnumSet extends Java_util_AbstractSet {
	/*-- Method --*/
	@Static @Overload Java_util_EnumSet allOf(Class p0);
	@Static @Overload Java_util_EnumSet complementOf(Java_util_EnumSet p0);
	@Static @Overload Java_util_EnumSet copyOf(Java_util_Collection p0);
	@Static @Overload Java_util_EnumSet copyOf(Java_util_EnumSet p0);
	@Static @Overload Java_util_EnumSet noneOf(Class p0);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0, Java_lang_Enum p1);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0, Java_lang_Enum p1, Java_lang_Enum p2);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0, Java_lang_Enum p1, Java_lang_Enum p2, Java_lang_Enum p3);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0, Java_lang_Enum p1, Java_lang_Enum p2, Java_lang_Enum p3, Java_lang_Enum p4);
	@Static @Overload Java_util_EnumSet of(Java_lang_Enum p0, Java_lang_Enum[] p1);
	@Static @Overload Java_util_EnumSet range(Java_lang_Enum p0, Java_lang_Enum p1);
	@Virtual @Overload Java_util_EnumSet clone();
	@Virtual @Overload Object clone();
}

/* interface java.util.Enumeration */
class Java_util_Enumeration {
	/*-- Method --*/
	@Virtual @Overload Object nextElement();
	@Virtual @Overload boolean hasMoreElements();
}

/* interface java.util.EventListener */
class Java_util_EventListener {
}

/* class java.util.EventListenerProxy */
class Java_util_EventListenerProxy extends Java_util_EventListener {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener getListener();
}
Java_util_EventListenerProxy Java_util_EventListenerProxy.new(Java_util_EventListener p0);

/* class java.util.EventObject */
class Java_util_EventObject extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Object getSource();
	@Virtual @Overload String toString();
}
Java_util_EventObject Java_util_EventObject.new(Object p0);

/* class java.util.FormatFlagsConversionMismatchException */
class Java_util_FormatFlagsConversionMismatchException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFlags();
	@Virtual @Overload int getConversion();
}
Java_util_FormatFlagsConversionMismatchException Java_util_FormatFlagsConversionMismatchException.new(String p0, int p1);

/* interface java.util.Formattable */
class Java_util_Formattable {
	/*-- Method --*/
	@Virtual @Overload void formatTo(Java_util_Formatter p0, int p1, int p2, int p3);
}

/* class java.util.FormattableFlags */
class Java_util_FormattableFlags {
}

/* class java.util.Formatter */
class Java_util_Formatter extends Java_io_Closeable {
	/*-- Method --*/
	@Virtual @Overload Java_io_IOException ioException();
	@Virtual @Overload Java_lang_Appendable out();
	@Virtual @Overload Java_util_Locale locale();
	@Virtual @Overload String toString();
	@Virtual @Overload void flush();
}
@Overload Java_util_Formatter Java_util_Formatter.new();
@Overload Java_util_Formatter Java_util_Formatter.new(Java_lang_Appendable p0);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_util_Locale p0);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_lang_Appendable p0, Java_util_Locale p1);
@Overload Java_util_Formatter Java_util_Formatter.new(String p0);
@Overload Java_util_Formatter Java_util_Formatter.new(String p0, String p1);
@Overload Java_util_Formatter Java_util_Formatter.new(String p0, String p1, Java_util_Locale p2);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_File p0);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_File p0, String p1);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_File p0, String p1, Java_util_Locale p2);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_PrintStream p0);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_OutputStream p0);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_OutputStream p0, String p1);
@Overload Java_util_Formatter Java_util_Formatter.new(Java_io_OutputStream p0, String p1, Java_util_Locale p2);

/* class java.util.FormatterClosedException */
class Java_util_FormatterClosedException extends Java_lang_IllegalStateException {
}
Java_util_FormatterClosedException Java_util_FormatterClosedException.new();

/* class java.util.GregorianCalendar */
class Java_util_GregorianCalendar extends Java_util_Calendar {
	/*-- Method --*/
	@Virtual @Overload Java_util_Date getGregorianChange();
	@Virtual @Overload boolean isLeapYear(int p0);
	@Virtual @Overload void setGregorianChange(Java_util_Date p0);
}
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new();
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(Java_util_TimeZone p0);
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(Java_util_Locale p0);
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(Java_util_TimeZone p0, Java_util_Locale p1);
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(int p0, int p1, int p2);
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(int p0, int p1, int p2, int p3, int p4);
@Overload Java_util_GregorianCalendar Java_util_GregorianCalendar.new(int p0, int p1, int p2, int p3, int p4, int p5);

/* class java.util.HashMap */
class Java_util_HashMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Object clone();
}
@Overload Java_util_HashMap Java_util_HashMap.new(int p0, float p1);
@Overload Java_util_HashMap Java_util_HashMap.new(int p0);
@Overload Java_util_HashMap Java_util_HashMap.new();
@Overload Java_util_HashMap Java_util_HashMap.new(Java_util_Map p0);

/* class java.util.HashSet */
class Java_util_HashSet extends Java_util_AbstractSet {
	/*-- Method --*/
	@Virtual @Overload Object clone();
}
@Overload Java_util_HashSet Java_util_HashSet.new();
@Overload Java_util_HashSet Java_util_HashSet.new(Java_util_Collection p0);
@Overload Java_util_HashSet Java_util_HashSet.new(int p0, float p1);
@Overload Java_util_HashSet Java_util_HashSet.new(int p0);

/* class java.util.Hashtable */
class Java_util_Hashtable extends Java_util_Dictionary {
	/*-- Method --*/
	@Virtual @Overload Java_util_Collection values();
	@Virtual @Overload Java_util_Set entrySet();
	@Virtual @Overload Java_util_Set keySet();
	@Virtual @Overload Object clone();
	@Virtual @Overload boolean contains(Object p0);
	@Virtual @Overload boolean containsKey(Object p0);
	@Virtual @Overload boolean containsValue(Object p0);
	@Virtual @Overload void clear();
	@Virtual @Overload void putAll(Java_util_Map p0);
}
@Overload Java_util_Hashtable Java_util_Hashtable.new(int p0, float p1);
@Overload Java_util_Hashtable Java_util_Hashtable.new(int p0);
@Overload Java_util_Hashtable Java_util_Hashtable.new();
@Overload Java_util_Hashtable Java_util_Hashtable.new(Java_util_Map p0);

/* class java.util.IdentityHashMap */
class Java_util_IdentityHashMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Object clone();
}
@Overload Java_util_IdentityHashMap Java_util_IdentityHashMap.new();
@Overload Java_util_IdentityHashMap Java_util_IdentityHashMap.new(int p0);
@Overload Java_util_IdentityHashMap Java_util_IdentityHashMap.new(Java_util_Map p0);

/* class java.util.IllegalFormatCodePointException */
class Java_util_IllegalFormatCodePointException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload int getCodePoint();
}
Java_util_IllegalFormatCodePointException Java_util_IllegalFormatCodePointException.new(int p0);

/* class java.util.IllegalFormatConversionException */
class Java_util_IllegalFormatConversionException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload Class getArgumentClass();
	@Virtual @Overload int getConversion();
}
Java_util_IllegalFormatConversionException Java_util_IllegalFormatConversionException.new(int p0, Class p1);

/* class java.util.IllegalFormatFlagsException */
class Java_util_IllegalFormatFlagsException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFlags();
}
Java_util_IllegalFormatFlagsException Java_util_IllegalFormatFlagsException.new(String p0);

/* class java.util.IllegalFormatPrecisionException */
class Java_util_IllegalFormatPrecisionException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload int getPrecision();
}
Java_util_IllegalFormatPrecisionException Java_util_IllegalFormatPrecisionException.new(int p0);

/* class java.util.IllegalFormatWidthException */
class Java_util_IllegalFormatWidthException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload int getWidth();
}
Java_util_IllegalFormatWidthException Java_util_IllegalFormatWidthException.new(int p0);

/* class java.util.IllformedLocaleException */
class Java_util_IllformedLocaleException extends Java_lang_RuntimeException {
	/*-- Method --*/
	@Virtual @Overload int getErrorIndex();
}
@Overload Java_util_IllformedLocaleException Java_util_IllformedLocaleException.new();
@Overload Java_util_IllformedLocaleException Java_util_IllformedLocaleException.new(String p0);
@Overload Java_util_IllformedLocaleException Java_util_IllformedLocaleException.new(String p0, int p1);

/* class java.util.NoSuchElementException */
class Java_util_NoSuchElementException extends Java_lang_RuntimeException {
}
@Overload Java_util_NoSuchElementException Java_util_NoSuchElementException.new();
@Overload Java_util_NoSuchElementException Java_util_NoSuchElementException.new(String p0);

/* class java.util.InputMismatchException */
class Java_util_InputMismatchException extends Java_util_NoSuchElementException {
}
@Overload Java_util_InputMismatchException Java_util_InputMismatchException.new();
@Overload Java_util_InputMismatchException Java_util_InputMismatchException.new(String p0);

/* class java.util.InvalidPropertiesFormatException */
class Java_util_InvalidPropertiesFormatException extends Java_io_IOException {
}
@Overload Java_util_InvalidPropertiesFormatException Java_util_InvalidPropertiesFormatException.new(Java_lang_Throwable p0);
@Overload Java_util_InvalidPropertiesFormatException Java_util_InvalidPropertiesFormatException.new(String p0);

/* interface java.util.Iterator */
class Java_util_Iterator {
	/*-- Method --*/
	@Virtual @Overload Object next();
	@Virtual @Overload boolean hasNext();
	@Virtual @Overload void remove();
}

/* class java.util.LinkedHashMap */
class Java_util_LinkedHashMap extends Java_util_HashMap {
}
@Overload Java_util_LinkedHashMap Java_util_LinkedHashMap.new(int p0, float p1);
@Overload Java_util_LinkedHashMap Java_util_LinkedHashMap.new(int p0);
@Overload Java_util_LinkedHashMap Java_util_LinkedHashMap.new();
@Overload Java_util_LinkedHashMap Java_util_LinkedHashMap.new(Java_util_Map p0);
@Overload Java_util_LinkedHashMap Java_util_LinkedHashMap.new(int p0, float p1, boolean p2);

/* class java.util.LinkedHashSet */
class Java_util_LinkedHashSet extends Java_util_HashSet {
}
@Overload Java_util_LinkedHashSet Java_util_LinkedHashSet.new(int p0, float p1);
@Overload Java_util_LinkedHashSet Java_util_LinkedHashSet.new(int p0);
@Overload Java_util_LinkedHashSet Java_util_LinkedHashSet.new();
@Overload Java_util_LinkedHashSet Java_util_LinkedHashSet.new(Java_util_Collection p0);

/* class java.util.LinkedList */
class Java_util_LinkedList extends Java_util_AbstractSequentialList {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Object clone();
	@Virtual @Overload Object element();
	@Virtual @Overload Object getFirst();
	@Virtual @Overload Object getLast();
	@Virtual @Overload Object peek();
	@Virtual @Overload Object peekFirst();
	@Virtual @Overload Object peekLast();
	@Virtual @Overload Object poll();
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
	@Virtual @Overload Object pop();
	@Virtual @Overload Object remove();
	@Virtual @Overload Object removeFirst();
	@Virtual @Overload Object removeLast();
	@Virtual @Overload boolean offer(Object p0);
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
}
@Overload Java_util_LinkedList Java_util_LinkedList.new();
@Overload Java_util_LinkedList Java_util_LinkedList.new(Java_util_Collection p0);

/* interface java.util.List */
class Java_util_List extends Java_util_Collection {
	/*-- Method --*/
	@Virtual @Overload Java_util_List subList(int p0, int p1);
	@Virtual @Overload Java_util_ListIterator listIterator();
	@Virtual @Overload Java_util_ListIterator listIterator(int p0);
	@Virtual @Overload Object get(int p0);
	@Virtual @Overload Object remove(int p0);
	@Virtual @Overload Object set(int p0, Object p1);
	@Virtual @Overload boolean addAll(int p0, Java_util_Collection p1);
	@Virtual @Overload int indexOf(Object p0);
	@Virtual @Overload int lastIndexOf(Object p0);
	@Virtual @Overload void add(int p0, Object p1);
}

/* interface java.util.ListIterator */
class Java_util_ListIterator extends Java_util_Iterator {
	/*-- Method --*/
	@Virtual @Overload Object previous();
	@Virtual @Overload boolean hasPrevious();
	@Virtual @Overload int nextIndex();
	@Virtual @Overload int previousIndex();
	@Virtual @Overload void add(Object p0);
	@Virtual @Overload void set(Object p0);
}

/* class java.util.ResourceBundle */
class Java_util_ResourceBundle {
	/*-- Method --*/
	@Static @Overload Java_util_ResourceBundle getBundle(String p0);
	@Static @Overload Java_util_ResourceBundle getBundle(String p0, Java_util_Locale p1);
	@Static @Overload Java_util_ResourceBundle getBundle(String p0, Java_util_Locale p1, Java_lang_ClassLoader p2);
	@Static @Overload Java_util_ResourceBundle getBundle(String p0, Java_util_Locale p1, Java_lang_ClassLoader p2, Java_util_ResourceBundle_Control p3);
	@Static @Overload Java_util_ResourceBundle getBundle(String p0, Java_util_Locale p1, Java_util_ResourceBundle_Control p2);
	@Static @Overload Java_util_ResourceBundle getBundle(String p0, Java_util_ResourceBundle_Control p1);
	@Static @Overload void clearCache();
	@Static @Overload void clearCache(Java_lang_ClassLoader p0);
	@Virtual @Overload Java_util_Enumeration getKeys();
	@Virtual @Overload Java_util_Locale getLocale();
	@Virtual @Overload Java_util_Set keySet();
	@Virtual @Overload Object getObject(String p0);
	@Virtual @Overload String getString(String p0);
	@Virtual @Overload String[] getStringArray(String p0);
	@Virtual @Overload boolean containsKey(String p0);
}
Java_util_ResourceBundle Java_util_ResourceBundle.new();

/* class java.util.ListResourceBundle */
class Java_util_ListResourceBundle extends Java_util_ResourceBundle {
	/*-- Method --*/
	@Virtual @Overload Object handleGetObject(String p0);
}
Java_util_ListResourceBundle Java_util_ListResourceBundle.new();

/* class java.util.Locale */
class Java_util_Locale extends Java_lang_Cloneable {
	/*-- Method --*/
	@Static @Overload Java_util_Locale forLanguageTag(String p0);
	@Static @Overload Java_util_Locale getDefault();
	@Static @Overload Java_util_Locale getDefault(Java_util_Locale_Category p0);
	@Static @Overload Java_util_Locale[] getAvailableLocales();
	@Static @Overload String[] getISOCountries();
	@Static @Overload String[] getISOLanguages();
	@Static @Overload void setDefault(Java_util_Locale p0);
	@Static @Overload void setDefault(Java_util_Locale_Category p0, Java_util_Locale p1);
	@Virtual @Overload Java_util_Set getExtensionKeys();
	@Virtual @Overload Java_util_Set getUnicodeLocaleAttributes();
	@Virtual @Overload Java_util_Set getUnicodeLocaleKeys();
	@Virtual @Overload Object clone();
	@Virtual @Overload String getCountry();
	@Virtual @Overload String getDisplayCountry();
	@Virtual @Overload String getDisplayCountry(Java_util_Locale p0);
	@Virtual @Overload String getDisplayLanguage();
	@Virtual @Overload String getDisplayLanguage(Java_util_Locale p0);
	@Virtual @Overload String getDisplayName();
	@Virtual @Overload String getDisplayName(Java_util_Locale p0);
	@Virtual @Overload String getDisplayScript();
	@Virtual @Overload String getDisplayScript(Java_util_Locale p0);
	@Virtual @Overload String getDisplayVariant();
	@Virtual @Overload String getDisplayVariant(Java_util_Locale p0);
	@Virtual @Overload String getExtension(int p0);
	@Virtual @Overload String getISO3Country();
	@Virtual @Overload String getISO3Language();
	@Virtual @Overload String getLanguage();
	@Virtual @Overload String getScript();
	@Virtual @Overload String getUnicodeLocaleType(String p0);
	@Virtual @Overload String getVariant();
	@Virtual @Overload String toLanguageTag();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
}
@Overload Java_util_Locale Java_util_Locale.new(String p0, String p1, String p2);
@Overload Java_util_Locale Java_util_Locale.new(String p0, String p1);
@Overload Java_util_Locale Java_util_Locale.new(String p0);

/* class java.util.MissingFormatArgumentException */
class Java_util_MissingFormatArgumentException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFormatSpecifier();
}
Java_util_MissingFormatArgumentException Java_util_MissingFormatArgumentException.new(String p0);

/* class java.util.MissingFormatWidthException */
class Java_util_MissingFormatWidthException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFormatSpecifier();
}
Java_util_MissingFormatWidthException Java_util_MissingFormatWidthException.new(String p0);

/* class java.util.MissingResourceException */
class Java_util_MissingResourceException extends Java_lang_RuntimeException {
	/*-- Method --*/
	@Virtual @Overload String getClassName();
	@Virtual @Overload String getKey();
}
Java_util_MissingResourceException Java_util_MissingResourceException.new(String p0, String p1, String p2);

/* interface java.util.SortedMap */
class Java_util_SortedMap extends Java_util_Map {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_SortedMap headMap(Object p0);
	@Virtual @Overload Java_util_SortedMap subMap(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedMap tailMap(Object p0);
	@Virtual @Overload Object firstKey();
	@Virtual @Overload Object lastKey();
}

/* interface java.util.NavigableMap */
class Java_util_NavigableMap extends Java_util_SortedMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_Map_Entry ceilingEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry firstEntry();
	@Virtual @Overload Java_util_Map_Entry floorEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry higherEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry lastEntry();
	@Virtual @Overload Java_util_Map_Entry lowerEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry pollFirstEntry();
	@Virtual @Overload Java_util_Map_Entry pollLastEntry();
	@Virtual @Overload Java_util_NavigableMap descendingMap();
	@Virtual @Overload Java_util_NavigableMap headMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableMap subMap(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableMap tailMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet descendingKeySet();
	@Virtual @Overload Java_util_NavigableSet navigableKeySet();
	@Virtual @Overload Object ceilingKey(Object p0);
	@Virtual @Overload Object floorKey(Object p0);
	@Virtual @Overload Object higherKey(Object p0);
	@Virtual @Overload Object lowerKey(Object p0);
}

/* interface java.util.Set */
class Java_util_Set extends Java_util_Collection {
}

/* interface java.util.SortedSet */
class Java_util_SortedSet extends Java_util_Set {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_SortedSet headSet(Object p0);
	@Virtual @Overload Java_util_SortedSet subSet(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedSet tailSet(Object p0);
	@Virtual @Overload Object first();
	@Virtual @Overload Object last();
}

/* interface java.util.NavigableSet */
class Java_util_NavigableSet extends Java_util_SortedSet {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Java_util_NavigableSet descendingSet();
	@Virtual @Overload Java_util_NavigableSet headSet(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet subSet(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableSet tailSet(Object p0, boolean p1);
	@Virtual @Overload Object ceiling(Object p0);
	@Virtual @Overload Object floor(Object p0);
	@Virtual @Overload Object higher(Object p0);
	@Virtual @Overload Object lower(Object p0);
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
}

/* class java.util.Objects */
class Java_util_Objects {
	/*-- Method --*/
	@Static @Overload Object requireNonNull(Object p0);
	@Static @Overload Object requireNonNull(Object p0, String p1);
	@Static @Overload String toString(Object p0);
	@Static @Overload String toString(Object p0, String p1);
	@Static @Overload boolean deepEquals(Object p0, Object p1);
	@Static @Overload boolean equals(Object p0, Object p1);
	@Static @Overload int compare(Object p0, Object p1, Java_util_Comparator p2);
	@Static @Overload int hash(Object[] p0);
}

/* class java.util.Observable */
class Java_util_Observable {
	/*-- Method --*/
	@Virtual @Overload boolean hasChanged();
	@Virtual @Overload int countObservers();
	@Virtual @Overload void addObserver(Java_util_Observer p0);
	@Virtual @Overload void deleteObserver(Java_util_Observer p0);
	@Virtual @Overload void deleteObservers();
	@Virtual @Overload void notifyObservers();
	@Virtual @Overload void notifyObservers(Object p0);
}
Java_util_Observable Java_util_Observable.new();

/* interface java.util.Observer */
class Java_util_Observer {
	/*-- Method --*/
	@Virtual @Overload void update(Java_util_Observable p0, Object p1);
}

/* class java.util.PriorityQueue */
class Java_util_PriorityQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
}
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new();
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new(int p0);
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new(int p0, Java_util_Comparator p1);
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new(Java_util_Collection p0);
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new(Java_util_PriorityQueue p0);
@Overload Java_util_PriorityQueue Java_util_PriorityQueue.new(Java_util_SortedSet p0);

/* class java.util.Properties */
class Java_util_Properties extends Java_util_Hashtable {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration propertyNames();
	@Virtual @Overload Java_util_Set stringPropertyNames();
	@Virtual @Overload Object setProperty(String p0, String p1);
	@Virtual @Overload String getProperty(String p0);
	@Virtual @Overload String getProperty(String p0, String p1);
	@Virtual @Overload void list(Java_io_PrintStream p0);
	@Virtual @Overload void list(Java_io_PrintWriter p0);
	@Virtual @Overload void load(Java_io_InputStream p0);
	@Virtual @Overload void load(Java_io_Reader p0);
	@Virtual @Overload void loadFromXML(Java_io_InputStream p0);
	@Virtual @Overload void store(Java_io_OutputStream p0, String p1);
	@Virtual @Overload void store(Java_io_Writer p0, String p1);
	@Virtual @Overload void storeToXML(Java_io_OutputStream p0, String p1);
	@Virtual @Overload void storeToXML(Java_io_OutputStream p0, String p1, String p2);
}
@Overload Java_util_Properties Java_util_Properties.new();
@Overload Java_util_Properties Java_util_Properties.new(Java_util_Properties p0);

/* class java.util.PropertyPermission */
class Java_util_PropertyPermission extends Java_security_BasicPermission {
}
Java_util_PropertyPermission Java_util_PropertyPermission.new(String p0, String p1);

/* class java.util.PropertyResourceBundle */
class Java_util_PropertyResourceBundle extends Java_util_ResourceBundle {
	/*-- Method --*/
	@Virtual @Overload Object handleGetObject(String p0);
}
@Overload Java_util_PropertyResourceBundle Java_util_PropertyResourceBundle.new(Java_io_InputStream p0);
@Overload Java_util_PropertyResourceBundle Java_util_PropertyResourceBundle.new(Java_io_Reader p0);

/* class java.util.Random */
class Java_util_Random extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload boolean nextBoolean();
	@Virtual @Overload float nextDouble();
	@Virtual @Overload float nextFloat();
	@Virtual @Overload float nextGaussian();
	@Virtual @Overload int nextInt();
	@Virtual @Overload int nextInt(int p0);
	@Virtual @Overload int nextLong();
	@Virtual @Overload void nextBytes(int[] p0);
	@Virtual @Overload void setSeed(int p0);
}
@Overload Java_util_Random Java_util_Random.new();
@Overload Java_util_Random Java_util_Random.new(int p0);

/* interface java.util.RandomAccess */
class Java_util_RandomAccess {
}

/* class java.util.Scanner */
class Java_util_Scanner extends Java_util_Iterator {
	/*-- Method --*/
	@Virtual @Overload Java_io_IOException ioException();
	@Virtual @Overload Java_math_BigDecimal nextBigDecimal();
	@Virtual @Overload Java_math_BigInteger nextBigInteger();
	@Virtual @Overload Java_math_BigInteger nextBigInteger(int p0);
	@Virtual @Overload Java_util_Locale locale();
	@Virtual @Overload Java_util_Scanner reset();
	@Virtual @Overload Java_util_Scanner skip(Java_util_regex_Pattern p0);
	@Virtual @Overload Java_util_Scanner skip(String p0);
	@Virtual @Overload Java_util_Scanner useDelimiter(Java_util_regex_Pattern p0);
	@Virtual @Overload Java_util_Scanner useDelimiter(String p0);
	@Virtual @Overload Java_util_Scanner useLocale(Java_util_Locale p0);
	@Virtual @Overload Java_util_Scanner useRadix(int p0);
	@Virtual @Overload Java_util_regex_Pattern delimiter();
	@Virtual @Overload String findInLine(Java_util_regex_Pattern p0);
	@Virtual @Overload String findInLine(String p0);
	@Virtual @Overload String findWithinHorizon(Java_util_regex_Pattern p0, int p1);
	@Virtual @Overload String findWithinHorizon(String p0, int p1);
	@Virtual @Overload String next(Java_util_regex_Pattern p0);
	@Virtual @Overload String next(String p0);
	@Virtual @Overload String nextLine();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean hasNext(Java_util_regex_Pattern p0);
	@Virtual @Overload boolean hasNext(String p0);
	@Virtual @Overload boolean hasNextBigDecimal();
	@Virtual @Overload boolean hasNextBigInteger();
	@Virtual @Overload boolean hasNextBigInteger(int p0);
	@Virtual @Overload boolean hasNextBoolean();
	@Virtual @Overload boolean hasNextByte();
	@Virtual @Overload boolean hasNextByte(int p0);
	@Virtual @Overload boolean hasNextDouble();
	@Virtual @Overload boolean hasNextFloat();
	@Virtual @Overload boolean hasNextInt();
	@Virtual @Overload boolean hasNextInt(int p0);
	@Virtual @Overload boolean hasNextLine();
	@Virtual @Overload boolean hasNextLong();
	@Virtual @Overload boolean hasNextLong(int p0);
	@Virtual @Overload boolean hasNextShort();
	@Virtual @Overload boolean hasNextShort(int p0);
	@Virtual @Overload boolean nextBoolean();
	@Virtual @Overload float nextDouble();
	@Virtual @Overload float nextFloat();
	@Virtual @Overload int nextByte();
	@Virtual @Overload int nextByte(int p0);
	@Virtual @Overload int nextInt();
	@Virtual @Overload int nextInt(int p0);
	@Virtual @Overload int nextLong();
	@Virtual @Overload int nextLong(int p0);
	@Virtual @Overload int nextShort();
	@Virtual @Overload int nextShort(int p0);
	@Virtual @Overload int radix();
	@Virtual @Overload void close();
}
@Overload Java_util_Scanner Java_util_Scanner.new(Java_lang_Readable p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_io_InputStream p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_io_InputStream p0, String p1);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_io_File p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_io_File p0, String p1);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_nio_file_Path p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_nio_file_Path p0, String p1);
@Overload Java_util_Scanner Java_util_Scanner.new(String p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_nio_channels_ReadableByteChannel p0);
@Overload Java_util_Scanner Java_util_Scanner.new(Java_nio_channels_ReadableByteChannel p0, String p1);

/* class java.util.ServiceConfigurationError */
class Java_util_ServiceConfigurationError extends Java_lang_Error {
}
@Overload Java_util_ServiceConfigurationError Java_util_ServiceConfigurationError.new(String p0);
@Overload Java_util_ServiceConfigurationError Java_util_ServiceConfigurationError.new(String p0, Java_lang_Throwable p1);

/* class java.util.ServiceLoader */
class Java_util_ServiceLoader extends Java_lang_Iterable {
	/*-- Method --*/
	@Static @Overload Java_util_ServiceLoader load(Class p0);
	@Static @Overload Java_util_ServiceLoader load(Class p0, Java_lang_ClassLoader p1);
	@Static @Overload Java_util_ServiceLoader loadInstalled(Class p0);
	@Virtual @Overload String toString();
	@Virtual @Overload void reload();
}

/* class java.util.TimeZone */
class Java_util_TimeZone extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_util_TimeZone getDefault();
	@Static @Overload Java_util_TimeZone getTimeZone(String p0);
	@Static @Overload String[] getAvailableIDs();
	@Static @Overload String[] getAvailableIDs(int p0);
	@Static @Overload void setDefault(Java_util_TimeZone p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload String getDisplayName();
	@Virtual @Overload String getDisplayName(Java_util_Locale p0);
	@Virtual @Overload String getDisplayName(boolean p0, int p1);
	@Virtual @Overload String getDisplayName(boolean p0, int p1, Java_util_Locale p2);
	@Virtual @Overload String getID();
	@Virtual @Overload boolean hasSameRules(Java_util_TimeZone p0);
	@Virtual @Overload boolean inDaylightTime(Java_util_Date p0);
	@Virtual @Overload boolean observesDaylightTime();
	@Virtual @Overload boolean useDaylightTime();
	@Virtual @Overload int getDSTSavings();
	@Virtual @Overload int getOffset(int p0);
	@Virtual @Overload int getOffset(int p0, int p1, int p2, int p3, int p4, int p5);
	@Virtual @Overload int getRawOffset();
	@Virtual @Overload void setID(String p0);
	@Virtual @Overload void setRawOffset(int p0);
}
Java_util_TimeZone Java_util_TimeZone.new();

/* class java.util.SimpleTimeZone */
class Java_util_SimpleTimeZone extends Java_util_TimeZone {
	/*-- Method --*/
	@Virtual @Overload void setDSTSavings(int p0);
	@Virtual @Overload void setEndRule(int p0, int p1, int p2);
	@Virtual @Overload void setEndRule(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setEndRule(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void setStartRule(int p0, int p1, int p2);
	@Virtual @Overload void setStartRule(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setStartRule(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void setStartYear(int p0);
}
@Overload Java_util_SimpleTimeZone Java_util_SimpleTimeZone.new(int p0, String p1);
@Overload Java_util_SimpleTimeZone Java_util_SimpleTimeZone.new(int p0, String p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9);
@Overload Java_util_SimpleTimeZone Java_util_SimpleTimeZone.new(int p0, String p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10);
@Overload Java_util_SimpleTimeZone Java_util_SimpleTimeZone.new(int p0, String p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11, int p12);

/* class java.util.Vector */
class Java_util_Vector extends Java_util_AbstractList {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration elements();
	@Virtual @Overload Object clone();
	@Virtual @Overload Object elementAt(int p0);
	@Virtual @Overload Object firstElement();
	@Virtual @Overload Object lastElement();
	@Virtual @Overload boolean removeElement(Object p0);
	@Virtual @Overload int capacity();
	@Virtual @Overload int indexOf(Object p0, int p1);
	@Virtual @Overload int lastIndexOf(Object p0, int p1);
	@Virtual @Overload void addElement(Object p0);
	@Virtual @Overload void copyInto(Object[] p0);
	@Virtual @Overload void ensureCapacity(int p0);
	@Virtual @Overload void insertElementAt(Object p0, int p1);
	@Virtual @Overload void removeAllElements();
	@Virtual @Overload void removeElementAt(int p0);
	@Virtual @Overload void setElementAt(Object p0, int p1);
	@Virtual @Overload void setSize(int p0);
	@Virtual @Overload void trimToSize();
}
@Overload Java_util_Vector Java_util_Vector.new(int p0, int p1);
@Overload Java_util_Vector Java_util_Vector.new(int p0);
@Overload Java_util_Vector Java_util_Vector.new();
@Overload Java_util_Vector Java_util_Vector.new(Java_util_Collection p0);

/* class java.util.Stack */
class Java_util_Stack extends Java_util_Vector {
	/*-- Method --*/
	@Virtual @Overload Object peek();
	@Virtual @Overload Object pop();
	@Virtual @Overload Object push(Object p0);
	@Virtual @Overload boolean empty();
	@Virtual @Overload int search(Object p0);
}
Java_util_Stack Java_util_Stack.new();

/* class java.util.StringTokenizer */
class Java_util_StringTokenizer extends Java_util_Enumeration {
	/*-- Method --*/
	@Virtual @Overload String nextToken();
	@Virtual @Overload String nextToken(String p0);
	@Virtual @Overload boolean hasMoreTokens();
	@Virtual @Overload int countTokens();
}
@Overload Java_util_StringTokenizer Java_util_StringTokenizer.new(String p0, String p1, boolean p2);
@Overload Java_util_StringTokenizer Java_util_StringTokenizer.new(String p0, String p1);
@Overload Java_util_StringTokenizer Java_util_StringTokenizer.new(String p0);

/* class java.util.Timer */
class Java_util_Timer {
	/*-- Method --*/
	@Virtual @Overload int purge();
	@Virtual @Overload void cancel();
	@Virtual @Overload void schedule(Java_util_TimerTask p0, Java_util_Date p1);
	@Virtual @Overload void schedule(Java_util_TimerTask p0, Java_util_Date p1, int p2);
	@Virtual @Overload void schedule(Java_util_TimerTask p0, int p1);
	@Virtual @Overload void schedule(Java_util_TimerTask p0, int p1, int p2);
	@Virtual @Overload void scheduleAtFixedRate(Java_util_TimerTask p0, Java_util_Date p1, int p2);
	@Virtual @Overload void scheduleAtFixedRate(Java_util_TimerTask p0, int p1, int p2);
}
@Overload Java_util_Timer Java_util_Timer.new();
@Overload Java_util_Timer Java_util_Timer.new(boolean p0);
@Overload Java_util_Timer Java_util_Timer.new(String p0);
@Overload Java_util_Timer Java_util_Timer.new(String p0, boolean p1);

/* class java.util.TimerTask */
class Java_util_TimerTask extends Java_lang_Runnable {
	/*-- Method --*/
	@Virtual @Overload boolean cancel();
	@Virtual @Overload int scheduledExecutionTime();
}

/* class java.util.TooManyListenersException */
class Java_util_TooManyListenersException extends Java_lang_Exception {
}
@Overload Java_util_TooManyListenersException Java_util_TooManyListenersException.new();
@Overload Java_util_TooManyListenersException Java_util_TooManyListenersException.new(String p0);

/* class java.util.TreeMap */
class Java_util_TreeMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_Map_Entry ceilingEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry firstEntry();
	@Virtual @Overload Java_util_Map_Entry floorEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry higherEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry lastEntry();
	@Virtual @Overload Java_util_Map_Entry lowerEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry pollFirstEntry();
	@Virtual @Overload Java_util_Map_Entry pollLastEntry();
	@Virtual @Overload Java_util_NavigableMap descendingMap();
	@Virtual @Overload Java_util_NavigableMap headMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableMap subMap(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableMap tailMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet descendingKeySet();
	@Virtual @Overload Java_util_NavigableSet navigableKeySet();
	@Virtual @Overload Java_util_SortedMap headMap(Object p0);
	@Virtual @Overload Java_util_SortedMap subMap(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedMap tailMap(Object p0);
	@Virtual @Overload Object ceilingKey(Object p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload Object firstKey();
	@Virtual @Overload Object floorKey(Object p0);
	@Virtual @Overload Object higherKey(Object p0);
	@Virtual @Overload Object lastKey();
	@Virtual @Overload Object lowerKey(Object p0);
}
@Overload Java_util_TreeMap Java_util_TreeMap.new();
@Overload Java_util_TreeMap Java_util_TreeMap.new(Java_util_Comparator p0);
@Overload Java_util_TreeMap Java_util_TreeMap.new(Java_util_Map p0);
@Overload Java_util_TreeMap Java_util_TreeMap.new(Java_util_SortedMap p0);

/* class java.util.TreeSet */
class Java_util_TreeSet extends Java_util_AbstractSet {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Java_util_NavigableSet descendingSet();
	@Virtual @Overload Java_util_NavigableSet headSet(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet subSet(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableSet tailSet(Object p0, boolean p1);
	@Virtual @Overload Java_util_SortedSet headSet(Object p0);
	@Virtual @Overload Java_util_SortedSet subSet(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedSet tailSet(Object p0);
	@Virtual @Overload Object ceiling(Object p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload Object first();
	@Virtual @Overload Object floor(Object p0);
	@Virtual @Overload Object higher(Object p0);
	@Virtual @Overload Object last();
	@Virtual @Overload Object lower(Object p0);
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
}
@Overload Java_util_TreeSet Java_util_TreeSet.new();
@Overload Java_util_TreeSet Java_util_TreeSet.new(Java_util_Comparator p0);
@Overload Java_util_TreeSet Java_util_TreeSet.new(Java_util_Collection p0);
@Overload Java_util_TreeSet Java_util_TreeSet.new(Java_util_SortedSet p0);

/* class java.util.UUID */
class Java_util_UUID extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_util_UUID fromString(String p0);
	@Static @Overload Java_util_UUID nameUUIDFromBytes(int[] p0);
	@Static @Overload Java_util_UUID randomUUID();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean equals(Object p0);
	@Virtual @Overload int clockSequence();
	@Virtual @Overload int compareTo(Java_util_UUID p0);
	@Virtual @Overload int compareTo(Object p0);
	@Virtual @Overload int getLeastSignificantBits();
	@Virtual @Overload int getMostSignificantBits();
	@Virtual @Overload int node();
	@Virtual @Overload int timestamp();
	@Virtual @Overload int variant();
	@Virtual @Overload int version();
}
Java_util_UUID Java_util_UUID.new(int p0, int p1);

/* class java.util.UnknownFormatConversionException */
class Java_util_UnknownFormatConversionException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getConversion();
}
Java_util_UnknownFormatConversionException Java_util_UnknownFormatConversionException.new(String p0);

/* class java.util.UnknownFormatFlagsException */
class Java_util_UnknownFormatFlagsException extends Java_util_IllegalFormatException {
	/*-- Method --*/
	@Virtual @Overload String getFlags();
}
Java_util_UnknownFormatFlagsException Java_util_UnknownFormatFlagsException.new(String p0);

/* class java.util.WeakHashMap */
class Java_util_WeakHashMap extends Java_util_AbstractMap {
}
@Overload Java_util_WeakHashMap Java_util_WeakHashMap.new(int p0, float p1);
@Overload Java_util_WeakHashMap Java_util_WeakHashMap.new(int p0);
@Overload Java_util_WeakHashMap Java_util_WeakHashMap.new();
@Overload Java_util_WeakHashMap Java_util_WeakHashMap.new(Java_util_Map p0);

/*============================================================*/
/* java package java.util.concurrent */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Serializable;
class Java_lang_Comparable;
class Java_lang_Enum;
class Java_lang_Exception;
class Java_lang_IllegalStateException;
class Java_lang_Runnable;
class Java_lang_RuntimeException;
class Java_lang_Thread;
class Java_lang_Thread_UncaughtExceptionHandler;
class Java_lang_Throwable;
class Java_security_PrivilegedAction;
class Java_security_PrivilegedExceptionAction;
class Java_util_AbstractCollection;
class Java_util_AbstractMap;
class Java_util_AbstractQueue;
class Java_util_AbstractSet;
class Java_util_Collection;
class Java_util_Comparator;
class Java_util_Enumeration;
class Java_util_Iterator;
class Java_util_List;
class Java_util_Map;
class Java_util_Map_Entry;
class Java_util_NavigableMap;
class Java_util_NavigableSet;
class Java_util_Queue;
class Java_util_Random;
class Java_util_SortedMap;
class Java_util_SortedSet;
class Java_util_concurrent_ForkJoinPool_ForkJoinWorkerThreadFactory;
class Java_util_concurrent_ForkJoinPool_ManagedBlocker;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_util_concurrent_Executor;
class Java_util_concurrent_ExecutorService extends Java_util_concurrent_Executor;
class Java_util_concurrent_AbstractExecutorService extends Java_util_concurrent_ExecutorService;
class Java_util_concurrent_ArrayBlockingQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_BlockingQueue extends Java_util_Queue;
class Java_util_concurrent_BlockingDeque extends Java_util_concurrent_BlockingQueue;
class Java_util_concurrent_BrokenBarrierException extends Java_lang_Exception;
class Java_util_concurrent_Callable;
class Java_util_concurrent_CancellationException extends Java_lang_IllegalStateException;
class Java_util_concurrent_CompletionService;
class Java_util_concurrent_ConcurrentHashMap extends Java_util_AbstractMap;
class Java_util_concurrent_ConcurrentLinkedDeque extends Java_util_AbstractCollection;
class Java_util_concurrent_ConcurrentLinkedQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_ConcurrentMap extends Java_util_Map;
class Java_util_concurrent_ConcurrentNavigableMap extends Java_util_concurrent_ConcurrentMap;
class Java_util_concurrent_ConcurrentSkipListMap extends Java_util_AbstractMap;
class Java_util_concurrent_ConcurrentSkipListSet extends Java_util_AbstractSet;
class Java_util_concurrent_CopyOnWriteArrayList extends Java_util_List;
class Java_util_concurrent_CopyOnWriteArraySet extends Java_util_AbstractSet;
class Java_util_concurrent_CountDownLatch;
class Java_util_concurrent_CyclicBarrier;
class Java_util_concurrent_DelayQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_Delayed extends Java_lang_Comparable;
class Java_util_concurrent_Exchanger;
class Java_util_concurrent_ExecutionException extends Java_lang_Exception;
class Java_util_concurrent_ExecutorCompletionService extends Java_util_concurrent_CompletionService;
class Java_util_concurrent_Executors;
class Java_util_concurrent_ForkJoinPool extends Java_util_concurrent_AbstractExecutorService;
class Java_util_concurrent_Future;
class Java_util_concurrent_ForkJoinTask extends Java_util_concurrent_Future;
class Java_util_concurrent_ForkJoinWorkerThread extends Java_lang_Thread;
class Java_util_concurrent_RunnableFuture extends Java_lang_Runnable;
class Java_util_concurrent_FutureTask extends Java_util_concurrent_RunnableFuture;
class Java_util_concurrent_LinkedBlockingDeque extends Java_util_AbstractQueue;
class Java_util_concurrent_LinkedBlockingQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_LinkedTransferQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_Phaser;
class Java_util_concurrent_PriorityBlockingQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_RecursiveAction extends Java_util_concurrent_ForkJoinTask;
class Java_util_concurrent_RecursiveTask extends Java_util_concurrent_ForkJoinTask;
class Java_util_concurrent_RejectedExecutionException extends Java_lang_RuntimeException;
class Java_util_concurrent_RejectedExecutionHandler;
class Java_util_concurrent_RunnableScheduledFuture extends Java_util_concurrent_RunnableFuture;
class Java_util_concurrent_ScheduledExecutorService extends Java_util_concurrent_ExecutorService;
class Java_util_concurrent_ScheduledFuture extends Java_util_concurrent_Delayed;
class Java_util_concurrent_ThreadPoolExecutor extends Java_util_concurrent_AbstractExecutorService;
class Java_util_concurrent_ScheduledThreadPoolExecutor extends Java_util_concurrent_ThreadPoolExecutor;
class Java_util_concurrent_Semaphore extends Java_io_Serializable;
class Java_util_concurrent_SynchronousQueue extends Java_util_AbstractQueue;
class Java_util_concurrent_ThreadFactory;
class Java_util_concurrent_ThreadLocalRandom extends Java_util_Random;
class Java_util_concurrent_TimeUnit extends Java_lang_Enum;
class Java_util_concurrent_TimeoutException extends Java_lang_Exception;
class Java_util_concurrent_TransferQueue extends Java_util_concurrent_BlockingQueue;

/*------------------------------------------------------------*/
/* interface java.util.concurrent.Executor */
class Java_util_concurrent_Executor {
	/*-- Method --*/
	@Virtual @Overload void execute(Java_lang_Runnable p0);
}

/* interface java.util.concurrent.ExecutorService */
class Java_util_concurrent_ExecutorService extends Java_util_concurrent_Executor {
	/*-- Method --*/
	@Virtual @Overload Java_util_List invokeAll(Java_util_Collection p0);
	@Virtual @Overload Java_util_List invokeAll(Java_util_Collection p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload Java_util_List shutdownNow();
	@Virtual @Overload Java_util_concurrent_Future submit(Java_lang_Runnable p0);
	@Virtual @Overload Java_util_concurrent_Future submit(Java_lang_Runnable p0, Object p1);
	@Virtual @Overload Java_util_concurrent_Future submit(Java_util_concurrent_Callable p0);
	@Virtual @Overload Object invokeAny(Java_util_Collection p0);
	@Virtual @Overload Object invokeAny(Java_util_Collection p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean awaitTermination(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload boolean isShutdown();
	@Virtual @Overload boolean isTerminated();
	@Virtual @Overload void shutdown();
}

/* class java.util.concurrent.AbstractExecutorService */
class Java_util_concurrent_AbstractExecutorService extends Java_util_concurrent_ExecutorService {
}
Java_util_concurrent_AbstractExecutorService Java_util_concurrent_AbstractExecutorService.new();

/* class java.util.concurrent.ArrayBlockingQueue */
class Java_util_concurrent_ArrayBlockingQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
}
@Overload Java_util_concurrent_ArrayBlockingQueue Java_util_concurrent_ArrayBlockingQueue.new(int p0);
@Overload Java_util_concurrent_ArrayBlockingQueue Java_util_concurrent_ArrayBlockingQueue.new(int p0, boolean p1);
@Overload Java_util_concurrent_ArrayBlockingQueue Java_util_concurrent_ArrayBlockingQueue.new(int p0, boolean p1, Java_util_Collection p2);

/* interface java.util.concurrent.BlockingQueue */
class Java_util_concurrent_BlockingQueue extends Java_util_Queue {
	/*-- Method --*/
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
}

/* interface java.util.concurrent.BlockingDeque */
class Java_util_concurrent_BlockingDeque extends Java_util_concurrent_BlockingQueue {
	/*-- Method --*/
	@Virtual @Overload Object pollFirst(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object pollLast(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object takeFirst();
	@Virtual @Overload Object takeLast();
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerFirst(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean offerLast(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
	@Virtual @Overload void putFirst(Object p0);
	@Virtual @Overload void putLast(Object p0);
}

/* class java.util.concurrent.BrokenBarrierException */
class Java_util_concurrent_BrokenBarrierException extends Java_lang_Exception {
}
@Overload Java_util_concurrent_BrokenBarrierException Java_util_concurrent_BrokenBarrierException.new();
@Overload Java_util_concurrent_BrokenBarrierException Java_util_concurrent_BrokenBarrierException.new(String p0);

/* interface java.util.concurrent.Callable */
class Java_util_concurrent_Callable {
	/*-- Method --*/
	@Virtual @Overload Object call();
}

/* class java.util.concurrent.CancellationException */
class Java_util_concurrent_CancellationException extends Java_lang_IllegalStateException {
}
@Overload Java_util_concurrent_CancellationException Java_util_concurrent_CancellationException.new();
@Overload Java_util_concurrent_CancellationException Java_util_concurrent_CancellationException.new(String p0);

/* interface java.util.concurrent.CompletionService */
class Java_util_concurrent_CompletionService {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_Future poll();
	@Virtual @Overload Java_util_concurrent_Future poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Java_util_concurrent_Future submit(Java_lang_Runnable p0, Object p1);
	@Virtual @Overload Java_util_concurrent_Future submit(Java_util_concurrent_Callable p0);
	@Virtual @Overload Java_util_concurrent_Future take();
}

/* class java.util.concurrent.ConcurrentHashMap */
class Java_util_concurrent_ConcurrentHashMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration elements();
	@Virtual @Overload Java_util_Enumeration keys();
	@Virtual @Overload Object putIfAbsent(Object p0, Object p1);
	@Virtual @Overload Object replace(Object p0, Object p1);
	@Virtual @Overload boolean contains(Object p0);
	@Virtual @Overload boolean remove(Object p0, Object p1);
	@Virtual @Overload boolean replace(Object p0, Object p1, Object p2);
}
@Overload Java_util_concurrent_ConcurrentHashMap Java_util_concurrent_ConcurrentHashMap.new(int p0, float p1, int p2);
@Overload Java_util_concurrent_ConcurrentHashMap Java_util_concurrent_ConcurrentHashMap.new(int p0, float p1);
@Overload Java_util_concurrent_ConcurrentHashMap Java_util_concurrent_ConcurrentHashMap.new(int p0);
@Overload Java_util_concurrent_ConcurrentHashMap Java_util_concurrent_ConcurrentHashMap.new();
@Overload Java_util_concurrent_ConcurrentHashMap Java_util_concurrent_ConcurrentHashMap.new(Java_util_Map p0);

/* class java.util.concurrent.ConcurrentLinkedDeque */
class Java_util_concurrent_ConcurrentLinkedDeque extends Java_util_AbstractCollection {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Object element();
	@Virtual @Overload Object getFirst();
	@Virtual @Overload Object getLast();
	@Virtual @Overload Object peek();
	@Virtual @Overload Object peekFirst();
	@Virtual @Overload Object peekLast();
	@Virtual @Overload Object poll();
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
	@Virtual @Overload Object pop();
	@Virtual @Overload Object remove();
	@Virtual @Overload Object removeFirst();
	@Virtual @Overload Object removeLast();
	@Virtual @Overload boolean offer(Object p0);
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
}
@Overload Java_util_concurrent_ConcurrentLinkedDeque Java_util_concurrent_ConcurrentLinkedDeque.new();
@Overload Java_util_concurrent_ConcurrentLinkedDeque Java_util_concurrent_ConcurrentLinkedDeque.new(Java_util_Collection p0);

/* class java.util.concurrent.ConcurrentLinkedQueue */
class Java_util_concurrent_ConcurrentLinkedQueue extends Java_util_AbstractQueue {
}
@Overload Java_util_concurrent_ConcurrentLinkedQueue Java_util_concurrent_ConcurrentLinkedQueue.new();
@Overload Java_util_concurrent_ConcurrentLinkedQueue Java_util_concurrent_ConcurrentLinkedQueue.new(Java_util_Collection p0);

/* interface java.util.concurrent.ConcurrentMap */
class Java_util_concurrent_ConcurrentMap extends Java_util_Map {
	/*-- Method --*/
	@Virtual @Overload Object putIfAbsent(Object p0, Object p1);
	@Virtual @Overload Object replace(Object p0, Object p1);
	@Virtual @Overload boolean remove(Object p0, Object p1);
	@Virtual @Overload boolean replace(Object p0, Object p1, Object p2);
}

/* interface java.util.concurrent.ConcurrentNavigableMap */
class Java_util_concurrent_ConcurrentNavigableMap extends Java_util_concurrent_ConcurrentMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_NavigableSet descendingKeySet();
	@Virtual @Overload Java_util_NavigableSet navigableKeySet();
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap descendingMap();
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap headMap(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap headMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap subMap(Object p0, Object p1);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap subMap(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap tailMap(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap tailMap(Object p0, boolean p1);
}

/* class java.util.concurrent.ConcurrentSkipListMap */
class Java_util_concurrent_ConcurrentSkipListMap extends Java_util_AbstractMap {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_Map_Entry ceilingEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry firstEntry();
	@Virtual @Overload Java_util_Map_Entry floorEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry higherEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry lastEntry();
	@Virtual @Overload Java_util_Map_Entry lowerEntry(Object p0);
	@Virtual @Overload Java_util_Map_Entry pollFirstEntry();
	@Virtual @Overload Java_util_Map_Entry pollLastEntry();
	@Virtual @Overload Java_util_NavigableMap descendingMap();
	@Virtual @Overload Java_util_NavigableMap headMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableMap subMap(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableMap tailMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet descendingKeySet();
	@Virtual @Overload Java_util_NavigableSet navigableKeySet();
	@Virtual @Overload Java_util_SortedMap headMap(Object p0);
	@Virtual @Overload Java_util_SortedMap subMap(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedMap tailMap(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap descendingMap();
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap headMap(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap headMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap subMap(Object p0, Object p1);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap subMap(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap tailMap(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentNavigableMap tailMap(Object p0, boolean p1);
	@Virtual @Overload Java_util_concurrent_ConcurrentSkipListMap clone();
	@Virtual @Overload Object ceilingKey(Object p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload Object firstKey();
	@Virtual @Overload Object floorKey(Object p0);
	@Virtual @Overload Object higherKey(Object p0);
	@Virtual @Overload Object lastKey();
	@Virtual @Overload Object lowerKey(Object p0);
	@Virtual @Overload Object putIfAbsent(Object p0, Object p1);
	@Virtual @Overload Object replace(Object p0, Object p1);
	@Virtual @Overload boolean remove(Object p0, Object p1);
	@Virtual @Overload boolean replace(Object p0, Object p1, Object p2);
}
@Overload Java_util_concurrent_ConcurrentSkipListMap Java_util_concurrent_ConcurrentSkipListMap.new();
@Overload Java_util_concurrent_ConcurrentSkipListMap Java_util_concurrent_ConcurrentSkipListMap.new(Java_util_Comparator p0);
@Overload Java_util_concurrent_ConcurrentSkipListMap Java_util_concurrent_ConcurrentSkipListMap.new(Java_util_Map p0);
@Overload Java_util_concurrent_ConcurrentSkipListMap Java_util_concurrent_ConcurrentSkipListMap.new(Java_util_SortedMap p0);

/* class java.util.concurrent.ConcurrentSkipListSet */
class Java_util_concurrent_ConcurrentSkipListSet extends Java_util_AbstractSet {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Java_util_NavigableSet descendingSet();
	@Virtual @Overload Java_util_NavigableSet headSet(Object p0);
	@Virtual @Overload Java_util_NavigableSet headSet(Object p0, boolean p1);
	@Virtual @Overload Java_util_NavigableSet subSet(Object p0, Object p1);
	@Virtual @Overload Java_util_NavigableSet subSet(Object p0, boolean p1, Object p2, boolean p3);
	@Virtual @Overload Java_util_NavigableSet tailSet(Object p0);
	@Virtual @Overload Java_util_NavigableSet tailSet(Object p0, boolean p1);
	@Virtual @Overload Java_util_SortedSet headSet(Object p0);
	@Virtual @Overload Java_util_SortedSet subSet(Object p0, Object p1);
	@Virtual @Overload Java_util_SortedSet tailSet(Object p0);
	@Virtual @Overload Java_util_concurrent_ConcurrentSkipListSet clone();
	@Virtual @Overload Object ceiling(Object p0);
	@Virtual @Overload Object clone();
	@Virtual @Overload Object first();
	@Virtual @Overload Object floor(Object p0);
	@Virtual @Overload Object higher(Object p0);
	@Virtual @Overload Object last();
	@Virtual @Overload Object lower(Object p0);
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollLast();
}
@Overload Java_util_concurrent_ConcurrentSkipListSet Java_util_concurrent_ConcurrentSkipListSet.new();
@Overload Java_util_concurrent_ConcurrentSkipListSet Java_util_concurrent_ConcurrentSkipListSet.new(Java_util_Comparator p0);
@Overload Java_util_concurrent_ConcurrentSkipListSet Java_util_concurrent_ConcurrentSkipListSet.new(Java_util_Collection p0);
@Overload Java_util_concurrent_ConcurrentSkipListSet Java_util_concurrent_ConcurrentSkipListSet.new(Java_util_SortedSet p0);

/* class java.util.concurrent.CopyOnWriteArrayList */
class Java_util_concurrent_CopyOnWriteArrayList extends Java_util_List {
	/*-- Method --*/
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean addIfAbsent(Object p0);
	@Virtual @Overload int addAllAbsent(Java_util_Collection p0);
	@Virtual @Overload int indexOf(Object p0, int p1);
	@Virtual @Overload int lastIndexOf(Object p0, int p1);
}
@Overload Java_util_concurrent_CopyOnWriteArrayList Java_util_concurrent_CopyOnWriteArrayList.new();
@Overload Java_util_concurrent_CopyOnWriteArrayList Java_util_concurrent_CopyOnWriteArrayList.new(Java_util_Collection p0);
@Overload Java_util_concurrent_CopyOnWriteArrayList Java_util_concurrent_CopyOnWriteArrayList.new(Object[] p0);

/* class java.util.concurrent.CopyOnWriteArraySet */
class Java_util_concurrent_CopyOnWriteArraySet extends Java_util_AbstractSet {
}
@Overload Java_util_concurrent_CopyOnWriteArraySet Java_util_concurrent_CopyOnWriteArraySet.new();
@Overload Java_util_concurrent_CopyOnWriteArraySet Java_util_concurrent_CopyOnWriteArraySet.new(Java_util_Collection p0);

/* class java.util.concurrent.CountDownLatch */
class Java_util_concurrent_CountDownLatch {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean await(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload int getCount();
	@Virtual @Overload void await();
	@Virtual @Overload void countDown();
}
Java_util_concurrent_CountDownLatch Java_util_concurrent_CountDownLatch.new(int p0);

/* class java.util.concurrent.CyclicBarrier */
class Java_util_concurrent_CyclicBarrier {
	/*-- Method --*/
	@Virtual @Overload boolean isBroken();
	@Virtual @Overload int await();
	@Virtual @Overload int await(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload int getNumberWaiting();
	@Virtual @Overload int getParties();
	@Virtual @Overload void reset();
}
@Overload Java_util_concurrent_CyclicBarrier Java_util_concurrent_CyclicBarrier.new(int p0, Java_lang_Runnable p1);
@Overload Java_util_concurrent_CyclicBarrier Java_util_concurrent_CyclicBarrier.new(int p0);

/* class java.util.concurrent.DelayQueue */
class Java_util_concurrent_DelayQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_Delayed poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Java_util_concurrent_Delayed take();
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean add(Java_util_concurrent_Delayed p0);
	@Virtual @Overload boolean offer(Java_util_concurrent_Delayed p0);
	@Virtual @Overload boolean offer(Java_util_concurrent_Delayed p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Java_util_concurrent_Delayed p0);
	@Virtual @Overload void put(Object p0);
}
@Overload Java_util_concurrent_DelayQueue Java_util_concurrent_DelayQueue.new();
@Overload Java_util_concurrent_DelayQueue Java_util_concurrent_DelayQueue.new(Java_util_Collection p0);

/* interface java.util.concurrent.Delayed */
class Java_util_concurrent_Delayed extends Java_lang_Comparable {
	/*-- Method --*/
	@Virtual @Overload int getDelay(Java_util_concurrent_TimeUnit p0);
}

/* class java.util.concurrent.Exchanger */
class Java_util_concurrent_Exchanger {
	/*-- Method --*/
	@Virtual @Overload Object exchange(Object p0);
	@Virtual @Overload Object exchange(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
}
Java_util_concurrent_Exchanger Java_util_concurrent_Exchanger.new();

/* class java.util.concurrent.ExecutionException */
class Java_util_concurrent_ExecutionException extends Java_lang_Exception {
}
@Overload Java_util_concurrent_ExecutionException Java_util_concurrent_ExecutionException.new(String p0, Java_lang_Throwable p1);
@Overload Java_util_concurrent_ExecutionException Java_util_concurrent_ExecutionException.new(Java_lang_Throwable p0);

/* class java.util.concurrent.ExecutorCompletionService */
class Java_util_concurrent_ExecutorCompletionService extends Java_util_concurrent_CompletionService {
}
@Overload Java_util_concurrent_ExecutorCompletionService Java_util_concurrent_ExecutorCompletionService.new(Java_util_concurrent_Executor p0);
@Overload Java_util_concurrent_ExecutorCompletionService Java_util_concurrent_ExecutorCompletionService.new(Java_util_concurrent_Executor p0, Java_util_concurrent_BlockingQueue p1);

/* class java.util.concurrent.Executors */
class Java_util_concurrent_Executors {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_Callable callable(Java_lang_Runnable p0);
	@Static @Overload Java_util_concurrent_Callable callable(Java_lang_Runnable p0, Object p1);
	@Static @Overload Java_util_concurrent_Callable callable(Java_security_PrivilegedAction p0);
	@Static @Overload Java_util_concurrent_Callable callable(Java_security_PrivilegedExceptionAction p0);
	@Static @Overload Java_util_concurrent_Callable privilegedCallable(Java_util_concurrent_Callable p0);
	@Static @Overload Java_util_concurrent_Callable privilegedCallableUsingCurrentClassLoader(Java_util_concurrent_Callable p0);
	@Static @Overload Java_util_concurrent_ExecutorService newCachedThreadPool();
	@Static @Overload Java_util_concurrent_ExecutorService newCachedThreadPool(Java_util_concurrent_ThreadFactory p0);
	@Static @Overload Java_util_concurrent_ExecutorService newFixedThreadPool(int p0);
	@Static @Overload Java_util_concurrent_ExecutorService newFixedThreadPool(int p0, Java_util_concurrent_ThreadFactory p1);
	@Static @Overload Java_util_concurrent_ExecutorService newSingleThreadExecutor();
	@Static @Overload Java_util_concurrent_ExecutorService newSingleThreadExecutor(Java_util_concurrent_ThreadFactory p0);
	@Static @Overload Java_util_concurrent_ExecutorService unconfigurableExecutorService(Java_util_concurrent_ExecutorService p0);
	@Static @Overload Java_util_concurrent_ScheduledExecutorService newScheduledThreadPool(int p0);
	@Static @Overload Java_util_concurrent_ScheduledExecutorService newScheduledThreadPool(int p0, Java_util_concurrent_ThreadFactory p1);
	@Static @Overload Java_util_concurrent_ScheduledExecutorService newSingleThreadScheduledExecutor();
	@Static @Overload Java_util_concurrent_ScheduledExecutorService newSingleThreadScheduledExecutor(Java_util_concurrent_ThreadFactory p0);
	@Static @Overload Java_util_concurrent_ScheduledExecutorService unconfigurableScheduledExecutorService(Java_util_concurrent_ScheduledExecutorService p0);
	@Static @Overload Java_util_concurrent_ThreadFactory defaultThreadFactory();
	@Static @Overload Java_util_concurrent_ThreadFactory privilegedThreadFactory();
}

/* class java.util.concurrent.ForkJoinPool */
class Java_util_concurrent_ForkJoinPool extends Java_util_concurrent_AbstractExecutorService {
	/*-- Method --*/
	@Static @Overload void managedBlock(Java_util_concurrent_ForkJoinPool_ManagedBlocker p0);
	@Virtual @Overload Java_lang_Thread_UncaughtExceptionHandler getUncaughtExceptionHandler();
	@Virtual @Overload Java_util_concurrent_ForkJoinPool_ForkJoinWorkerThreadFactory getFactory();
	@Virtual @Overload Java_util_concurrent_ForkJoinTask submit(Java_util_concurrent_ForkJoinTask p0);
	@Virtual @Overload Object invoke(Java_util_concurrent_ForkJoinTask p0);
	@Virtual @Overload boolean getAsyncMode();
	@Virtual @Overload boolean hasQueuedSubmissions();
	@Virtual @Overload boolean isQuiescent();
	@Virtual @Overload boolean isTerminating();
	@Virtual @Overload int getActiveThreadCount();
	@Virtual @Overload int getParallelism();
	@Virtual @Overload int getPoolSize();
	@Virtual @Overload int getQueuedSubmissionCount();
	@Virtual @Overload int getQueuedTaskCount();
	@Virtual @Overload int getRunningThreadCount();
	@Virtual @Overload int getStealCount();
	@Virtual @Overload void execute(Java_util_concurrent_ForkJoinTask p0);
}
@Overload Java_util_concurrent_ForkJoinPool Java_util_concurrent_ForkJoinPool.new();
@Overload Java_util_concurrent_ForkJoinPool Java_util_concurrent_ForkJoinPool.new(int p0);
@Overload Java_util_concurrent_ForkJoinPool Java_util_concurrent_ForkJoinPool.new(int p0, Java_util_concurrent_ForkJoinPool_ForkJoinWorkerThreadFactory p1, Java_lang_Thread_UncaughtExceptionHandler p2, boolean p3);

/* interface java.util.concurrent.Future */
class Java_util_concurrent_Future {
	/*-- Method --*/
	@Virtual @Overload Object get();
	@Virtual @Overload Object get(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload boolean cancel(boolean p0);
	@Virtual @Overload boolean isCancelled();
	@Virtual @Overload boolean isDone();
}

/* class java.util.concurrent.ForkJoinTask */
class Java_util_concurrent_ForkJoinTask extends Java_util_concurrent_Future {
	/*-- Method --*/
	@Static @Overload Java_util_Collection invokeAll(Java_util_Collection p0);
	@Static @Overload Java_util_concurrent_ForkJoinPool getPool();
	@Static @Overload Java_util_concurrent_ForkJoinTask adapt(Java_lang_Runnable p0);
	@Static @Overload Java_util_concurrent_ForkJoinTask adapt(Java_lang_Runnable p0, Object p1);
	@Static @Overload Java_util_concurrent_ForkJoinTask adapt(Java_util_concurrent_Callable p0);
	@Static @Overload boolean inForkJoinPool();
	@Static @Overload int getQueuedTaskCount();
	@Static @Overload int getSurplusQueuedTaskCount();
	@Static @Overload void helpQuiesce();
	@Static @Overload void invokeAll(Java_util_concurrent_ForkJoinTask p0, Java_util_concurrent_ForkJoinTask p1);
	@Static @Overload void invokeAll(Java_util_concurrent_ForkJoinTask[] p0);
	@Virtual @Overload Java_lang_Throwable getException();
	@Virtual @Overload Java_util_concurrent_ForkJoinTask fork();
	@Virtual @Overload Object getRawResult();
	@Virtual @Overload Object invoke();
	@Virtual @Overload Object join();
	@Virtual @Overload boolean isCompletedAbnormally();
	@Virtual @Overload boolean isCompletedNormally();
	@Virtual @Overload boolean tryUnfork();
	@Virtual @Overload void complete(Object p0);
	@Virtual @Overload void completeExceptionally(Java_lang_Throwable p0);
	@Virtual @Overload void quietlyInvoke();
	@Virtual @Overload void quietlyJoin();
	@Virtual @Overload void reinitialize();
}
Java_util_concurrent_ForkJoinTask Java_util_concurrent_ForkJoinTask.new();

/* class java.util.concurrent.ForkJoinWorkerThread */
class Java_util_concurrent_ForkJoinWorkerThread extends Java_lang_Thread {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_ForkJoinPool getPool();
	@Virtual @Overload int getPoolIndex();
}

/* interface java.util.concurrent.RunnableFuture */
class Java_util_concurrent_RunnableFuture extends Java_lang_Runnable {
}

/* class java.util.concurrent.FutureTask */
class Java_util_concurrent_FutureTask extends Java_util_concurrent_RunnableFuture {
}
@Overload Java_util_concurrent_FutureTask Java_util_concurrent_FutureTask.new(Java_util_concurrent_Callable p0);
@Overload Java_util_concurrent_FutureTask Java_util_concurrent_FutureTask.new(Java_lang_Runnable p0, Object p1);

/* class java.util.concurrent.LinkedBlockingDeque */
class Java_util_concurrent_LinkedBlockingDeque extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Java_util_Iterator descendingIterator();
	@Virtual @Overload Object getFirst();
	@Virtual @Overload Object getLast();
	@Virtual @Overload Object peekFirst();
	@Virtual @Overload Object peekLast();
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object pollFirst();
	@Virtual @Overload Object pollFirst(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object pollLast();
	@Virtual @Overload Object pollLast(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object pop();
	@Virtual @Overload Object removeFirst();
	@Virtual @Overload Object removeLast();
	@Virtual @Overload Object take();
	@Virtual @Overload Object takeFirst();
	@Virtual @Overload Object takeLast();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean offerFirst(Object p0);
	@Virtual @Overload boolean offerFirst(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean offerLast(Object p0);
	@Virtual @Overload boolean offerLast(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean removeFirstOccurrence(Object p0);
	@Virtual @Overload boolean removeLastOccurrence(Object p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void addFirst(Object p0);
	@Virtual @Overload void addLast(Object p0);
	@Virtual @Overload void push(Object p0);
	@Virtual @Overload void put(Object p0);
	@Virtual @Overload void putFirst(Object p0);
	@Virtual @Overload void putLast(Object p0);
}
@Overload Java_util_concurrent_LinkedBlockingDeque Java_util_concurrent_LinkedBlockingDeque.new();
@Overload Java_util_concurrent_LinkedBlockingDeque Java_util_concurrent_LinkedBlockingDeque.new(int p0);
@Overload Java_util_concurrent_LinkedBlockingDeque Java_util_concurrent_LinkedBlockingDeque.new(Java_util_Collection p0);

/* class java.util.concurrent.LinkedBlockingQueue */
class Java_util_concurrent_LinkedBlockingQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
}
@Overload Java_util_concurrent_LinkedBlockingQueue Java_util_concurrent_LinkedBlockingQueue.new();
@Overload Java_util_concurrent_LinkedBlockingQueue Java_util_concurrent_LinkedBlockingQueue.new(int p0);
@Overload Java_util_concurrent_LinkedBlockingQueue Java_util_concurrent_LinkedBlockingQueue.new(Java_util_Collection p0);

/* class java.util.concurrent.LinkedTransferQueue */
class Java_util_concurrent_LinkedTransferQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean hasWaitingConsumer();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload boolean tryTransfer(Object p0);
	@Virtual @Overload boolean tryTransfer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int getWaitingConsumerCount();
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
	@Virtual @Overload void transfer(Object p0);
}
@Overload Java_util_concurrent_LinkedTransferQueue Java_util_concurrent_LinkedTransferQueue.new();
@Overload Java_util_concurrent_LinkedTransferQueue Java_util_concurrent_LinkedTransferQueue.new(Java_util_Collection p0);

/* class java.util.concurrent.Phaser */
class Java_util_concurrent_Phaser {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_Phaser getParent();
	@Virtual @Overload Java_util_concurrent_Phaser getRoot();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isTerminated();
	@Virtual @Overload int arrive();
	@Virtual @Overload int arriveAndAwaitAdvance();
	@Virtual @Overload int arriveAndDeregister();
	@Virtual @Overload int awaitAdvance(int p0);
	@Virtual @Overload int awaitAdvanceInterruptibly(int p0);
	@Virtual @Overload int awaitAdvanceInterruptibly(int p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int bulkRegister(int p0);
	@Virtual @Overload int getArrivedParties();
	@Virtual @Overload int getPhase();
	@Virtual @Overload int getRegisteredParties();
	@Virtual @Overload int getUnarrivedParties();
	@Virtual @Overload void forceTermination();
}
@Overload Java_util_concurrent_Phaser Java_util_concurrent_Phaser.new();
@Overload Java_util_concurrent_Phaser Java_util_concurrent_Phaser.new(int p0);
@Overload Java_util_concurrent_Phaser Java_util_concurrent_Phaser.new(Java_util_concurrent_Phaser p0);
@Overload Java_util_concurrent_Phaser Java_util_concurrent_Phaser.new(Java_util_concurrent_Phaser p0, int p1);

/* class java.util.concurrent.PriorityBlockingQueue */
class Java_util_concurrent_PriorityBlockingQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator comparator();
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
}
@Overload Java_util_concurrent_PriorityBlockingQueue Java_util_concurrent_PriorityBlockingQueue.new();
@Overload Java_util_concurrent_PriorityBlockingQueue Java_util_concurrent_PriorityBlockingQueue.new(int p0);
@Overload Java_util_concurrent_PriorityBlockingQueue Java_util_concurrent_PriorityBlockingQueue.new(int p0, Java_util_Comparator p1);
@Overload Java_util_concurrent_PriorityBlockingQueue Java_util_concurrent_PriorityBlockingQueue.new(Java_util_Collection p0);

/* class java.util.concurrent.RecursiveAction */
class Java_util_concurrent_RecursiveAction extends Java_util_concurrent_ForkJoinTask {
}
Java_util_concurrent_RecursiveAction Java_util_concurrent_RecursiveAction.new();

/* class java.util.concurrent.RecursiveTask */
class Java_util_concurrent_RecursiveTask extends Java_util_concurrent_ForkJoinTask {
}
Java_util_concurrent_RecursiveTask Java_util_concurrent_RecursiveTask.new();

/* class java.util.concurrent.RejectedExecutionException */
class Java_util_concurrent_RejectedExecutionException extends Java_lang_RuntimeException {
}
@Overload Java_util_concurrent_RejectedExecutionException Java_util_concurrent_RejectedExecutionException.new();
@Overload Java_util_concurrent_RejectedExecutionException Java_util_concurrent_RejectedExecutionException.new(String p0);
@Overload Java_util_concurrent_RejectedExecutionException Java_util_concurrent_RejectedExecutionException.new(String p0, Java_lang_Throwable p1);
@Overload Java_util_concurrent_RejectedExecutionException Java_util_concurrent_RejectedExecutionException.new(Java_lang_Throwable p0);

/* interface java.util.concurrent.RejectedExecutionHandler */
class Java_util_concurrent_RejectedExecutionHandler {
	/*-- Method --*/
	@Virtual @Overload void rejectedExecution(Java_lang_Runnable p0, Java_util_concurrent_ThreadPoolExecutor p1);
}

/* interface java.util.concurrent.RunnableScheduledFuture */
class Java_util_concurrent_RunnableScheduledFuture extends Java_util_concurrent_RunnableFuture {
	/*-- Method --*/
	@Virtual @Overload boolean isPeriodic();
}

/* interface java.util.concurrent.ScheduledExecutorService */
class Java_util_concurrent_ScheduledExecutorService extends Java_util_concurrent_ExecutorService {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_ScheduledFuture schedule(Java_lang_Runnable p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture schedule(Java_util_concurrent_Callable p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture scheduleAtFixedRate(Java_lang_Runnable p0, int p1, int p2, Java_util_concurrent_TimeUnit p3);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture scheduleWithFixedDelay(Java_lang_Runnable p0, int p1, int p2, Java_util_concurrent_TimeUnit p3);
}

/* interface java.util.concurrent.ScheduledFuture */
class Java_util_concurrent_ScheduledFuture extends Java_util_concurrent_Delayed {
}

/* class java.util.concurrent.ThreadPoolExecutor */
class Java_util_concurrent_ThreadPoolExecutor extends Java_util_concurrent_AbstractExecutorService {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_BlockingQueue getQueue();
	@Virtual @Overload Java_util_concurrent_RejectedExecutionHandler getRejectedExecutionHandler();
	@Virtual @Overload Java_util_concurrent_ThreadFactory getThreadFactory();
	@Virtual @Overload boolean allowsCoreThreadTimeOut();
	@Virtual @Overload boolean isTerminating();
	@Virtual @Overload boolean prestartCoreThread();
	@Virtual @Overload boolean remove(Java_lang_Runnable p0);
	@Virtual @Overload int getActiveCount();
	@Virtual @Overload int getCompletedTaskCount();
	@Virtual @Overload int getCorePoolSize();
	@Virtual @Overload int getKeepAliveTime(Java_util_concurrent_TimeUnit p0);
	@Virtual @Overload int getLargestPoolSize();
	@Virtual @Overload int getMaximumPoolSize();
	@Virtual @Overload int getPoolSize();
	@Virtual @Overload int getTaskCount();
	@Virtual @Overload int prestartAllCoreThreads();
	@Virtual @Overload void allowCoreThreadTimeOut(boolean p0);
	@Virtual @Overload void purge();
	@Virtual @Overload void setCorePoolSize(int p0);
	@Virtual @Overload void setKeepAliveTime(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload void setMaximumPoolSize(int p0);
	@Virtual @Overload void setRejectedExecutionHandler(Java_util_concurrent_RejectedExecutionHandler p0);
	@Virtual @Overload void setThreadFactory(Java_util_concurrent_ThreadFactory p0);
}
@Overload Java_util_concurrent_ThreadPoolExecutor Java_util_concurrent_ThreadPoolExecutor.new(int p0, int p1, int p2, Java_util_concurrent_TimeUnit p3, Java_util_concurrent_BlockingQueue p4);
@Overload Java_util_concurrent_ThreadPoolExecutor Java_util_concurrent_ThreadPoolExecutor.new(int p0, int p1, int p2, Java_util_concurrent_TimeUnit p3, Java_util_concurrent_BlockingQueue p4, Java_util_concurrent_ThreadFactory p5);
@Overload Java_util_concurrent_ThreadPoolExecutor Java_util_concurrent_ThreadPoolExecutor.new(int p0, int p1, int p2, Java_util_concurrent_TimeUnit p3, Java_util_concurrent_BlockingQueue p4, Java_util_concurrent_RejectedExecutionHandler p5);
@Overload Java_util_concurrent_ThreadPoolExecutor Java_util_concurrent_ThreadPoolExecutor.new(int p0, int p1, int p2, Java_util_concurrent_TimeUnit p3, Java_util_concurrent_BlockingQueue p4, Java_util_concurrent_ThreadFactory p5, Java_util_concurrent_RejectedExecutionHandler p6);

/* class java.util.concurrent.ScheduledThreadPoolExecutor */
class Java_util_concurrent_ScheduledThreadPoolExecutor extends Java_util_concurrent_ThreadPoolExecutor {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_ScheduledFuture schedule(Java_lang_Runnable p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture schedule(Java_util_concurrent_Callable p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture scheduleAtFixedRate(Java_lang_Runnable p0, int p1, int p2, Java_util_concurrent_TimeUnit p3);
	@Virtual @Overload Java_util_concurrent_ScheduledFuture scheduleWithFixedDelay(Java_lang_Runnable p0, int p1, int p2, Java_util_concurrent_TimeUnit p3);
	@Virtual @Overload boolean getContinueExistingPeriodicTasksAfterShutdownPolicy();
	@Virtual @Overload boolean getExecuteExistingDelayedTasksAfterShutdownPolicy();
	@Virtual @Overload boolean getRemoveOnCancelPolicy();
	@Virtual @Overload void setContinueExistingPeriodicTasksAfterShutdownPolicy(boolean p0);
	@Virtual @Overload void setExecuteExistingDelayedTasksAfterShutdownPolicy(boolean p0);
	@Virtual @Overload void setRemoveOnCancelPolicy(boolean p0);
}
@Overload Java_util_concurrent_ScheduledThreadPoolExecutor Java_util_concurrent_ScheduledThreadPoolExecutor.new(int p0);
@Overload Java_util_concurrent_ScheduledThreadPoolExecutor Java_util_concurrent_ScheduledThreadPoolExecutor.new(int p0, Java_util_concurrent_ThreadFactory p1);
@Overload Java_util_concurrent_ScheduledThreadPoolExecutor Java_util_concurrent_ScheduledThreadPoolExecutor.new(int p0, Java_util_concurrent_RejectedExecutionHandler p1);
@Overload Java_util_concurrent_ScheduledThreadPoolExecutor Java_util_concurrent_ScheduledThreadPoolExecutor.new(int p0, Java_util_concurrent_ThreadFactory p1, Java_util_concurrent_RejectedExecutionHandler p2);

/* class java.util.concurrent.Semaphore */
class Java_util_concurrent_Semaphore extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean hasQueuedThreads();
	@Virtual @Overload boolean isFair();
	@Virtual @Overload boolean tryAcquire();
	@Virtual @Overload boolean tryAcquire(int p0);
	@Virtual @Overload boolean tryAcquire(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload boolean tryAcquire(int p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int availablePermits();
	@Virtual @Overload int drainPermits();
	@Virtual @Overload int getQueueLength();
	@Virtual @Overload void acquire();
	@Virtual @Overload void acquire(int p0);
	@Virtual @Overload void acquireUninterruptibly();
	@Virtual @Overload void acquireUninterruptibly(int p0);
	@Virtual @Overload void release();
	@Virtual @Overload void release(int p0);
}
@Overload Java_util_concurrent_Semaphore Java_util_concurrent_Semaphore.new(int p0);
@Overload Java_util_concurrent_Semaphore Java_util_concurrent_Semaphore.new(int p0, boolean p1);

/* class java.util.concurrent.SynchronousQueue */
class Java_util_concurrent_SynchronousQueue extends Java_util_AbstractQueue {
	/*-- Method --*/
	@Virtual @Overload Object poll(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload Object take();
	@Virtual @Overload boolean offer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int drainTo(Java_util_Collection p0);
	@Virtual @Overload int drainTo(Java_util_Collection p0, int p1);
	@Virtual @Overload int remainingCapacity();
	@Virtual @Overload void put(Object p0);
}
@Overload Java_util_concurrent_SynchronousQueue Java_util_concurrent_SynchronousQueue.new();
@Overload Java_util_concurrent_SynchronousQueue Java_util_concurrent_SynchronousQueue.new(boolean p0);

/* interface java.util.concurrent.ThreadFactory */
class Java_util_concurrent_ThreadFactory {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Thread newThread(Java_lang_Runnable p0);
}

/* class java.util.concurrent.ThreadLocalRandom */
class Java_util_concurrent_ThreadLocalRandom extends Java_util_Random {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_ThreadLocalRandom current();
	@Virtual @Overload float nextDouble(float p0);
	@Virtual @Overload float nextDouble(float p0, float p1);
	@Virtual @Overload int nextInt(int p0, int p1);
	@Virtual @Overload int nextLong(int p0);
	@Virtual @Overload int nextLong(int p0, int p1);
}

/* class java.util.concurrent.TimeUnit */
class Java_util_concurrent_TimeUnit extends Java_lang_Enum {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_TimeUnit valueOf(String p0);
	@Static @Overload Java_util_concurrent_TimeUnit[] values();
	@Virtual @Overload int convert(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload int toDays(int p0);
	@Virtual @Overload int toHours(int p0);
	@Virtual @Overload int toMicros(int p0);
	@Virtual @Overload int toMillis(int p0);
	@Virtual @Overload int toMinutes(int p0);
	@Virtual @Overload int toNanos(int p0);
	@Virtual @Overload int toSeconds(int p0);
	@Virtual @Overload void sleep(int p0);
	@Virtual @Overload void timedJoin(Java_lang_Thread p0, int p1);
	@Virtual @Overload void timedWait(Object p0, int p1);
}

/* class java.util.concurrent.TimeoutException */
class Java_util_concurrent_TimeoutException extends Java_lang_Exception {
}
@Overload Java_util_concurrent_TimeoutException Java_util_concurrent_TimeoutException.new();
@Overload Java_util_concurrent_TimeoutException Java_util_concurrent_TimeoutException.new(String p0);

/* interface java.util.concurrent.TransferQueue */
class Java_util_concurrent_TransferQueue extends Java_util_concurrent_BlockingQueue {
	/*-- Method --*/
	@Virtual @Overload boolean hasWaitingConsumer();
	@Virtual @Overload boolean tryTransfer(Object p0);
	@Virtual @Overload boolean tryTransfer(Object p0, int p1, Java_util_concurrent_TimeUnit p2);
	@Virtual @Overload int getWaitingConsumerCount();
	@Virtual @Overload void transfer(Object p0);
}

/*============================================================*/
/* java package java.util.concurrent.atomic */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Serializable;
class Java_lang_Number;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_util_concurrent_atomic_AtomicBoolean extends Java_io_Serializable;
class Java_util_concurrent_atomic_AtomicInteger extends Java_lang_Number;
class Java_util_concurrent_atomic_AtomicIntegerArray extends Java_io_Serializable;
class Java_util_concurrent_atomic_AtomicIntegerFieldUpdater;
class Java_util_concurrent_atomic_AtomicLong extends Java_lang_Number;
class Java_util_concurrent_atomic_AtomicLongArray extends Java_io_Serializable;
class Java_util_concurrent_atomic_AtomicLongFieldUpdater;
class Java_util_concurrent_atomic_AtomicMarkableReference;
class Java_util_concurrent_atomic_AtomicReference extends Java_io_Serializable;
class Java_util_concurrent_atomic_AtomicReferenceArray extends Java_io_Serializable;
class Java_util_concurrent_atomic_AtomicReferenceFieldUpdater;
class Java_util_concurrent_atomic_AtomicStampedReference;

/*------------------------------------------------------------*/
/* class java.util.concurrent.atomic.AtomicBoolean */
class Java_util_concurrent_atomic_AtomicBoolean extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean compareAndSet(boolean p0, boolean p1);
	@Virtual @Overload boolean get();
	@Virtual @Overload boolean getAndSet(boolean p0);
	@Virtual @Overload boolean weakCompareAndSet(boolean p0, boolean p1);
	@Virtual @Overload void lazySet(boolean p0);
	@Virtual @Overload void set(boolean p0);
}
@Overload Java_util_concurrent_atomic_AtomicBoolean Java_util_concurrent_atomic_AtomicBoolean.new(boolean p0);
@Overload Java_util_concurrent_atomic_AtomicBoolean Java_util_concurrent_atomic_AtomicBoolean.new();

/* class java.util.concurrent.atomic.AtomicInteger */
class Java_util_concurrent_atomic_AtomicInteger extends Java_lang_Number {
	/*-- Method --*/
	@Virtual @Overload boolean compareAndSet(int p0, int p1);
	@Virtual @Overload boolean weakCompareAndSet(int p0, int p1);
	@Virtual @Overload int addAndGet(int p0);
	@Virtual @Overload int decrementAndGet();
	@Virtual @Overload int get();
	@Virtual @Overload int getAndAdd(int p0);
	@Virtual @Overload int getAndDecrement();
	@Virtual @Overload int getAndIncrement();
	@Virtual @Overload int getAndSet(int p0);
	@Virtual @Overload int incrementAndGet();
	@Virtual @Overload void lazySet(int p0);
	@Virtual @Overload void set(int p0);
}
@Overload Java_util_concurrent_atomic_AtomicInteger Java_util_concurrent_atomic_AtomicInteger.new(int p0);
@Overload Java_util_concurrent_atomic_AtomicInteger Java_util_concurrent_atomic_AtomicInteger.new();

/* class java.util.concurrent.atomic.AtomicIntegerArray */
class Java_util_concurrent_atomic_AtomicIntegerArray extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean compareAndSet(int p0, int p1, int p2);
	@Virtual @Overload boolean weakCompareAndSet(int p0, int p1, int p2);
	@Virtual @Overload int addAndGet(int p0, int p1);
	@Virtual @Overload int decrementAndGet(int p0);
	@Virtual @Overload int get(int p0);
	@Virtual @Overload int getAndAdd(int p0, int p1);
	@Virtual @Overload int getAndDecrement(int p0);
	@Virtual @Overload int getAndIncrement(int p0);
	@Virtual @Overload int getAndSet(int p0, int p1);
	@Virtual @Overload int incrementAndGet(int p0);
	@Virtual @Overload int length();
	@Virtual @Overload void lazySet(int p0, int p1);
	@Virtual @Overload void set(int p0, int p1);
}
@Overload Java_util_concurrent_atomic_AtomicIntegerArray Java_util_concurrent_atomic_AtomicIntegerArray.new(int p0);
@Overload Java_util_concurrent_atomic_AtomicIntegerArray Java_util_concurrent_atomic_AtomicIntegerArray.new(int[] p0);

/* class java.util.concurrent.atomic.AtomicIntegerFieldUpdater */
class Java_util_concurrent_atomic_AtomicIntegerFieldUpdater {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_atomic_AtomicIntegerFieldUpdater newUpdater(Class p0, String p1);
	@Virtual @Overload boolean compareAndSet(Object p0, int p1, int p2);
	@Virtual @Overload boolean weakCompareAndSet(Object p0, int p1, int p2);
	@Virtual @Overload int addAndGet(Object p0, int p1);
	@Virtual @Overload int decrementAndGet(Object p0);
	@Virtual @Overload int get(Object p0);
	@Virtual @Overload int getAndAdd(Object p0, int p1);
	@Virtual @Overload int getAndDecrement(Object p0);
	@Virtual @Overload int getAndIncrement(Object p0);
	@Virtual @Overload int getAndSet(Object p0, int p1);
	@Virtual @Overload int incrementAndGet(Object p0);
	@Virtual @Overload void lazySet(Object p0, int p1);
	@Virtual @Overload void set(Object p0, int p1);
}

/* class java.util.concurrent.atomic.AtomicLong */
class Java_util_concurrent_atomic_AtomicLong extends Java_lang_Number {
	/*-- Method --*/
	@Virtual @Overload boolean compareAndSet(int p0, int p1);
	@Virtual @Overload boolean weakCompareAndSet(int p0, int p1);
	@Virtual @Overload int addAndGet(int p0);
	@Virtual @Overload int decrementAndGet();
	@Virtual @Overload int get();
	@Virtual @Overload int getAndAdd(int p0);
	@Virtual @Overload int getAndDecrement();
	@Virtual @Overload int getAndIncrement();
	@Virtual @Overload int getAndSet(int p0);
	@Virtual @Overload int incrementAndGet();
	@Virtual @Overload void lazySet(int p0);
	@Virtual @Overload void set(int p0);
}
@Overload Java_util_concurrent_atomic_AtomicLong Java_util_concurrent_atomic_AtomicLong.new(int p0);
@Overload Java_util_concurrent_atomic_AtomicLong Java_util_concurrent_atomic_AtomicLong.new();

/* class java.util.concurrent.atomic.AtomicLongArray */
class Java_util_concurrent_atomic_AtomicLongArray extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean compareAndSet(int p0, int p1, int p2);
	@Virtual @Overload boolean weakCompareAndSet(int p0, int p1, int p2);
	@Virtual @Overload int addAndGet(int p0, int p1);
	@Virtual @Overload int decrementAndGet(int p0);
	@Virtual @Overload int get(int p0);
	@Virtual @Overload int getAndAdd(int p0, int p1);
	@Virtual @Overload int getAndDecrement(int p0);
	@Virtual @Overload int getAndIncrement(int p0);
	@Virtual @Overload int getAndSet(int p0, int p1);
	@Virtual @Overload int incrementAndGet(int p0);
	@Virtual @Overload int length();
	@Virtual @Overload void lazySet(int p0, int p1);
	@Virtual @Overload void set(int p0, int p1);
}
@Overload Java_util_concurrent_atomic_AtomicLongArray Java_util_concurrent_atomic_AtomicLongArray.new(int p0);
@Overload Java_util_concurrent_atomic_AtomicLongArray Java_util_concurrent_atomic_AtomicLongArray.new(int[] p0);

/* class java.util.concurrent.atomic.AtomicLongFieldUpdater */
class Java_util_concurrent_atomic_AtomicLongFieldUpdater {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_atomic_AtomicLongFieldUpdater newUpdater(Class p0, String p1);
	@Virtual @Overload boolean compareAndSet(Object p0, int p1, int p2);
	@Virtual @Overload boolean weakCompareAndSet(Object p0, int p1, int p2);
	@Virtual @Overload int addAndGet(Object p0, int p1);
	@Virtual @Overload int decrementAndGet(Object p0);
	@Virtual @Overload int get(Object p0);
	@Virtual @Overload int getAndAdd(Object p0, int p1);
	@Virtual @Overload int getAndDecrement(Object p0);
	@Virtual @Overload int getAndIncrement(Object p0);
	@Virtual @Overload int getAndSet(Object p0, int p1);
	@Virtual @Overload int incrementAndGet(Object p0);
	@Virtual @Overload void lazySet(Object p0, int p1);
	@Virtual @Overload void set(Object p0, int p1);
}

/* class java.util.concurrent.atomic.AtomicMarkableReference */
class Java_util_concurrent_atomic_AtomicMarkableReference {
	/*-- Method --*/
	@Virtual @Overload Object get(boolean[] p0);
	@Virtual @Overload Object getReference();
	@Virtual @Overload boolean attemptMark(Object p0, boolean p1);
	@Virtual @Overload boolean compareAndSet(Object p0, Object p1, boolean p2, boolean p3);
	@Virtual @Overload boolean isMarked();
	@Virtual @Overload boolean weakCompareAndSet(Object p0, Object p1, boolean p2, boolean p3);
	@Virtual @Overload void set(Object p0, boolean p1);
}
Java_util_concurrent_atomic_AtomicMarkableReference Java_util_concurrent_atomic_AtomicMarkableReference.new(Object p0, boolean p1);

/* class java.util.concurrent.atomic.AtomicReference */
class Java_util_concurrent_atomic_AtomicReference extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Object get();
	@Virtual @Overload Object getAndSet(Object p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean compareAndSet(Object p0, Object p1);
	@Virtual @Overload boolean weakCompareAndSet(Object p0, Object p1);
	@Virtual @Overload void lazySet(Object p0);
	@Virtual @Overload void set(Object p0);
}
@Overload Java_util_concurrent_atomic_AtomicReference Java_util_concurrent_atomic_AtomicReference.new(Object p0);
@Overload Java_util_concurrent_atomic_AtomicReference Java_util_concurrent_atomic_AtomicReference.new();

/* class java.util.concurrent.atomic.AtomicReferenceArray */
class Java_util_concurrent_atomic_AtomicReferenceArray extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Object get(int p0);
	@Virtual @Overload Object getAndSet(int p0, Object p1);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean compareAndSet(int p0, Object p1, Object p2);
	@Virtual @Overload boolean weakCompareAndSet(int p0, Object p1, Object p2);
	@Virtual @Overload int length();
	@Virtual @Overload void lazySet(int p0, Object p1);
	@Virtual @Overload void set(int p0, Object p1);
}
@Overload Java_util_concurrent_atomic_AtomicReferenceArray Java_util_concurrent_atomic_AtomicReferenceArray.new(int p0);
@Overload Java_util_concurrent_atomic_AtomicReferenceArray Java_util_concurrent_atomic_AtomicReferenceArray.new(Object[] p0);

/* class java.util.concurrent.atomic.AtomicReferenceFieldUpdater */
class Java_util_concurrent_atomic_AtomicReferenceFieldUpdater {
	/*-- Method --*/
	@Static @Overload Java_util_concurrent_atomic_AtomicReferenceFieldUpdater newUpdater(Class p0, Class p1, String p2);
	@Virtual @Overload Object get(Object p0);
	@Virtual @Overload Object getAndSet(Object p0, Object p1);
	@Virtual @Overload boolean compareAndSet(Object p0, Object p1, Object p2);
	@Virtual @Overload boolean weakCompareAndSet(Object p0, Object p1, Object p2);
	@Virtual @Overload void lazySet(Object p0, Object p1);
	@Virtual @Overload void set(Object p0, Object p1);
}

/* class java.util.concurrent.atomic.AtomicStampedReference */
class Java_util_concurrent_atomic_AtomicStampedReference {
	/*-- Method --*/
	@Virtual @Overload Object get(int[] p0);
	@Virtual @Overload Object getReference();
	@Virtual @Overload boolean attemptStamp(Object p0, int p1);
	@Virtual @Overload boolean compareAndSet(Object p0, Object p1, int p2, int p3);
	@Virtual @Overload boolean weakCompareAndSet(Object p0, Object p1, int p2, int p3);
	@Virtual @Overload int getStamp();
	@Virtual @Overload void set(Object p0, int p1);
}
Java_util_concurrent_atomic_AtomicStampedReference Java_util_concurrent_atomic_AtomicStampedReference.new(Object p0, int p1);

/*============================================================*/
/* java package java.util.concurrent.locks */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_io_Serializable;
class Java_lang_Thread;
class Java_util_Collection;
class Java_util_Date;
class Java_util_concurrent_TimeUnit;
class Java_util_concurrent_locks_AbstractQueuedLongSynchronizer_ConditionObject;
class Java_util_concurrent_locks_AbstractQueuedSynchronizer_ConditionObject;

/*------------------------------------------------------------*/
/* this package classes .. */
class Java_util_concurrent_locks_AbstractOwnableSynchronizer extends Java_io_Serializable;
class Java_util_concurrent_locks_AbstractQueuedLongSynchronizer extends Java_util_concurrent_locks_AbstractOwnableSynchronizer;
class Java_util_concurrent_locks_AbstractQueuedSynchronizer extends Java_util_concurrent_locks_AbstractOwnableSynchronizer;
class Java_util_concurrent_locks_Condition;
class Java_util_concurrent_locks_Lock;
class Java_util_concurrent_locks_LockSupport;
class Java_util_concurrent_locks_ReadWriteLock;
class Java_util_concurrent_locks_ReentrantLock extends Java_util_concurrent_locks_Lock;
class Java_util_concurrent_locks_ReentrantReadWriteLock extends Java_util_concurrent_locks_ReadWriteLock;

/*------------------------------------------------------------*/
/* class java.util.concurrent.locks.AbstractOwnableSynchronizer */
class Java_util_concurrent_locks_AbstractOwnableSynchronizer extends Java_io_Serializable {
}

/* class java.util.concurrent.locks.AbstractQueuedLongSynchronizer */
class Java_util_concurrent_locks_AbstractQueuedLongSynchronizer extends Java_util_concurrent_locks_AbstractOwnableSynchronizer {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Thread getFirstQueuedThread();
	@Virtual @Overload Java_util_Collection getExclusiveQueuedThreads();
	@Virtual @Overload Java_util_Collection getQueuedThreads();
	@Virtual @Overload Java_util_Collection getSharedQueuedThreads();
	@Virtual @Overload Java_util_Collection getWaitingThreads(Java_util_concurrent_locks_AbstractQueuedLongSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean hasContended();
	@Virtual @Overload boolean hasQueuedPredecessors();
	@Virtual @Overload boolean hasQueuedThreads();
	@Virtual @Overload boolean hasWaiters(Java_util_concurrent_locks_AbstractQueuedLongSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean isQueued(Java_lang_Thread p0);
	@Virtual @Overload boolean owns(Java_util_concurrent_locks_AbstractQueuedLongSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean release(int p0);
	@Virtual @Overload boolean releaseShared(int p0);
	@Virtual @Overload boolean tryAcquireNanos(int p0, int p1);
	@Virtual @Overload boolean tryAcquireSharedNanos(int p0, int p1);
	@Virtual @Overload int getQueueLength();
	@Virtual @Overload int getWaitQueueLength(Java_util_concurrent_locks_AbstractQueuedLongSynchronizer_ConditionObject p0);
	@Virtual @Overload void acquire(int p0);
	@Virtual @Overload void acquireInterruptibly(int p0);
	@Virtual @Overload void acquireShared(int p0);
	@Virtual @Overload void acquireSharedInterruptibly(int p0);
}

/* class java.util.concurrent.locks.AbstractQueuedSynchronizer */
class Java_util_concurrent_locks_AbstractQueuedSynchronizer extends Java_util_concurrent_locks_AbstractOwnableSynchronizer {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Thread getFirstQueuedThread();
	@Virtual @Overload Java_util_Collection getExclusiveQueuedThreads();
	@Virtual @Overload Java_util_Collection getQueuedThreads();
	@Virtual @Overload Java_util_Collection getSharedQueuedThreads();
	@Virtual @Overload Java_util_Collection getWaitingThreads(Java_util_concurrent_locks_AbstractQueuedSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean hasContended();
	@Virtual @Overload boolean hasQueuedPredecessors();
	@Virtual @Overload boolean hasQueuedThreads();
	@Virtual @Overload boolean hasWaiters(Java_util_concurrent_locks_AbstractQueuedSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean isQueued(Java_lang_Thread p0);
	@Virtual @Overload boolean owns(Java_util_concurrent_locks_AbstractQueuedSynchronizer_ConditionObject p0);
	@Virtual @Overload boolean release(int p0);
	@Virtual @Overload boolean releaseShared(int p0);
	@Virtual @Overload boolean tryAcquireNanos(int p0, int p1);
	@Virtual @Overload boolean tryAcquireSharedNanos(int p0, int p1);
	@Virtual @Overload int getQueueLength();
	@Virtual @Overload int getWaitQueueLength(Java_util_concurrent_locks_AbstractQueuedSynchronizer_ConditionObject p0);
	@Virtual @Overload void acquire(int p0);
	@Virtual @Overload void acquireInterruptibly(int p0);
	@Virtual @Overload void acquireShared(int p0);
	@Virtual @Overload void acquireSharedInterruptibly(int p0);
}

/* interface java.util.concurrent.locks.Condition */
class Java_util_concurrent_locks_Condition {
	/*-- Method --*/
	@Virtual @Overload boolean await(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload boolean awaitUntil(Java_util_Date p0);
	@Virtual @Overload int awaitNanos(int p0);
	@Virtual @Overload void await();
	@Virtual @Overload void awaitUninterruptibly();
	@Virtual @Overload void signal();
	@Virtual @Overload void signalAll();
}

/* interface java.util.concurrent.locks.Lock */
class Java_util_concurrent_locks_Lock {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_locks_Condition newCondition();
	@Virtual @Overload boolean tryLock();
	@Virtual @Overload boolean tryLock(int p0, Java_util_concurrent_TimeUnit p1);
	@Virtual @Overload void lock();
	@Virtual @Overload void lockInterruptibly();
	@Virtual @Overload void unlock();
}

/* class java.util.concurrent.locks.LockSupport */
class Java_util_concurrent_locks_LockSupport {
	/*-- Method --*/
	@Static @Overload Object getBlocker(Java_lang_Thread p0);
	@Static @Overload void park();
	@Static @Overload void park(Object p0);
	@Static @Overload void parkNanos(Object p0, int p1);
	@Static @Overload void parkNanos(int p0);
	@Static @Overload void parkUntil(Object p0, int p1);
	@Static @Overload void parkUntil(int p0);
	@Static @Overload void unpark(Java_lang_Thread p0);
}

/* interface java.util.concurrent.locks.ReadWriteLock */
class Java_util_concurrent_locks_ReadWriteLock {
	/*-- Method --*/
	@Virtual @Overload Java_util_concurrent_locks_Lock readLock();
	@Virtual @Overload Java_util_concurrent_locks_Lock writeLock();
}

/* class java.util.concurrent.locks.ReentrantLock */
class Java_util_concurrent_locks_ReentrantLock extends Java_util_concurrent_locks_Lock {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean hasQueuedThread(Java_lang_Thread p0);
	@Virtual @Overload boolean hasQueuedThreads();
	@Virtual @Overload boolean hasWaiters(Java_util_concurrent_locks_Condition p0);
	@Virtual @Overload boolean isFair();
	@Virtual @Overload boolean isHeldByCurrentThread();
	@Virtual @Overload boolean isLocked();
	@Virtual @Overload int getHoldCount();
	@Virtual @Overload int getQueueLength();
	@Virtual @Overload int getWaitQueueLength(Java_util_concurrent_locks_Condition p0);
}
@Overload Java_util_concurrent_locks_ReentrantLock Java_util_concurrent_locks_ReentrantLock.new();
@Overload Java_util_concurrent_locks_ReentrantLock Java_util_concurrent_locks_ReentrantLock.new(boolean p0);

/* class java.util.concurrent.locks.ReentrantReadWriteLock */
class Java_util_concurrent_locks_ReentrantReadWriteLock extends Java_util_concurrent_locks_ReadWriteLock {
	/*-- Method --*/
	@Virtual @Overload String toString();
	@Virtual @Overload boolean hasQueuedThread(Java_lang_Thread p0);
	@Virtual @Overload boolean hasQueuedThreads();
	@Virtual @Overload boolean hasWaiters(Java_util_concurrent_locks_Condition p0);
	@Virtual @Overload boolean isFair();
	@Virtual @Overload boolean isWriteLocked();
	@Virtual @Overload boolean isWriteLockedByCurrentThread();
	@Virtual @Overload int getQueueLength();
	@Virtual @Overload int getReadHoldCount();
	@Virtual @Overload int getReadLockCount();
	@Virtual @Overload int getWaitQueueLength(Java_util_concurrent_locks_Condition p0);
	@Virtual @Overload int getWriteHoldCount();
}
@Overload Java_util_concurrent_locks_ReentrantReadWriteLock Java_util_concurrent_locks_ReentrantReadWriteLock.new();
@Overload Java_util_concurrent_locks_ReentrantReadWriteLock Java_util_concurrent_locks_ReentrantReadWriteLock.new(boolean p0);

/*============================================================*/
/* java package javax.swing */

/*------------------------------------------------------------*/
/* unknown or another package classes .. */
class Java_applet_Applet;
class Java_awt_AWTKeyStroke;
class Java_awt_BasicStroke;
class Java_awt_Color;
class Java_awt_Component;
class Java_awt_Container;
class Java_awt_Cursor;
class Java_awt_DefaultKeyboardFocusManager;
class Java_awt_Dialog;
class Java_awt_Dialog_ModalityType;
class Java_awt_Dimension;
class Java_awt_FocusTraversalPolicy;
class Java_awt_Font;
class Java_awt_FontMetrics;
class Java_awt_Frame;
class Java_awt_Graphics;
class Java_awt_Graphics2D;
class Java_awt_GraphicsConfiguration;
class Java_awt_Image;
class Java_awt_Insets;
class Java_awt_ItemSelectable;
class Java_awt_LayoutManager;
class Java_awt_LayoutManager2;
class Java_awt_Paint;
class Java_awt_Point;
class Java_awt_Rectangle;
class Java_awt_Window;
class Java_awt_datatransfer_Clipboard;
class Java_awt_datatransfer_DataFlavor;
class Java_awt_datatransfer_Transferable;
class Java_awt_event_ActionEvent;
class Java_awt_event_ActionListener;
class Java_awt_event_AdjustmentListener;
class Java_awt_event_InputEvent;
class Java_awt_event_ItemListener;
class Java_awt_event_KeyEvent;
class Java_awt_event_MouseAdapter;
class Java_awt_event_MouseEvent;
class Java_awt_image_ImageObserver;
class Java_awt_image_RGBImageFilter;
class Java_awt_print_Printable;
class Java_beans_PropertyChangeEvent;
class Java_beans_PropertyChangeListener;
class Java_beans_PropertyChangeSupport;
class Java_beans_VetoableChangeListener;
class Java_io_File;
class Java_io_FilterInputStream;
class Java_io_InputStream;
class Java_io_PrintStream;
class Java_io_Serializable;
class Java_lang_Boolean;
class Java_lang_Character;
class Java_lang_ClassLoader;
class Java_lang_Comparable;
class Java_lang_Enum;
class Java_lang_Exception;
class Java_lang_Integer;
class Java_lang_Iterable;
class Java_lang_Number;
class Java_lang_Runnable;
class Java_net_URL;
class Java_text_Format;
class Java_text_MessageFormat;
class Java_util_Comparator;
class Java_util_Date;
class Java_util_Dictionary;
class Java_util_Enumeration;
class Java_util_EventListener;
class Java_util_EventObject;
class Java_util_Hashtable;
class Java_util_List;
class Java_util_Locale;
class Java_util_Vector;
class Java_util_concurrent_RunnableFuture;
class Javax_accessibility_Accessible;
class Javax_accessibility_AccessibleContext;
class Javax_accessibility_AccessibleStateSet;
class Javax_swing_GroupLayout_Alignment;
class Javax_swing_GroupLayout_Group;
class Javax_swing_GroupLayout_ParallelGroup;
class Javax_swing_GroupLayout_SequentialGroup;
class Javax_swing_JComboBox_KeySelectionManager;
class Javax_swing_JFormattedTextField_AbstractFormatter;
class Javax_swing_JFormattedTextField_AbstractFormatterFactory;
class Javax_swing_JInternalFrame_JDesktopIcon;
class Javax_swing_JList_DropLocation;
class Javax_swing_JTable_DropLocation;
class Javax_swing_JTable_PrintMode;
class Javax_swing_JTree_DropLocation;
class Javax_swing_LayoutStyle_ComponentPlacement;
class Javax_swing_RowFilter_ComparisonType;
class Javax_swing_SpringLayout_Constraints;
class Javax_swing_SwingWorker_StateValue;
class Javax_swing_TransferHandler_TransferSupport;
class Javax_swing_UIManager_LookAndFeelInfo;
class Javax_swing_border_Border;
class Javax_swing_border_CompoundBorder;
class Javax_swing_border_MatteBorder;
class Javax_swing_border_TitledBorder;
class Javax_swing_colorchooser_AbstractColorChooserPanel;
class Javax_swing_colorchooser_ColorSelectionModel;
class Javax_swing_event_AncestorListener;
class Javax_swing_event_CellEditorListener;
class Javax_swing_event_ChangeEvent;
class Javax_swing_event_ChangeListener;
class Javax_swing_event_HyperlinkEvent;
class Javax_swing_event_HyperlinkListener;
class Javax_swing_event_InternalFrameListener;
class Javax_swing_event_ListDataEvent;
class Javax_swing_event_ListDataListener;
class Javax_swing_event_ListSelectionEvent;
class Javax_swing_event_ListSelectionListener;
class Javax_swing_event_MenuDragMouseEvent;
class Javax_swing_event_MenuDragMouseListener;
class Javax_swing_event_MenuKeyEvent;
class Javax_swing_event_MenuKeyListener;
class Javax_swing_event_MenuListener;
class Javax_swing_event_PopupMenuListener;
class Javax_swing_event_RowSorterEvent;
class Javax_swing_event_RowSorterListener;
class Javax_swing_event_TableColumnModelEvent;
class Javax_swing_event_TableModelEvent;
class Javax_swing_event_TreeExpansionListener;
class Javax_swing_event_TreeSelectionListener;
class Javax_swing_event_TreeWillExpandListener;
class Javax_swing_filechooser_FileFilter;
class Javax_swing_filechooser_FileSystemView;
class Javax_swing_filechooser_FileView;
class Javax_swing_plaf_ButtonUI;
class Javax_swing_plaf_ColorChooserUI;
class Javax_swing_plaf_ComboBoxUI;
class Javax_swing_plaf_ComponentUI;
class Javax_swing_plaf_DesktopPaneUI;
class Javax_swing_plaf_FileChooserUI;
class Javax_swing_plaf_InternalFrameUI;
class Javax_swing_plaf_LabelUI;
class Javax_swing_plaf_LayerUI;
class Javax_swing_plaf_ListUI;
class Javax_swing_plaf_MenuBarUI;
class Javax_swing_plaf_MenuItemUI;
class Javax_swing_plaf_OptionPaneUI;
class Javax_swing_plaf_PanelUI;
class Javax_swing_plaf_PopupMenuUI;
class Javax_swing_plaf_ProgressBarUI;
class Javax_swing_plaf_RootPaneUI;
class Javax_swing_plaf_ScrollBarUI;
class Javax_swing_plaf_ScrollPaneUI;
class Javax_swing_plaf_SeparatorUI;
class Javax_swing_plaf_SliderUI;
class Javax_swing_plaf_SpinnerUI;
class Javax_swing_plaf_SplitPaneUI;
class Javax_swing_plaf_TabbedPaneUI;
class Javax_swing_plaf_TableUI;
class Javax_swing_plaf_ToolBarUI;
class Javax_swing_plaf_ToolTipUI;
class Javax_swing_plaf_TreeUI;
class Javax_swing_plaf_ViewportUI;
class Javax_swing_table_JTableHeader;
class Javax_swing_table_TableCellEditor;
class Javax_swing_table_TableCellRenderer;
class Javax_swing_table_TableColumn;
class Javax_swing_table_TableColumnModel;
class Javax_swing_table_TableModel;
class Javax_swing_text_AttributeSet;
class Javax_swing_text_Document;
class Javax_swing_text_EditorKit;
class Javax_swing_text_JTextComponent;
class Javax_swing_text_JTextComponent_KeyBinding;
class Javax_swing_text_MutableAttributeSet;
class Javax_swing_text_Position_Bias;
class Javax_swing_text_Style;
class Javax_swing_text_StyledDocument;
class Javax_swing_tree_TreeCellEditor;
class Javax_swing_tree_TreeCellRenderer;
class Javax_swing_tree_TreeModel;
class Javax_swing_tree_TreeNode;
class Javax_swing_tree_TreePath;
class Javax_swing_tree_TreeSelectionModel;

/*------------------------------------------------------------*/
/* this package classes .. */
class Javax_swing_Action extends Java_awt_event_ActionListener;
class Javax_swing_AbstractAction extends Javax_swing_Action;
class Javax_swing_JComponent extends Java_awt_Container;
class Javax_swing_AbstractButton extends Javax_swing_JComponent;
class Javax_swing_CellEditor;
class Javax_swing_AbstractCellEditor extends Javax_swing_CellEditor;
class Javax_swing_ListModel;
class Javax_swing_AbstractListModel extends Javax_swing_ListModel;
class Javax_swing_SpinnerModel;
class Javax_swing_AbstractSpinnerModel extends Javax_swing_SpinnerModel;
class Javax_swing_ActionMap extends Java_io_Serializable;
class Javax_swing_BorderFactory;
class Javax_swing_BoundedRangeModel;
class Javax_swing_Box extends Javax_swing_JComponent;
class Javax_swing_BoxLayout extends Java_awt_LayoutManager2;
class Javax_swing_ButtonGroup extends Java_io_Serializable;
class Javax_swing_ButtonModel extends Java_awt_ItemSelectable;
class Javax_swing_CellRendererPane extends Java_awt_Container;
class Javax_swing_ComboBoxEditor;
class Javax_swing_ComboBoxModel extends Javax_swing_ListModel;
class Javax_swing_InputMap extends Java_io_Serializable;
class Javax_swing_ComponentInputMap extends Javax_swing_InputMap;
class Javax_swing_DebugGraphics extends Java_awt_Graphics;
class Javax_swing_DefaultBoundedRangeModel extends Javax_swing_BoundedRangeModel;
class Javax_swing_DefaultButtonModel extends Javax_swing_ButtonModel;
class Javax_swing_DefaultCellEditor extends Javax_swing_AbstractCellEditor;
class Javax_swing_DefaultComboBoxModel extends Javax_swing_AbstractListModel;
class Javax_swing_DesktopManager;
class Javax_swing_DefaultDesktopManager extends Javax_swing_DesktopManager;
class Javax_swing_FocusManager extends Java_awt_DefaultKeyboardFocusManager;
class Javax_swing_DefaultFocusManager extends Javax_swing_FocusManager;
class Javax_swing_JLabel extends Javax_swing_JComponent;
class Javax_swing_DefaultListCellRenderer extends Javax_swing_JLabel;
class Javax_swing_DefaultListModel extends Javax_swing_AbstractListModel;
class Javax_swing_ListSelectionModel;
class Javax_swing_DefaultListSelectionModel extends Javax_swing_ListSelectionModel;
class Javax_swing_RowSorter;
class Javax_swing_DefaultRowSorter extends Javax_swing_RowSorter;
class Javax_swing_SingleSelectionModel;
class Javax_swing_DefaultSingleSelectionModel extends Javax_swing_SingleSelectionModel;
class Javax_swing_DropMode extends Java_lang_Enum;
class Javax_swing_GrayFilter extends Java_awt_image_RGBImageFilter;
class Javax_swing_GroupLayout extends Java_awt_LayoutManager2;
class Javax_swing_Icon;
class Javax_swing_ImageIcon extends Javax_swing_Icon;
class Javax_swing_InputVerifier;
class Javax_swing_InternalFrameFocusTraversalPolicy extends Java_awt_FocusTraversalPolicy;
class Javax_swing_JApplet extends Java_applet_Applet;
class Javax_swing_JButton extends Javax_swing_AbstractButton;
class Javax_swing_JToggleButton extends Javax_swing_AbstractButton;
class Javax_swing_JCheckBox extends Javax_swing_JToggleButton;
class Javax_swing_JMenuItem extends Javax_swing_AbstractButton;
class Javax_swing_JCheckBoxMenuItem extends Javax_swing_JMenuItem;
class Javax_swing_JColorChooser extends Javax_swing_JComponent;
class Javax_swing_JComboBox extends Javax_swing_JComponent;
class Javax_swing_JLayeredPane extends Javax_swing_JComponent;
class Javax_swing_JDesktopPane extends Javax_swing_JLayeredPane;
class Javax_swing_JDialog extends Java_awt_Dialog;
class Javax_swing_JEditorPane extends Javax_swing_text_JTextComponent;
class Javax_swing_JFileChooser extends Javax_swing_JComponent;
class Javax_swing_JTextField extends Javax_swing_text_JTextComponent;
class Javax_swing_JFormattedTextField extends Javax_swing_JTextField;
class Javax_swing_JFrame extends Java_awt_Frame;
class Javax_swing_JInternalFrame extends Javax_swing_JComponent;
class Javax_swing_JLayer extends Javax_swing_JComponent;
class Javax_swing_JList extends Javax_swing_JComponent;
class Javax_swing_JMenu extends Javax_swing_JMenuItem;
class Javax_swing_JMenuBar extends Javax_swing_JComponent;
class Javax_swing_JOptionPane extends Javax_swing_JComponent;
class Javax_swing_JPanel extends Javax_swing_JComponent;
class Javax_swing_JPasswordField extends Javax_swing_JTextField;
class Javax_swing_JPopupMenu extends Javax_swing_JComponent;
class Javax_swing_JProgressBar extends Javax_swing_JComponent;
class Javax_swing_JRadioButton extends Javax_swing_JToggleButton;
class Javax_swing_JRadioButtonMenuItem extends Javax_swing_JMenuItem;
class Javax_swing_JRootPane extends Javax_swing_JComponent;
class Javax_swing_JScrollBar extends Javax_swing_JComponent;
class Javax_swing_JScrollPane extends Javax_swing_JComponent;
class Javax_swing_JSeparator extends Javax_swing_JComponent;
class Javax_swing_JSlider extends Javax_swing_JComponent;
class Javax_swing_JSpinner extends Javax_swing_JComponent;
class Javax_swing_JSplitPane extends Javax_swing_JComponent;
class Javax_swing_JTabbedPane extends Javax_swing_JComponent;
class Javax_swing_JTable extends Javax_swing_JComponent;
class Javax_swing_JTextArea extends Javax_swing_text_JTextComponent;
class Javax_swing_JTextPane extends Javax_swing_JEditorPane;
class Javax_swing_JToolBar extends Javax_swing_JComponent;
class Javax_swing_JToolTip extends Javax_swing_JComponent;
class Javax_swing_JTree extends Javax_swing_JComponent;
class Javax_swing_JViewport extends Javax_swing_JComponent;
class Javax_swing_JWindow extends Java_awt_Window;
class Javax_swing_KeyStroke extends Java_awt_AWTKeyStroke;
class Javax_swing_SortingFocusTraversalPolicy extends Javax_swing_InternalFrameFocusTraversalPolicy;
class Javax_swing_LayoutFocusTraversalPolicy extends Javax_swing_SortingFocusTraversalPolicy;
class Javax_swing_LayoutStyle;
class Javax_swing_ListCellRenderer;
class Javax_swing_LookAndFeel;
class Javax_swing_MenuElement;
class Javax_swing_MenuSelectionManager;
class Javax_swing_MutableComboBoxModel extends Javax_swing_ComboBoxModel;
class Javax_swing_OverlayLayout extends Java_awt_LayoutManager2;
class Javax_swing_Painter;
class Javax_swing_Popup;
class Javax_swing_PopupFactory;
class Javax_swing_ProgressMonitor extends Javax_accessibility_Accessible;
class Javax_swing_ProgressMonitorInputStream extends Java_io_FilterInputStream;
class Javax_swing_Renderer;
class Javax_swing_RepaintManager;
class Javax_swing_RootPaneContainer;
class Javax_swing_RowFilter;
class Javax_swing_ScrollPaneConstants;
class Javax_swing_ScrollPaneLayout extends Java_awt_LayoutManager;
class Javax_swing_Scrollable;
class Javax_swing_SizeRequirements extends Java_io_Serializable;
class Javax_swing_SizeSequence;
class Javax_swing_SortOrder extends Java_lang_Enum;
class Javax_swing_SpinnerDateModel extends Javax_swing_AbstractSpinnerModel;
class Javax_swing_SpinnerListModel extends Javax_swing_AbstractSpinnerModel;
class Javax_swing_SpinnerNumberModel extends Javax_swing_AbstractSpinnerModel;
class Javax_swing_Spring;
class Javax_swing_SpringLayout extends Java_awt_LayoutManager2;
class Javax_swing_SwingConstants;
class Javax_swing_SwingUtilities extends Javax_swing_SwingConstants;
class Javax_swing_SwingWorker extends Java_util_concurrent_RunnableFuture;
class Javax_swing_Timer extends Java_io_Serializable;
class Javax_swing_ToolTipManager extends Java_awt_event_MouseAdapter;
class Javax_swing_TransferHandler extends Java_io_Serializable;
class Javax_swing_UIDefaults extends Java_util_Hashtable;
class Javax_swing_UIManager extends Java_io_Serializable;
class Javax_swing_UnsupportedLookAndFeelException extends Java_lang_Exception;
class Javax_swing_ViewportLayout extends Java_awt_LayoutManager;
class Javax_swing_WindowConstants;

/*------------------------------------------------------------*/
/* interface javax.swing.Action */
class Javax_swing_Action extends Java_awt_event_ActionListener {
	/*-- Method --*/
	@Virtual @Overload Object getValue(String p0);
	@Virtual @Overload boolean isEnabled();
	@Virtual @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void putValue(String p0, Object p1);
	@Virtual @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void setEnabled(boolean p0);
}

/* class javax.swing.AbstractAction */
class Javax_swing_AbstractAction extends Javax_swing_Action {
	/*-- Method --*/
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Virtual @Overload Object[] getKeys();
}
@Overload Javax_swing_AbstractAction Javax_swing_AbstractAction.new();
@Overload Javax_swing_AbstractAction Javax_swing_AbstractAction.new(String p0);
@Overload Javax_swing_AbstractAction Javax_swing_AbstractAction.new(String p0, Javax_swing_Icon p1);

/* class javax.swing.JComponent */
class Javax_swing_JComponent extends Java_awt_Container {
	/*-- Method --*/
	@Static @Overload Java_util_Locale getDefaultLocale();
	@Static @Overload boolean isLightweightComponent(Java_awt_Component p0);
	@Static @Overload void setDefaultLocale(Java_util_Locale p0);
	@Virtual @Overload Java_awt_Container getTopLevelAncestor();
	@Virtual @Overload Java_awt_Insets getInsets(Java_awt_Insets p0);
	@Virtual @Overload Java_awt_Point getPopupLocation(Java_awt_event_MouseEvent p0);
	@Virtual @Overload Java_awt_Point getToolTipLocation(Java_awt_event_MouseEvent p0);
	@Virtual @Overload Java_awt_Rectangle getVisibleRect();
	@Virtual @Overload Java_awt_event_ActionListener getActionForKeyStroke(Javax_swing_KeyStroke p0);
	@Virtual @Overload Java_beans_VetoableChangeListener[] getVetoableChangeListeners();
	@Virtual @Overload Javax_swing_ActionMap getActionMap();
	@Virtual @Overload Javax_swing_InputMap getInputMap();
	@Virtual @Overload Javax_swing_InputMap getInputMap(int p0);
	@Virtual @Overload Javax_swing_InputVerifier getInputVerifier();
	@Virtual @Overload Javax_swing_JPopupMenu getComponentPopupMenu();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload Javax_swing_JToolTip createToolTip();
	@Virtual @Overload Javax_swing_KeyStroke[] getRegisteredKeyStrokes();
	@Virtual @Overload Javax_swing_TransferHandler getTransferHandler();
	@Virtual @Overload Javax_swing_border_Border getBorder();
	@Virtual @Overload Javax_swing_event_AncestorListener[] getAncestorListeners();
	@Virtual @Overload Object getClientProperty(Object p0);
	@Virtual @Overload String getToolTipText();
	@Virtual @Overload String getToolTipText(Java_awt_event_MouseEvent p0);
	@Virtual @Overload String getUIClassID();
	@Virtual @Overload boolean getAutoscrolls();
	@Virtual @Overload boolean getInheritsPopupMenu();
	@Virtual @Overload boolean getVerifyInputWhenFocusTarget();
	@Virtual @Overload boolean isOptimizedDrawingEnabled();
	@Virtual @Overload boolean isPaintingForPrint();
	@Virtual @Overload boolean isPaintingTile();
	@Virtual @Overload boolean isRequestFocusEnabled();
	@Virtual @Overload boolean requestFocus(boolean p0);
	@Virtual @Overload int getConditionForKeyStroke(Javax_swing_KeyStroke p0);
	@Virtual @Overload int getDebugGraphicsOptions();
	@Virtual @Overload void addAncestorListener(Javax_swing_event_AncestorListener p0);
	@Virtual @Overload void addVetoableChangeListener(Java_beans_VetoableChangeListener p0);
	@Virtual @Overload void computeVisibleRect(Java_awt_Rectangle p0);
	@Virtual @Overload void firePropertyChange(String p0, boolean p1, boolean p2);
	@Virtual @Overload void firePropertyChange(String p0, int p1, int p2);
	@Virtual @Overload void grabFocus();
	@Virtual @Overload void paintImmediately(Java_awt_Rectangle p0);
	@Virtual @Overload void paintImmediately(int p0, int p1, int p2, int p3);
	@Virtual @Overload void putClientProperty(Object p0, Object p1);
	@Virtual @Overload void registerKeyboardAction(Java_awt_event_ActionListener p0, Javax_swing_KeyStroke p1, int p2);
	@Virtual @Overload void registerKeyboardAction(Java_awt_event_ActionListener p0, String p1, Javax_swing_KeyStroke p2, int p3);
	@Virtual @Overload void removeAncestorListener(Javax_swing_event_AncestorListener p0);
	@Virtual @Overload void removeVetoableChangeListener(Java_beans_VetoableChangeListener p0);
	@Virtual @Overload void repaint(Java_awt_Rectangle p0);
	@Virtual @Overload void resetKeyboardActions();
	@Virtual @Overload void scrollRectToVisible(Java_awt_Rectangle p0);
	@Virtual @Overload void setActionMap(Javax_swing_ActionMap p0);
	@Virtual @Overload void setAlignmentX(float p0);
	@Virtual @Overload void setAlignmentY(float p0);
	@Virtual @Overload void setAutoscrolls(boolean p0);
	@Virtual @Overload void setBorder(Javax_swing_border_Border p0);
	@Virtual @Overload void setComponentPopupMenu(Javax_swing_JPopupMenu p0);
	@Virtual @Overload void setDebugGraphicsOptions(int p0);
	@Virtual @Overload void setDoubleBuffered(boolean p0);
	@Virtual @Overload void setInheritsPopupMenu(boolean p0);
	@Virtual @Overload void setInputMap(int p0, Javax_swing_InputMap p1);
	@Virtual @Overload void setInputVerifier(Javax_swing_InputVerifier p0);
	@Virtual @Overload void setOpaque(boolean p0);
	@Virtual @Overload void setRequestFocusEnabled(boolean p0);
	@Virtual @Overload void setToolTipText(String p0);
	@Virtual @Overload void setTransferHandler(Javax_swing_TransferHandler p0);
	@Virtual @Overload void setVerifyInputWhenFocusTarget(boolean p0);
	@Virtual @Overload void unregisterKeyboardAction(Javax_swing_KeyStroke p0);
	@Virtual @Overload void updateUI();
}
Javax_swing_JComponent Javax_swing_JComponent.new();

/* class javax.swing.AbstractButton */
class Javax_swing_AbstractButton extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Insets getMargin();
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Javax_swing_Action getAction();
	@Virtual @Overload Javax_swing_ButtonModel getModel();
	@Virtual @Overload Javax_swing_Icon getDisabledIcon();
	@Virtual @Overload Javax_swing_Icon getDisabledSelectedIcon();
	@Virtual @Overload Javax_swing_Icon getIcon();
	@Virtual @Overload Javax_swing_Icon getPressedIcon();
	@Virtual @Overload Javax_swing_Icon getRolloverIcon();
	@Virtual @Overload Javax_swing_Icon getRolloverSelectedIcon();
	@Virtual @Overload Javax_swing_Icon getSelectedIcon();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_ButtonUI getUI();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload String getText();
	@Virtual @Overload boolean getHideActionText();
	@Virtual @Overload boolean isBorderPainted();
	@Virtual @Overload boolean isContentAreaFilled();
	@Virtual @Overload boolean isFocusPainted();
	@Virtual @Overload boolean isRolloverEnabled();
	@Virtual @Overload boolean isSelected();
	@Virtual @Overload int getDisplayedMnemonicIndex();
	@Virtual @Overload int getHorizontalAlignment();
	@Virtual @Overload int getHorizontalTextPosition();
	@Virtual @Overload int getIconTextGap();
	@Virtual @Overload int getMnemonic();
	@Virtual @Overload int getMultiClickThreshhold();
	@Virtual @Overload int getVerticalAlignment();
	@Virtual @Overload int getVerticalTextPosition();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void doClick();
	@Virtual @Overload void doClick(int p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void setAction(Javax_swing_Action p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setBorderPainted(boolean p0);
	@Virtual @Overload void setContentAreaFilled(boolean p0);
	@Virtual @Overload void setDisabledIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setDisabledSelectedIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setDisplayedMnemonicIndex(int p0);
	@Virtual @Overload void setFocusPainted(boolean p0);
	@Virtual @Overload void setHideActionText(boolean p0);
	@Virtual @Overload void setHorizontalAlignment(int p0);
	@Virtual @Overload void setHorizontalTextPosition(int p0);
	@Virtual @Overload void setIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setIconTextGap(int p0);
	@Virtual @Overload void setMargin(Java_awt_Insets p0);
	@Virtual @Overload void setMnemonic(int p0);
	@Virtual @Overload void setModel(Javax_swing_ButtonModel p0);
	@Virtual @Overload void setMultiClickThreshhold(int p0);
	@Virtual @Overload void setPressedIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setRolloverEnabled(boolean p0);
	@Virtual @Overload void setRolloverIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setRolloverSelectedIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setSelected(boolean p0);
	@Virtual @Overload void setSelectedIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setText(String p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ButtonUI p0);
	@Virtual @Overload void setVerticalAlignment(int p0);
	@Virtual @Overload void setVerticalTextPosition(int p0);
}
Javax_swing_AbstractButton Javax_swing_AbstractButton.new();

/* interface javax.swing.CellEditor */
class Javax_swing_CellEditor {
	/*-- Method --*/
	@Virtual @Overload Object getCellEditorValue();
	@Virtual @Overload boolean isCellEditable(Java_util_EventObject p0);
	@Virtual @Overload boolean shouldSelectCell(Java_util_EventObject p0);
	@Virtual @Overload boolean stopCellEditing();
	@Virtual @Overload void addCellEditorListener(Javax_swing_event_CellEditorListener p0);
	@Virtual @Overload void cancelCellEditing();
	@Virtual @Overload void removeCellEditorListener(Javax_swing_event_CellEditorListener p0);
}

/* class javax.swing.AbstractCellEditor */
class Javax_swing_AbstractCellEditor extends Javax_swing_CellEditor {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_event_CellEditorListener[] getCellEditorListeners();
}
Javax_swing_AbstractCellEditor Javax_swing_AbstractCellEditor.new();

/* interface javax.swing.ListModel */
class Javax_swing_ListModel {
	/*-- Method --*/
	@Virtual @Overload Object getElementAt(int p0);
	@Virtual @Overload int getSize();
	@Virtual @Overload void addListDataListener(Javax_swing_event_ListDataListener p0);
	@Virtual @Overload void removeListDataListener(Javax_swing_event_ListDataListener p0);
}

/* class javax.swing.AbstractListModel */
class Javax_swing_AbstractListModel extends Javax_swing_ListModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_event_ListDataListener[] getListDataListeners();
}
Javax_swing_AbstractListModel Javax_swing_AbstractListModel.new();

/* interface javax.swing.SpinnerModel */
class Javax_swing_SpinnerModel {
	/*-- Method --*/
	@Virtual @Overload Object getNextValue();
	@Virtual @Overload Object getPreviousValue();
	@Virtual @Overload Object getValue();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setValue(Object p0);
}

/* class javax.swing.AbstractSpinnerModel */
class Javax_swing_AbstractSpinnerModel extends Javax_swing_SpinnerModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
}
Javax_swing_AbstractSpinnerModel Javax_swing_AbstractSpinnerModel.new();

/* class javax.swing.ActionMap */
class Javax_swing_ActionMap extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_Action get(Object p0);
	@Virtual @Overload Javax_swing_ActionMap getParent();
	@Virtual @Overload Object[] allKeys();
	@Virtual @Overload Object[] keys();
	@Virtual @Overload int size();
	@Virtual @Overload void clear();
	@Virtual @Overload void put(Object p0, Javax_swing_Action p1);
	@Virtual @Overload void remove(Object p0);
	@Virtual @Overload void setParent(Javax_swing_ActionMap p0);
}
Javax_swing_ActionMap Javax_swing_ActionMap.new();

/* class javax.swing.BorderFactory */
class Javax_swing_BorderFactory {
	/*-- Method --*/
	@Static @Overload Javax_swing_border_Border createBevelBorder(int p0);
	@Static @Overload Javax_swing_border_Border createBevelBorder(int p0, Java_awt_Color p1, Java_awt_Color p2);
	@Static @Overload Javax_swing_border_Border createBevelBorder(int p0, Java_awt_Color p1, Java_awt_Color p2, Java_awt_Color p3, Java_awt_Color p4);
	@Static @Overload Javax_swing_border_Border createDashedBorder(Java_awt_Paint p0);
	@Static @Overload Javax_swing_border_Border createDashedBorder(Java_awt_Paint p0, float p1, float p2);
	@Static @Overload Javax_swing_border_Border createDashedBorder(Java_awt_Paint p0, float p1, float p2, float p3, boolean p4);
	@Static @Overload Javax_swing_border_Border createEmptyBorder();
	@Static @Overload Javax_swing_border_Border createEmptyBorder(int p0, int p1, int p2, int p3);
	@Static @Overload Javax_swing_border_Border createEtchedBorder();
	@Static @Overload Javax_swing_border_Border createEtchedBorder(Java_awt_Color p0, Java_awt_Color p1);
	@Static @Overload Javax_swing_border_Border createEtchedBorder(int p0);
	@Static @Overload Javax_swing_border_Border createEtchedBorder(int p0, Java_awt_Color p1, Java_awt_Color p2);
	@Static @Overload Javax_swing_border_Border createLineBorder(Java_awt_Color p0);
	@Static @Overload Javax_swing_border_Border createLineBorder(Java_awt_Color p0, int p1);
	@Static @Overload Javax_swing_border_Border createLineBorder(Java_awt_Color p0, int p1, boolean p2);
	@Static @Overload Javax_swing_border_Border createLoweredBevelBorder();
	@Static @Overload Javax_swing_border_Border createLoweredSoftBevelBorder();
	@Static @Overload Javax_swing_border_Border createRaisedBevelBorder();
	@Static @Overload Javax_swing_border_Border createRaisedSoftBevelBorder();
	@Static @Overload Javax_swing_border_Border createSoftBevelBorder(int p0);
	@Static @Overload Javax_swing_border_Border createSoftBevelBorder(int p0, Java_awt_Color p1, Java_awt_Color p2);
	@Static @Overload Javax_swing_border_Border createSoftBevelBorder(int p0, Java_awt_Color p1, Java_awt_Color p2, Java_awt_Color p3, Java_awt_Color p4);
	@Static @Overload Javax_swing_border_Border createStrokeBorder(Java_awt_BasicStroke p0);
	@Static @Overload Javax_swing_border_Border createStrokeBorder(Java_awt_BasicStroke p0, Java_awt_Paint p1);
	@Static @Overload Javax_swing_border_CompoundBorder createCompoundBorder();
	@Static @Overload Javax_swing_border_CompoundBorder createCompoundBorder(Javax_swing_border_Border p0, Javax_swing_border_Border p1);
	@Static @Overload Javax_swing_border_MatteBorder createMatteBorder(int p0, int p1, int p2, int p3, Java_awt_Color p4);
	@Static @Overload Javax_swing_border_MatteBorder createMatteBorder(int p0, int p1, int p2, int p3, Javax_swing_Icon p4);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(Javax_swing_border_Border p0);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(Javax_swing_border_Border p0, String p1);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(Javax_swing_border_Border p0, String p1, int p2, int p3);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(Javax_swing_border_Border p0, String p1, int p2, int p3, Java_awt_Font p4);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(Javax_swing_border_Border p0, String p1, int p2, int p3, Java_awt_Font p4, Java_awt_Color p5);
	@Static @Overload Javax_swing_border_TitledBorder createTitledBorder(String p0);
}

/* interface javax.swing.BoundedRangeModel */
class Javax_swing_BoundedRangeModel {
	/*-- Method --*/
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload int getExtent();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getValue();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setExtent(int p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setRangeProperties(int p0, int p1, int p2, int p3, boolean p4);
	@Virtual @Overload void setValue(int p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
}

/* class javax.swing.Box */
class Javax_swing_Box extends Javax_swing_JComponent {
	/*-- Method --*/
	@Static @Overload Java_awt_Component createGlue();
	@Static @Overload Java_awt_Component createHorizontalGlue();
	@Static @Overload Java_awt_Component createHorizontalStrut(int p0);
	@Static @Overload Java_awt_Component createRigidArea(Java_awt_Dimension p0);
	@Static @Overload Java_awt_Component createVerticalGlue();
	@Static @Overload Java_awt_Component createVerticalStrut(int p0);
	@Static @Overload Javax_swing_Box createHorizontalBox();
	@Static @Overload Javax_swing_Box createVerticalBox();
}
Javax_swing_Box Javax_swing_Box.new(int p0);

/* class javax.swing.BoxLayout */
class Javax_swing_BoxLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Container getTarget();
	@Virtual @Overload int getAxis();
}
Javax_swing_BoxLayout Javax_swing_BoxLayout.new(Java_awt_Container p0, int p1);

/* class javax.swing.ButtonGroup */
class Javax_swing_ButtonGroup extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration getElements();
	@Virtual @Overload Javax_swing_ButtonModel getSelection();
	@Virtual @Overload boolean isSelected(Javax_swing_ButtonModel p0);
	@Virtual @Overload int getButtonCount();
	@Virtual @Overload void add(Javax_swing_AbstractButton p0);
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void remove(Javax_swing_AbstractButton p0);
	@Virtual @Overload void setSelected(Javax_swing_ButtonModel p0, boolean p1);
}
Javax_swing_ButtonGroup Javax_swing_ButtonGroup.new();

/* interface javax.swing.ButtonModel */
class Javax_swing_ButtonModel extends Java_awt_ItemSelectable {
	/*-- Method --*/
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload boolean isArmed();
	@Virtual @Overload boolean isEnabled();
	@Virtual @Overload boolean isPressed();
	@Virtual @Overload boolean isRollover();
	@Virtual @Overload boolean isSelected();
	@Virtual @Overload int getMnemonic();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setArmed(boolean p0);
	@Virtual @Overload void setEnabled(boolean p0);
	@Virtual @Overload void setGroup(Javax_swing_ButtonGroup p0);
	@Virtual @Overload void setMnemonic(int p0);
	@Virtual @Overload void setPressed(boolean p0);
	@Virtual @Overload void setRollover(boolean p0);
	@Virtual @Overload void setSelected(boolean p0);
}

/* class javax.swing.CellRendererPane */
class Javax_swing_CellRendererPane extends Java_awt_Container {
	/*-- Method --*/
	@Virtual @Overload void paintComponent(Java_awt_Graphics p0, Java_awt_Component p1, Java_awt_Container p2, Java_awt_Rectangle p3);
	@Virtual @Overload void paintComponent(Java_awt_Graphics p0, Java_awt_Component p1, Java_awt_Container p2, int p3, int p4, int p5, int p6);
	@Virtual @Overload void paintComponent(Java_awt_Graphics p0, Java_awt_Component p1, Java_awt_Container p2, int p3, int p4, int p5, int p6, boolean p7);
}
Javax_swing_CellRendererPane Javax_swing_CellRendererPane.new();

/* interface javax.swing.ComboBoxEditor */
class Javax_swing_ComboBoxEditor {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getEditorComponent();
	@Virtual @Overload Object getItem();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void selectAll();
	@Virtual @Overload void setItem(Object p0);
}

/* interface javax.swing.ComboBoxModel */
class Javax_swing_ComboBoxModel extends Javax_swing_ListModel {
	/*-- Method --*/
	@Virtual @Overload Object getSelectedItem();
	@Virtual @Overload void setSelectedItem(Object p0);
}

/* class javax.swing.InputMap */
class Javax_swing_InputMap extends Java_io_Serializable {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_InputMap getParent();
	@Virtual @Overload Javax_swing_KeyStroke[] allKeys();
	@Virtual @Overload Javax_swing_KeyStroke[] keys();
	@Virtual @Overload Object get(Javax_swing_KeyStroke p0);
	@Virtual @Overload int size();
	@Virtual @Overload void clear();
	@Virtual @Overload void put(Javax_swing_KeyStroke p0, Object p1);
	@Virtual @Overload void remove(Javax_swing_KeyStroke p0);
	@Virtual @Overload void setParent(Javax_swing_InputMap p0);
}
Javax_swing_InputMap Javax_swing_InputMap.new();

/* class javax.swing.ComponentInputMap */
class Javax_swing_ComponentInputMap extends Javax_swing_InputMap {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_JComponent getComponent();
}
Javax_swing_ComponentInputMap Javax_swing_ComponentInputMap.new(Javax_swing_JComponent p0);

/* class javax.swing.DebugGraphics */
class Javax_swing_DebugGraphics extends Java_awt_Graphics {
	/*-- Method --*/
	@Static @Overload Java_awt_Color flashColor();
	@Static @Overload Java_io_PrintStream logStream();
	@Static @Overload int flashCount();
	@Static @Overload int flashTime();
	@Static @Overload void setFlashColor(Java_awt_Color p0);
	@Static @Overload void setFlashCount(int p0);
	@Static @Overload void setFlashTime(int p0);
	@Static @Overload void setLogStream(Java_io_PrintStream p0);
	@Virtual @Overload boolean isDrawingBuffer();
	@Virtual @Overload int getDebugOptions();
	@Virtual @Overload void setDebugOptions(int p0);
}
@Overload Javax_swing_DebugGraphics Javax_swing_DebugGraphics.new();
@Overload Javax_swing_DebugGraphics Javax_swing_DebugGraphics.new(Java_awt_Graphics p0, Javax_swing_JComponent p1);
@Overload Javax_swing_DebugGraphics Javax_swing_DebugGraphics.new(Java_awt_Graphics p0);

/* class javax.swing.DefaultBoundedRangeModel */
class Javax_swing_DefaultBoundedRangeModel extends Javax_swing_BoundedRangeModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload String toString();
}
@Overload Javax_swing_DefaultBoundedRangeModel Javax_swing_DefaultBoundedRangeModel.new();
@Overload Javax_swing_DefaultBoundedRangeModel Javax_swing_DefaultBoundedRangeModel.new(int p0, int p1, int p2, int p3);

/* class javax.swing.DefaultButtonModel */
class Javax_swing_DefaultButtonModel extends Javax_swing_ButtonModel {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_ButtonGroup getGroup();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
}
Javax_swing_DefaultButtonModel Javax_swing_DefaultButtonModel.new();

/* class javax.swing.DefaultCellEditor */
class Javax_swing_DefaultCellEditor extends Javax_swing_AbstractCellEditor {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Java_awt_Component getTableCellEditorComponent(Javax_swing_JTable p0, Object p1, boolean p2, int p3, int p4);
	@Virtual @Overload Java_awt_Component getTreeCellEditorComponent(Javax_swing_JTree p0, Object p1, boolean p2, boolean p3, boolean p4, int p5);
	@Virtual @Overload int getClickCountToStart();
	@Virtual @Overload void setClickCountToStart(int p0);
}
@Overload Javax_swing_DefaultCellEditor Javax_swing_DefaultCellEditor.new(Javax_swing_JTextField p0);
@Overload Javax_swing_DefaultCellEditor Javax_swing_DefaultCellEditor.new(Javax_swing_JCheckBox p0);
@Overload Javax_swing_DefaultCellEditor Javax_swing_DefaultCellEditor.new(Javax_swing_JComboBox p0);

/* class javax.swing.DefaultComboBoxModel */
class Javax_swing_DefaultComboBoxModel extends Javax_swing_AbstractListModel {
	/*-- Method --*/
	@Virtual @Overload Object getSelectedItem();
	@Virtual @Overload int getIndexOf(Object p0);
	@Virtual @Overload void addElement(Object p0);
	@Virtual @Overload void insertElementAt(Object p0, int p1);
	@Virtual @Overload void removeAllElements();
	@Virtual @Overload void removeElement(Object p0);
	@Virtual @Overload void removeElementAt(int p0);
	@Virtual @Overload void setSelectedItem(Object p0);
}
@Overload Javax_swing_DefaultComboBoxModel Javax_swing_DefaultComboBoxModel.new();
@Overload Javax_swing_DefaultComboBoxModel Javax_swing_DefaultComboBoxModel.new(Object[] p0);
@Overload Javax_swing_DefaultComboBoxModel Javax_swing_DefaultComboBoxModel.new(Java_util_Vector p0);

/* interface javax.swing.DesktopManager */
class Javax_swing_DesktopManager {
	/*-- Method --*/
	@Virtual @Overload void activateFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void beginDraggingFrame(Javax_swing_JComponent p0);
	@Virtual @Overload void beginResizingFrame(Javax_swing_JComponent p0, int p1);
	@Virtual @Overload void closeFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void deactivateFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void deiconifyFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void dragFrame(Javax_swing_JComponent p0, int p1, int p2);
	@Virtual @Overload void endDraggingFrame(Javax_swing_JComponent p0);
	@Virtual @Overload void endResizingFrame(Javax_swing_JComponent p0);
	@Virtual @Overload void iconifyFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void maximizeFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void minimizeFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void openFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void resizeFrame(Javax_swing_JComponent p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void setBoundsForFrame(Javax_swing_JComponent p0, int p1, int p2, int p3, int p4);
}

/* class javax.swing.DefaultDesktopManager */
class Javax_swing_DefaultDesktopManager extends Javax_swing_DesktopManager {
}
Javax_swing_DefaultDesktopManager Javax_swing_DefaultDesktopManager.new();

/* class javax.swing.FocusManager */
class Javax_swing_FocusManager extends Java_awt_DefaultKeyboardFocusManager {
	/*-- Method --*/
	@Static @Overload Javax_swing_FocusManager getCurrentManager();
	@Static @Overload void setCurrentManager(Javax_swing_FocusManager p0);
}
Javax_swing_FocusManager Javax_swing_FocusManager.new();

/* class javax.swing.DefaultFocusManager */
class Javax_swing_DefaultFocusManager extends Javax_swing_FocusManager {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponentAfter(Java_awt_Container p0, Java_awt_Component p1);
	@Virtual @Overload Java_awt_Component getComponentBefore(Java_awt_Container p0, Java_awt_Component p1);
	@Virtual @Overload Java_awt_Component getFirstComponent(Java_awt_Container p0);
	@Virtual @Overload Java_awt_Component getLastComponent(Java_awt_Container p0);
	@Virtual @Overload boolean compareTabOrder(Java_awt_Component p0, Java_awt_Component p1);
}
Javax_swing_DefaultFocusManager Javax_swing_DefaultFocusManager.new();

/* class javax.swing.JLabel */
class Javax_swing_JLabel extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getLabelFor();
	@Virtual @Overload Javax_swing_Icon getDisabledIcon();
	@Virtual @Overload Javax_swing_Icon getIcon();
	@Virtual @Overload Javax_swing_plaf_LabelUI getUI();
	@Virtual @Overload String getText();
	@Virtual @Overload int getDisplayedMnemonic();
	@Virtual @Overload int getDisplayedMnemonicIndex();
	@Virtual @Overload int getHorizontalAlignment();
	@Virtual @Overload int getHorizontalTextPosition();
	@Virtual @Overload int getIconTextGap();
	@Virtual @Overload int getVerticalAlignment();
	@Virtual @Overload int getVerticalTextPosition();
	@Virtual @Overload void setDisabledIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setDisplayedMnemonic(int p0);
	@Virtual @Overload void setDisplayedMnemonicIndex(int p0);
	@Virtual @Overload void setHorizontalAlignment(int p0);
	@Virtual @Overload void setHorizontalTextPosition(int p0);
	@Virtual @Overload void setIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setIconTextGap(int p0);
	@Virtual @Overload void setLabelFor(Java_awt_Component p0);
	@Virtual @Overload void setText(String p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_LabelUI p0);
	@Virtual @Overload void setVerticalAlignment(int p0);
	@Virtual @Overload void setVerticalTextPosition(int p0);
}
@Overload Javax_swing_JLabel Javax_swing_JLabel.new(String p0, Javax_swing_Icon p1, int p2);
@Overload Javax_swing_JLabel Javax_swing_JLabel.new(String p0, int p1);
@Overload Javax_swing_JLabel Javax_swing_JLabel.new(String p0);
@Overload Javax_swing_JLabel Javax_swing_JLabel.new(Javax_swing_Icon p0, int p1);
@Overload Javax_swing_JLabel Javax_swing_JLabel.new(Javax_swing_Icon p0);
@Overload Javax_swing_JLabel Javax_swing_JLabel.new();

/* class javax.swing.DefaultListCellRenderer */
class Javax_swing_DefaultListCellRenderer extends Javax_swing_JLabel {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getListCellRendererComponent(Javax_swing_JList p0, Object p1, int p2, boolean p3, boolean p4);
}
Javax_swing_DefaultListCellRenderer Javax_swing_DefaultListCellRenderer.new();

/* class javax.swing.DefaultListModel */
class Javax_swing_DefaultListModel extends Javax_swing_AbstractListModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_Enumeration elements();
	@Virtual @Overload Object elementAt(int p0);
	@Virtual @Overload Object firstElement();
	@Virtual @Overload Object get(int p0);
	@Virtual @Overload Object lastElement();
	@Virtual @Overload Object remove(int p0);
	@Virtual @Overload Object set(int p0, Object p1);
	@Virtual @Overload Object[] toArray();
	@Virtual @Overload boolean contains(Object p0);
	@Virtual @Overload boolean isEmpty();
	@Virtual @Overload boolean removeElement(Object p0);
	@Virtual @Overload int capacity();
	@Virtual @Overload int indexOf(Object p0);
	@Virtual @Overload int indexOf(Object p0, int p1);
	@Virtual @Overload int lastIndexOf(Object p0);
	@Virtual @Overload int lastIndexOf(Object p0, int p1);
	@Virtual @Overload int size();
	@Virtual @Overload void add(int p0, Object p1);
	@Virtual @Overload void addElement(Object p0);
	@Virtual @Overload void clear();
	@Virtual @Overload void copyInto(Object[] p0);
	@Virtual @Overload void ensureCapacity(int p0);
	@Virtual @Overload void insertElementAt(Object p0, int p1);
	@Virtual @Overload void removeAllElements();
	@Virtual @Overload void removeElementAt(int p0);
	@Virtual @Overload void removeRange(int p0, int p1);
	@Virtual @Overload void setElementAt(Object p0, int p1);
	@Virtual @Overload void setSize(int p0);
	@Virtual @Overload void trimToSize();
}
Javax_swing_DefaultListModel Javax_swing_DefaultListModel.new();

/* interface javax.swing.ListSelectionModel */
class Javax_swing_ListSelectionModel {
	/*-- Method --*/
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload boolean isSelectedIndex(int p0);
	@Virtual @Overload boolean isSelectionEmpty();
	@Virtual @Overload int getAnchorSelectionIndex();
	@Virtual @Overload int getLeadSelectionIndex();
	@Virtual @Overload int getMaxSelectionIndex();
	@Virtual @Overload int getMinSelectionIndex();
	@Virtual @Overload int getSelectionMode();
	@Virtual @Overload void addListSelectionListener(Javax_swing_event_ListSelectionListener p0);
	@Virtual @Overload void addSelectionInterval(int p0, int p1);
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void insertIndexInterval(int p0, int p1, boolean p2);
	@Virtual @Overload void removeIndexInterval(int p0, int p1);
	@Virtual @Overload void removeListSelectionListener(Javax_swing_event_ListSelectionListener p0);
	@Virtual @Overload void removeSelectionInterval(int p0, int p1);
	@Virtual @Overload void setAnchorSelectionIndex(int p0);
	@Virtual @Overload void setLeadSelectionIndex(int p0);
	@Virtual @Overload void setSelectionInterval(int p0, int p1);
	@Virtual @Overload void setSelectionMode(int p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
}

/* class javax.swing.DefaultListSelectionModel */
class Javax_swing_DefaultListSelectionModel extends Javax_swing_ListSelectionModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_event_ListSelectionListener[] getListSelectionListeners();
	@Virtual @Overload Object clone();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isLeadAnchorNotificationEnabled();
	@Virtual @Overload void moveLeadSelectionIndex(int p0);
	@Virtual @Overload void setLeadAnchorNotificationEnabled(boolean p0);
}
Javax_swing_DefaultListSelectionModel Javax_swing_DefaultListSelectionModel.new();

/* class javax.swing.RowSorter */
class Javax_swing_RowSorter {
	/*-- Method --*/
	@Virtual @Overload Java_util_List getSortKeys();
	@Virtual @Overload Object getModel();
	@Virtual @Overload int convertRowIndexToModel(int p0);
	@Virtual @Overload int convertRowIndexToView(int p0);
	@Virtual @Overload int getModelRowCount();
	@Virtual @Overload int getViewRowCount();
	@Virtual @Overload void addRowSorterListener(Javax_swing_event_RowSorterListener p0);
	@Virtual @Overload void allRowsChanged();
	@Virtual @Overload void modelStructureChanged();
	@Virtual @Overload void removeRowSorterListener(Javax_swing_event_RowSorterListener p0);
	@Virtual @Overload void rowsDeleted(int p0, int p1);
	@Virtual @Overload void rowsInserted(int p0, int p1);
	@Virtual @Overload void rowsUpdated(int p0, int p1);
	@Virtual @Overload void rowsUpdated(int p0, int p1, int p2);
	@Virtual @Overload void setSortKeys(Java_util_List p0);
	@Virtual @Overload void toggleSortOrder(int p0);
}
Javax_swing_RowSorter Javax_swing_RowSorter.new();

/* class javax.swing.DefaultRowSorter */
class Javax_swing_DefaultRowSorter extends Javax_swing_RowSorter {
	/*-- Method --*/
	@Virtual @Overload Java_util_Comparator getComparator(int p0);
	@Virtual @Overload Javax_swing_RowFilter getRowFilter();
	@Virtual @Overload boolean getSortsOnUpdates();
	@Virtual @Overload boolean isSortable(int p0);
	@Virtual @Overload int getMaxSortKeys();
	@Virtual @Overload void setComparator(int p0, Java_util_Comparator p1);
	@Virtual @Overload void setMaxSortKeys(int p0);
	@Virtual @Overload void setRowFilter(Javax_swing_RowFilter p0);
	@Virtual @Overload void setSortable(int p0, boolean p1);
	@Virtual @Overload void setSortsOnUpdates(boolean p0);
	@Virtual @Overload void sort();
}
Javax_swing_DefaultRowSorter Javax_swing_DefaultRowSorter.new();

/* interface javax.swing.SingleSelectionModel */
class Javax_swing_SingleSelectionModel {
	/*-- Method --*/
	@Virtual @Overload boolean isSelected();
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setSelectedIndex(int p0);
}

/* class javax.swing.DefaultSingleSelectionModel */
class Javax_swing_DefaultSingleSelectionModel extends Javax_swing_SingleSelectionModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
}
Javax_swing_DefaultSingleSelectionModel Javax_swing_DefaultSingleSelectionModel.new();

/* class javax.swing.DropMode */
class Javax_swing_DropMode extends Java_lang_Enum {
	/*-- Method --*/
	@Static @Overload Javax_swing_DropMode valueOf(String p0);
	@Static @Overload Javax_swing_DropMode[] values();
}

/* class javax.swing.GrayFilter */
class Javax_swing_GrayFilter extends Java_awt_image_RGBImageFilter {
	/*-- Method --*/
	@Static @Overload Java_awt_Image createDisabledImage(Java_awt_Image p0);
}
Javax_swing_GrayFilter Javax_swing_GrayFilter.new(boolean p0, int p1);

/* class javax.swing.GroupLayout */
class Javax_swing_GroupLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_GroupLayout_ParallelGroup createBaselineGroup(boolean p0, boolean p1);
	@Virtual @Overload Javax_swing_GroupLayout_ParallelGroup createParallelGroup();
	@Virtual @Overload Javax_swing_GroupLayout_ParallelGroup createParallelGroup(Javax_swing_GroupLayout_Alignment p0);
	@Virtual @Overload Javax_swing_GroupLayout_ParallelGroup createParallelGroup(Javax_swing_GroupLayout_Alignment p0, boolean p1);
	@Virtual @Overload Javax_swing_GroupLayout_SequentialGroup createSequentialGroup();
	@Virtual @Overload Javax_swing_LayoutStyle getLayoutStyle();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getAutoCreateContainerGaps();
	@Virtual @Overload boolean getAutoCreateGaps();
	@Virtual @Overload boolean getHonorsVisibility();
	@Virtual @Overload void linkSize(Java_awt_Component[] p0);
	@Virtual @Overload void linkSize(int p0, Java_awt_Component[] p1);
	@Virtual @Overload void replace(Java_awt_Component p0, Java_awt_Component p1);
	@Virtual @Overload void setAutoCreateContainerGaps(boolean p0);
	@Virtual @Overload void setAutoCreateGaps(boolean p0);
	@Virtual @Overload void setHonorsVisibility(Java_awt_Component p0, Java_lang_Boolean p1);
	@Virtual @Overload void setHonorsVisibility(boolean p0);
	@Virtual @Overload void setHorizontalGroup(Javax_swing_GroupLayout_Group p0);
	@Virtual @Overload void setLayoutStyle(Javax_swing_LayoutStyle p0);
	@Virtual @Overload void setVerticalGroup(Javax_swing_GroupLayout_Group p0);
}
Javax_swing_GroupLayout Javax_swing_GroupLayout.new(Java_awt_Container p0);

/* interface javax.swing.Icon */
class Javax_swing_Icon {
	/*-- Method --*/
	@Virtual @Overload int getIconHeight();
	@Virtual @Overload int getIconWidth();
	@Virtual @Overload void paintIcon(Java_awt_Component p0, Java_awt_Graphics p1, int p2, int p3);
}

/* class javax.swing.ImageIcon */
class Javax_swing_ImageIcon extends Javax_swing_Icon {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Image getImage();
	@Virtual @Overload Java_awt_image_ImageObserver getImageObserver();
	@Virtual @Overload Javax_accessibility_AccessibleContext getAccessibleContext();
	@Virtual @Overload String getDescription();
	@Virtual @Overload String toString();
	@Virtual @Overload int getImageLoadStatus();
	@Virtual @Overload void setDescription(String p0);
	@Virtual @Overload void setImage(Java_awt_Image p0);
	@Virtual @Overload void setImageObserver(Java_awt_image_ImageObserver p0);
}
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(String p0, String p1);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(String p0);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(Java_net_URL p0, String p1);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(Java_net_URL p0);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(Java_awt_Image p0, String p1);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(Java_awt_Image p0);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(int[] p0, String p1);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new(int[] p0);
@Overload Javax_swing_ImageIcon Javax_swing_ImageIcon.new();

/* class javax.swing.InputVerifier */
class Javax_swing_InputVerifier {
	/*-- Method --*/
	@Virtual @Overload boolean shouldYieldFocus(Javax_swing_JComponent p0);
	@Virtual @Overload boolean verify(Javax_swing_JComponent p0);
}
Javax_swing_InputVerifier Javax_swing_InputVerifier.new();

/* class javax.swing.InternalFrameFocusTraversalPolicy */
class Javax_swing_InternalFrameFocusTraversalPolicy extends Java_awt_FocusTraversalPolicy {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getInitialComponent(Javax_swing_JInternalFrame p0);
}
Javax_swing_InternalFrameFocusTraversalPolicy Javax_swing_InternalFrameFocusTraversalPolicy.new();

/* class javax.swing.JApplet */
class Javax_swing_JApplet extends Java_applet_Applet {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JMenuBar getJMenuBar();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload Javax_swing_TransferHandler getTransferHandler();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setJMenuBar(Javax_swing_JMenuBar p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setTransferHandler(Javax_swing_TransferHandler p0);
}
Javax_swing_JApplet Javax_swing_JApplet.new();

/* class javax.swing.JButton */
class Javax_swing_JButton extends Javax_swing_AbstractButton {
	/*-- Method --*/
	@Virtual @Overload boolean isDefaultButton();
	@Virtual @Overload boolean isDefaultCapable();
	@Virtual @Overload void setDefaultCapable(boolean p0);
}
@Overload Javax_swing_JButton Javax_swing_JButton.new();
@Overload Javax_swing_JButton Javax_swing_JButton.new(Javax_swing_Icon p0);
@Overload Javax_swing_JButton Javax_swing_JButton.new(String p0);
@Overload Javax_swing_JButton Javax_swing_JButton.new(Javax_swing_Action p0);
@Overload Javax_swing_JButton Javax_swing_JButton.new(String p0, Javax_swing_Icon p1);

/* class javax.swing.JToggleButton */
class Javax_swing_JToggleButton extends Javax_swing_AbstractButton {
}
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new();
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(Javax_swing_Icon p0);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(Javax_swing_Icon p0, boolean p1);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(String p0);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(String p0, boolean p1);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(Javax_swing_Action p0);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JToggleButton Javax_swing_JToggleButton.new(String p0, Javax_swing_Icon p1, boolean p2);

/* class javax.swing.JCheckBox */
class Javax_swing_JCheckBox extends Javax_swing_JToggleButton {
	/*-- Method --*/
	@Virtual @Overload boolean isBorderPaintedFlat();
	@Virtual @Overload void setBorderPaintedFlat(boolean p0);
}
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new();
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(Javax_swing_Icon p0);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(Javax_swing_Icon p0, boolean p1);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(String p0);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(Javax_swing_Action p0);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(String p0, boolean p1);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JCheckBox Javax_swing_JCheckBox.new(String p0, Javax_swing_Icon p1, boolean p2);

/* class javax.swing.JMenuItem */
class Javax_swing_JMenuItem extends Javax_swing_AbstractButton {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Javax_swing_KeyStroke getAccelerator();
	@Virtual @Overload Javax_swing_MenuElement[] getSubElements();
	@Virtual @Overload Javax_swing_event_MenuDragMouseListener[] getMenuDragMouseListeners();
	@Virtual @Overload Javax_swing_event_MenuKeyListener[] getMenuKeyListeners();
	@Virtual @Overload boolean isArmed();
	@Virtual @Overload void addMenuDragMouseListener(Javax_swing_event_MenuDragMouseListener p0);
	@Virtual @Overload void addMenuKeyListener(Javax_swing_event_MenuKeyListener p0);
	@Virtual @Overload void menuSelectionChanged(boolean p0);
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void processMenuDragMouseEvent(Javax_swing_event_MenuDragMouseEvent p0);
	@Virtual @Overload void processMenuKeyEvent(Javax_swing_event_MenuKeyEvent p0);
	@Virtual @Overload void processMouseEvent(Java_awt_event_MouseEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void removeMenuDragMouseListener(Javax_swing_event_MenuDragMouseListener p0);
	@Virtual @Overload void removeMenuKeyListener(Javax_swing_event_MenuKeyListener p0);
	@Virtual @Overload void setAccelerator(Javax_swing_KeyStroke p0);
	@Virtual @Overload void setArmed(boolean p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_MenuItemUI p0);
}
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new();
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new(Javax_swing_Icon p0);
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new(String p0);
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new(Javax_swing_Action p0);
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JMenuItem Javax_swing_JMenuItem.new(String p0, int p1);

/* class javax.swing.JCheckBoxMenuItem */
class Javax_swing_JCheckBoxMenuItem extends Javax_swing_JMenuItem {
	/*-- Method --*/
	@Virtual @Overload boolean getState();
	@Virtual @Overload void setState(boolean p0);
}
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new();
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(Javax_swing_Icon p0);
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(String p0);
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(Javax_swing_Action p0);
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(String p0, boolean p1);
@Overload Javax_swing_JCheckBoxMenuItem Javax_swing_JCheckBoxMenuItem.new(String p0, Javax_swing_Icon p1, boolean p2);

/* class javax.swing.JColorChooser */
class Javax_swing_JColorChooser extends Javax_swing_JComponent {
	/*-- Method --*/
	@Static @Overload Java_awt_Color showDialog(Java_awt_Component p0, String p1, Java_awt_Color p2);
	@Static @Overload Javax_swing_JDialog createDialog(Java_awt_Component p0, String p1, boolean p2, Javax_swing_JColorChooser p3, Java_awt_event_ActionListener p4, Java_awt_event_ActionListener p5);
	@Virtual @Overload Java_awt_Color getColor();
	@Virtual @Overload Javax_swing_JComponent getPreviewPanel();
	@Virtual @Overload Javax_swing_colorchooser_AbstractColorChooserPanel removeChooserPanel(Javax_swing_colorchooser_AbstractColorChooserPanel p0);
	@Virtual @Overload Javax_swing_colorchooser_AbstractColorChooserPanel[] getChooserPanels();
	@Virtual @Overload Javax_swing_colorchooser_ColorSelectionModel getSelectionModel();
	@Virtual @Overload Javax_swing_plaf_ColorChooserUI getUI();
	@Virtual @Overload boolean getDragEnabled();
	@Virtual @Overload void addChooserPanel(Javax_swing_colorchooser_AbstractColorChooserPanel p0);
	@Virtual @Overload void setChooserPanels(Javax_swing_colorchooser_AbstractColorChooserPanel[] p0);
	@Virtual @Overload void setColor(Java_awt_Color p0);
	@Virtual @Overload void setColor(int p0);
	@Virtual @Overload void setColor(int p0, int p1, int p2);
	@Virtual @Overload void setDragEnabled(boolean p0);
	@Virtual @Overload void setPreviewPanel(Javax_swing_JComponent p0);
	@Virtual @Overload void setSelectionModel(Javax_swing_colorchooser_ColorSelectionModel p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ColorChooserUI p0);
}
@Overload Javax_swing_JColorChooser Javax_swing_JColorChooser.new();
@Overload Javax_swing_JColorChooser Javax_swing_JColorChooser.new(Java_awt_Color p0);
@Overload Javax_swing_JColorChooser Javax_swing_JColorChooser.new(Javax_swing_colorchooser_ColorSelectionModel p0);

/* class javax.swing.JComboBox */
class Javax_swing_JComboBox extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_awt_event_ItemListener[] getItemListeners();
	@Virtual @Overload Javax_swing_Action getAction();
	@Virtual @Overload Javax_swing_ComboBoxEditor getEditor();
	@Virtual @Overload Javax_swing_ComboBoxModel getModel();
	@Virtual @Overload Javax_swing_JComboBox_KeySelectionManager getKeySelectionManager();
	@Virtual @Overload Javax_swing_ListCellRenderer getRenderer();
	@Virtual @Overload Javax_swing_event_PopupMenuListener[] getPopupMenuListeners();
	@Virtual @Overload Javax_swing_plaf_ComboBoxUI getUI();
	@Virtual @Overload Object getItemAt(int p0);
	@Virtual @Overload Object getPrototypeDisplayValue();
	@Virtual @Overload Object getSelectedItem();
	@Virtual @Overload Object[] getSelectedObjects();
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload boolean isEditable();
	@Virtual @Overload boolean isLightWeightPopupEnabled();
	@Virtual @Overload boolean isPopupVisible();
	@Virtual @Overload boolean selectWithKeyChar(int p0);
	@Virtual @Overload int getItemCount();
	@Virtual @Overload int getMaximumRowCount();
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload void actionPerformed(Java_awt_event_ActionEvent p0);
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addItem(Object p0);
	@Virtual @Overload void addItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void addPopupMenuListener(Javax_swing_event_PopupMenuListener p0);
	@Virtual @Overload void configureEditor(Javax_swing_ComboBoxEditor p0, Object p1);
	@Virtual @Overload void contentsChanged(Javax_swing_event_ListDataEvent p0);
	@Virtual @Overload void firePopupMenuCanceled();
	@Virtual @Overload void firePopupMenuWillBecomeInvisible();
	@Virtual @Overload void firePopupMenuWillBecomeVisible();
	@Virtual @Overload void hidePopup();
	@Virtual @Overload void insertItemAt(Object p0, int p1);
	@Virtual @Overload void intervalAdded(Javax_swing_event_ListDataEvent p0);
	@Virtual @Overload void intervalRemoved(Javax_swing_event_ListDataEvent p0);
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeAllItems();
	@Virtual @Overload void removeItem(Object p0);
	@Virtual @Overload void removeItemAt(int p0);
	@Virtual @Overload void removeItemListener(Java_awt_event_ItemListener p0);
	@Virtual @Overload void removePopupMenuListener(Javax_swing_event_PopupMenuListener p0);
	@Virtual @Overload void setAction(Javax_swing_Action p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setEditable(boolean p0);
	@Virtual @Overload void setEditor(Javax_swing_ComboBoxEditor p0);
	@Virtual @Overload void setKeySelectionManager(Javax_swing_JComboBox_KeySelectionManager p0);
	@Virtual @Overload void setLightWeightPopupEnabled(boolean p0);
	@Virtual @Overload void setMaximumRowCount(int p0);
	@Virtual @Overload void setModel(Javax_swing_ComboBoxModel p0);
	@Virtual @Overload void setPopupVisible(boolean p0);
	@Virtual @Overload void setPrototypeDisplayValue(Object p0);
	@Virtual @Overload void setRenderer(Javax_swing_ListCellRenderer p0);
	@Virtual @Overload void setSelectedIndex(int p0);
	@Virtual @Overload void setSelectedItem(Object p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ComboBoxUI p0);
	@Virtual @Overload void showPopup();
}
@Overload Javax_swing_JComboBox Javax_swing_JComboBox.new(Javax_swing_ComboBoxModel p0);
@Overload Javax_swing_JComboBox Javax_swing_JComboBox.new(Object[] p0);
@Overload Javax_swing_JComboBox Javax_swing_JComboBox.new(Java_util_Vector p0);
@Overload Javax_swing_JComboBox Javax_swing_JComboBox.new();

/* class javax.swing.JLayeredPane */
class Javax_swing_JLayeredPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Static @Overload Javax_swing_JLayeredPane getLayeredPaneAbove(Java_awt_Component p0);
	@Static @Overload int getLayer(Javax_swing_JComponent p0);
	@Static @Overload void putLayer(Javax_swing_JComponent p0, int p1);
	@Virtual @Overload Java_awt_Component[] getComponentsInLayer(int p0);
	@Virtual @Overload int getComponentCountInLayer(int p0);
	@Virtual @Overload int getIndexOf(Java_awt_Component p0);
	@Virtual @Overload int getLayer(Java_awt_Component p0);
	@Virtual @Overload int getPosition(Java_awt_Component p0);
	@Virtual @Overload int highestLayer();
	@Virtual @Overload int lowestLayer();
	@Virtual @Overload void moveToBack(Java_awt_Component p0);
	@Virtual @Overload void moveToFront(Java_awt_Component p0);
	@Virtual @Overload void setLayer(Java_awt_Component p0, int p1);
	@Virtual @Overload void setLayer(Java_awt_Component p0, int p1, int p2);
	@Virtual @Overload void setPosition(Java_awt_Component p0, int p1);
}
Javax_swing_JLayeredPane Javax_swing_JLayeredPane.new();

/* class javax.swing.JDesktopPane */
class Javax_swing_JDesktopPane extends Javax_swing_JLayeredPane {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_DesktopManager getDesktopManager();
	@Virtual @Overload Javax_swing_JInternalFrame getSelectedFrame();
	@Virtual @Overload Javax_swing_JInternalFrame selectFrame(boolean p0);
	@Virtual @Overload Javax_swing_JInternalFrame[] getAllFrames();
	@Virtual @Overload Javax_swing_JInternalFrame[] getAllFramesInLayer(int p0);
	@Virtual @Overload Javax_swing_plaf_DesktopPaneUI getUI();
	@Virtual @Overload int getDragMode();
	@Virtual @Overload void setDesktopManager(Javax_swing_DesktopManager p0);
	@Virtual @Overload void setDragMode(int p0);
	@Virtual @Overload void setSelectedFrame(Javax_swing_JInternalFrame p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_DesktopPaneUI p0);
}
Javax_swing_JDesktopPane Javax_swing_JDesktopPane.new();

/* class javax.swing.JDialog */
class Javax_swing_JDialog extends Java_awt_Dialog {
	/*-- Method --*/
	@Static @Overload boolean isDefaultLookAndFeelDecorated();
	@Static @Overload void setDefaultLookAndFeelDecorated(boolean p0);
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JMenuBar getJMenuBar();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload Javax_swing_TransferHandler getTransferHandler();
	@Virtual @Overload int getDefaultCloseOperation();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setDefaultCloseOperation(int p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setJMenuBar(Javax_swing_JMenuBar p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setTransferHandler(Javax_swing_TransferHandler p0);
}
@Overload Javax_swing_JDialog Javax_swing_JDialog.new();
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Frame p0);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Frame p0, boolean p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Frame p0, String p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Frame p0, String p1, boolean p2);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Frame p0, String p1, boolean p2, Java_awt_GraphicsConfiguration p3);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Dialog p0);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Dialog p0, boolean p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Dialog p0, String p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Dialog p0, String p1, boolean p2);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Dialog p0, String p1, boolean p2, Java_awt_GraphicsConfiguration p3);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Window p0);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Window p0, Java_awt_Dialog_ModalityType p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Window p0, String p1);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Window p0, String p1, Java_awt_Dialog_ModalityType p2);
@Overload Javax_swing_JDialog Javax_swing_JDialog.new(Java_awt_Window p0, String p1, Java_awt_Dialog_ModalityType p2, Java_awt_GraphicsConfiguration p3);

/* class javax.swing.JEditorPane */
class Javax_swing_JEditorPane extends Javax_swing_text_JTextComponent {
	/*-- Method --*/
	@Static @Overload Javax_swing_text_EditorKit createEditorKitForContentType(String p0);
	@Static @Overload String getEditorKitClassNameForContentType(String p0);
	@Static @Overload void registerEditorKitForContentType(String p0, String p1);
	@Static @Overload void registerEditorKitForContentType(String p0, String p1, Java_lang_ClassLoader p2);
	@Virtual @Overload Java_net_URL getPage();
	@Virtual @Overload Javax_swing_event_HyperlinkListener[] getHyperlinkListeners();
	@Virtual @Overload Javax_swing_text_EditorKit getEditorKit();
	@Virtual @Overload Javax_swing_text_EditorKit getEditorKitForContentType(String p0);
	@Virtual @Overload String getContentType();
	@Virtual @Overload void addHyperlinkListener(Javax_swing_event_HyperlinkListener p0);
	@Virtual @Overload void fireHyperlinkUpdate(Javax_swing_event_HyperlinkEvent p0);
	@Virtual @Overload void read(Java_io_InputStream p0, Object p1);
	@Virtual @Overload void removeHyperlinkListener(Javax_swing_event_HyperlinkListener p0);
	@Virtual @Overload void scrollToReference(String p0);
	@Virtual @Overload void setContentType(String p0);
	@Virtual @Overload void setEditorKit(Javax_swing_text_EditorKit p0);
	@Virtual @Overload void setEditorKitForContentType(String p0, Javax_swing_text_EditorKit p1);
	@Virtual @Overload void setPage(Java_net_URL p0);
	@Virtual @Overload void setPage(String p0);
}
@Overload Javax_swing_JEditorPane Javax_swing_JEditorPane.new();
@Overload Javax_swing_JEditorPane Javax_swing_JEditorPane.new(Java_net_URL p0);
@Overload Javax_swing_JEditorPane Javax_swing_JEditorPane.new(String p0);
@Overload Javax_swing_JEditorPane Javax_swing_JEditorPane.new(String p0, String p1);

/* class javax.swing.JFileChooser */
class Javax_swing_JFileChooser extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_io_File getCurrentDirectory();
	@Virtual @Overload Java_io_File getSelectedFile();
	@Virtual @Overload Java_io_File[] getSelectedFiles();
	@Virtual @Overload Javax_swing_Icon getIcon(Java_io_File p0);
	@Virtual @Overload Javax_swing_JComponent getAccessory();
	@Virtual @Overload Javax_swing_filechooser_FileFilter getAcceptAllFileFilter();
	@Virtual @Overload Javax_swing_filechooser_FileFilter getFileFilter();
	@Virtual @Overload Javax_swing_filechooser_FileFilter[] getChoosableFileFilters();
	@Virtual @Overload Javax_swing_filechooser_FileSystemView getFileSystemView();
	@Virtual @Overload Javax_swing_filechooser_FileView getFileView();
	@Virtual @Overload Javax_swing_plaf_FileChooserUI getUI();
	@Virtual @Overload String getApproveButtonText();
	@Virtual @Overload String getApproveButtonToolTipText();
	@Virtual @Overload String getDescription(Java_io_File p0);
	@Virtual @Overload String getDialogTitle();
	@Virtual @Overload String getName(Java_io_File p0);
	@Virtual @Overload String getTypeDescription(Java_io_File p0);
	@Virtual @Overload boolean accept(Java_io_File p0);
	@Virtual @Overload boolean getControlButtonsAreShown();
	@Virtual @Overload boolean getDragEnabled();
	@Virtual @Overload boolean isAcceptAllFileFilterUsed();
	@Virtual @Overload boolean isDirectorySelectionEnabled();
	@Virtual @Overload boolean isFileHidingEnabled();
	@Virtual @Overload boolean isFileSelectionEnabled();
	@Virtual @Overload boolean isMultiSelectionEnabled();
	@Virtual @Overload boolean isTraversable(Java_io_File p0);
	@Virtual @Overload boolean removeChoosableFileFilter(Javax_swing_filechooser_FileFilter p0);
	@Virtual @Overload int getApproveButtonMnemonic();
	@Virtual @Overload int getDialogType();
	@Virtual @Overload int getFileSelectionMode();
	@Virtual @Overload int showDialog(Java_awt_Component p0, String p1);
	@Virtual @Overload int showOpenDialog(Java_awt_Component p0);
	@Virtual @Overload int showSaveDialog(Java_awt_Component p0);
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void addChoosableFileFilter(Javax_swing_filechooser_FileFilter p0);
	@Virtual @Overload void approveSelection();
	@Virtual @Overload void cancelSelection();
	@Virtual @Overload void changeToParentDirectory();
	@Virtual @Overload void ensureFileIsVisible(Java_io_File p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void rescanCurrentDirectory();
	@Virtual @Overload void resetChoosableFileFilters();
	@Virtual @Overload void setAcceptAllFileFilterUsed(boolean p0);
	@Virtual @Overload void setAccessory(Javax_swing_JComponent p0);
	@Virtual @Overload void setApproveButtonMnemonic(int p0);
	@Virtual @Overload void setApproveButtonText(String p0);
	@Virtual @Overload void setApproveButtonToolTipText(String p0);
	@Virtual @Overload void setControlButtonsAreShown(boolean p0);
	@Virtual @Overload void setCurrentDirectory(Java_io_File p0);
	@Virtual @Overload void setDialogTitle(String p0);
	@Virtual @Overload void setDialogType(int p0);
	@Virtual @Overload void setDragEnabled(boolean p0);
	@Virtual @Overload void setFileFilter(Javax_swing_filechooser_FileFilter p0);
	@Virtual @Overload void setFileHidingEnabled(boolean p0);
	@Virtual @Overload void setFileSelectionMode(int p0);
	@Virtual @Overload void setFileSystemView(Javax_swing_filechooser_FileSystemView p0);
	@Virtual @Overload void setFileView(Javax_swing_filechooser_FileView p0);
	@Virtual @Overload void setMultiSelectionEnabled(boolean p0);
	@Virtual @Overload void setSelectedFile(Java_io_File p0);
	@Virtual @Overload void setSelectedFiles(Java_io_File[] p0);
}
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new();
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new(String p0);
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new(Java_io_File p0);
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new(Javax_swing_filechooser_FileSystemView p0);
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new(Java_io_File p0, Javax_swing_filechooser_FileSystemView p1);
@Overload Javax_swing_JFileChooser Javax_swing_JFileChooser.new(String p0, Javax_swing_filechooser_FileSystemView p1);

/* class javax.swing.JTextField */
class Javax_swing_JTextField extends Javax_swing_text_JTextComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Javax_swing_Action getAction();
	@Virtual @Overload Javax_swing_BoundedRangeModel getHorizontalVisibility();
	@Virtual @Overload int getColumns();
	@Virtual @Overload int getHorizontalAlignment();
	@Virtual @Overload int getScrollOffset();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void postActionEvent();
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void setAction(Javax_swing_Action p0);
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setColumns(int p0);
	@Virtual @Overload void setHorizontalAlignment(int p0);
	@Virtual @Overload void setScrollOffset(int p0);
}
@Overload Javax_swing_JTextField Javax_swing_JTextField.new();
@Overload Javax_swing_JTextField Javax_swing_JTextField.new(String p0);
@Overload Javax_swing_JTextField Javax_swing_JTextField.new(int p0);
@Overload Javax_swing_JTextField Javax_swing_JTextField.new(String p0, int p1);
@Overload Javax_swing_JTextField Javax_swing_JTextField.new(Javax_swing_text_Document p0, String p1, int p2);

/* class javax.swing.JFormattedTextField */
class Javax_swing_JFormattedTextField extends Javax_swing_JTextField {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_JFormattedTextField_AbstractFormatter getFormatter();
	@Virtual @Overload Javax_swing_JFormattedTextField_AbstractFormatterFactory getFormatterFactory();
	@Virtual @Overload Object getValue();
	@Virtual @Overload boolean isEditValid();
	@Virtual @Overload int getFocusLostBehavior();
	@Virtual @Overload void commitEdit();
	@Virtual @Overload void setFocusLostBehavior(int p0);
	@Virtual @Overload void setFormatterFactory(Javax_swing_JFormattedTextField_AbstractFormatterFactory p0);
	@Virtual @Overload void setValue(Object p0);
}
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new();
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new(Object p0);
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new(Java_text_Format p0);
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new(Javax_swing_JFormattedTextField_AbstractFormatter p0);
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new(Javax_swing_JFormattedTextField_AbstractFormatterFactory p0);
@Overload Javax_swing_JFormattedTextField Javax_swing_JFormattedTextField.new(Javax_swing_JFormattedTextField_AbstractFormatterFactory p0, Object p1);

/* class javax.swing.JFrame */
class Javax_swing_JFrame extends Java_awt_Frame {
	/*-- Method --*/
	@Static @Overload boolean isDefaultLookAndFeelDecorated();
	@Static @Overload void setDefaultLookAndFeelDecorated(boolean p0);
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JMenuBar getJMenuBar();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload Javax_swing_TransferHandler getTransferHandler();
	@Virtual @Overload int getDefaultCloseOperation();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setDefaultCloseOperation(int p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setJMenuBar(Javax_swing_JMenuBar p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setTransferHandler(Javax_swing_TransferHandler p0);
}
@Overload Javax_swing_JFrame Javax_swing_JFrame.new();
@Overload Javax_swing_JFrame Javax_swing_JFrame.new(Java_awt_GraphicsConfiguration p0);
@Overload Javax_swing_JFrame Javax_swing_JFrame.new(String p0);
@Overload Javax_swing_JFrame Javax_swing_JFrame.new(String p0, Java_awt_GraphicsConfiguration p1);

/* class javax.swing.JInternalFrame */
class Javax_swing_JInternalFrame extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getFocusOwner();
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Component getMostRecentFocusOwner();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Java_awt_Cursor getLastCursor();
	@Virtual @Overload Java_awt_Rectangle getNormalBounds();
	@Virtual @Overload Javax_swing_Icon getFrameIcon();
	@Virtual @Overload Javax_swing_JDesktopPane getDesktopPane();
	@Virtual @Overload Javax_swing_JInternalFrame_JDesktopIcon getDesktopIcon();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JMenuBar getJMenuBar();
	@Virtual @Overload Javax_swing_event_InternalFrameListener[] getInternalFrameListeners();
	@Virtual @Overload Javax_swing_plaf_InternalFrameUI getUI();
	@Virtual @Overload String getTitle();
	@Virtual @Overload String getWarningString();
	@Virtual @Overload boolean isClosable();
	@Virtual @Overload boolean isClosed();
	@Virtual @Overload boolean isIcon();
	@Virtual @Overload boolean isIconifiable();
	@Virtual @Overload boolean isMaximizable();
	@Virtual @Overload boolean isMaximum();
	@Virtual @Overload boolean isResizable();
	@Virtual @Overload boolean isSelected();
	@Virtual @Overload int getDefaultCloseOperation();
	@Virtual @Overload int getLayer();
	@Virtual @Overload void addInternalFrameListener(Javax_swing_event_InternalFrameListener p0);
	@Virtual @Overload void dispose();
	@Virtual @Overload void doDefaultCloseAction();
	@Virtual @Overload void moveToBack();
	@Virtual @Overload void moveToFront();
	@Virtual @Overload void pack();
	@Virtual @Overload void removeInternalFrameListener(Javax_swing_event_InternalFrameListener p0);
	@Virtual @Overload void restoreSubcomponentFocus();
	@Virtual @Overload void setClosable(boolean p0);
	@Virtual @Overload void setClosed(boolean p0);
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setDefaultCloseOperation(int p0);
	@Virtual @Overload void setDesktopIcon(Javax_swing_JInternalFrame_JDesktopIcon p0);
	@Virtual @Overload void setFrameIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setIcon(boolean p0);
	@Virtual @Overload void setIconifiable(boolean p0);
	@Virtual @Overload void setJMenuBar(Javax_swing_JMenuBar p0);
	@Virtual @Overload void setLayer(Java_lang_Integer p0);
	@Virtual @Overload void setLayer(int p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setMaximizable(boolean p0);
	@Virtual @Overload void setMaximum(boolean p0);
	@Virtual @Overload void setNormalBounds(Java_awt_Rectangle p0);
	@Virtual @Overload void setResizable(boolean p0);
	@Virtual @Overload void setSelected(boolean p0);
	@Virtual @Overload void setTitle(String p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_InternalFrameUI p0);
	@Virtual @Overload void toBack();
	@Virtual @Overload void toFront();
}
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new();
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new(String p0);
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new(String p0, boolean p1);
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new(String p0, boolean p1, boolean p2);
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new(String p0, boolean p1, boolean p2, boolean p3);
@Overload Javax_swing_JInternalFrame Javax_swing_JInternalFrame.new(String p0, boolean p1, boolean p2, boolean p3, boolean p4);

/* class javax.swing.JLayer */
class Javax_swing_JLayer extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getView();
	@Virtual @Overload Java_awt_Dimension getPreferredScrollableViewportSize();
	@Virtual @Overload Javax_swing_JPanel createGlassPane();
	@Virtual @Overload Javax_swing_JPanel getGlassPane();
	@Virtual @Overload Javax_swing_plaf_LayerUI getUI();
	@Virtual @Overload boolean getScrollableTracksViewportHeight();
	@Virtual @Overload boolean getScrollableTracksViewportWidth();
	@Virtual @Overload int getLayerEventMask();
	@Virtual @Overload int getScrollableBlockIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getScrollableUnitIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload void propertyChange(Java_beans_PropertyChangeEvent p0);
	@Virtual @Overload void setGlassPane(Javax_swing_JPanel p0);
	@Virtual @Overload void setLayerEventMask(int p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_LayerUI p0);
	@Virtual @Overload void setView(Java_awt_Component p0);
}
@Overload Javax_swing_JLayer Javax_swing_JLayer.new();
@Overload Javax_swing_JLayer Javax_swing_JLayer.new(Java_awt_Component p0);
@Overload Javax_swing_JLayer Javax_swing_JLayer.new(Java_awt_Component p0, Javax_swing_plaf_LayerUI p1);

/* class javax.swing.JList */
class Javax_swing_JList extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getSelectionBackground();
	@Virtual @Overload Java_awt_Color getSelectionForeground();
	@Virtual @Overload Java_awt_Dimension getPreferredScrollableViewportSize();
	@Virtual @Overload Java_awt_Point indexToLocation(int p0);
	@Virtual @Overload Java_awt_Rectangle getCellBounds(int p0, int p1);
	@Virtual @Overload Java_util_List getSelectedValuesList();
	@Virtual @Overload Javax_swing_DropMode getDropMode();
	@Virtual @Overload Javax_swing_JList_DropLocation getDropLocation();
	@Virtual @Overload Javax_swing_ListCellRenderer getCellRenderer();
	@Virtual @Overload Javax_swing_ListModel getModel();
	@Virtual @Overload Javax_swing_ListSelectionModel getSelectionModel();
	@Virtual @Overload Javax_swing_event_ListSelectionListener[] getListSelectionListeners();
	@Virtual @Overload Javax_swing_plaf_ListUI getUI();
	@Virtual @Overload Object getPrototypeCellValue();
	@Virtual @Overload Object getSelectedValue();
	@Virtual @Overload boolean getDragEnabled();
	@Virtual @Overload boolean getScrollableTracksViewportHeight();
	@Virtual @Overload boolean getScrollableTracksViewportWidth();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload boolean isSelectedIndex(int p0);
	@Virtual @Overload boolean isSelectionEmpty();
	@Virtual @Overload int getAnchorSelectionIndex();
	@Virtual @Overload int getFirstVisibleIndex();
	@Virtual @Overload int getFixedCellHeight();
	@Virtual @Overload int getFixedCellWidth();
	@Virtual @Overload int getLastVisibleIndex();
	@Virtual @Overload int getLayoutOrientation();
	@Virtual @Overload int getLeadSelectionIndex();
	@Virtual @Overload int getMaxSelectionIndex();
	@Virtual @Overload int getMinSelectionIndex();
	@Virtual @Overload int getNextMatch(String p0, int p1, Javax_swing_text_Position_Bias p2);
	@Virtual @Overload int getScrollableBlockIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getScrollableUnitIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload int getSelectionMode();
	@Virtual @Overload int getVisibleRowCount();
	@Virtual @Overload int locationToIndex(Java_awt_Point p0);
	@Virtual @Overload int[] getSelectedIndices();
	@Virtual @Overload void addListSelectionListener(Javax_swing_event_ListSelectionListener p0);
	@Virtual @Overload void addSelectionInterval(int p0, int p1);
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void ensureIndexIsVisible(int p0);
	@Virtual @Overload void removeListSelectionListener(Javax_swing_event_ListSelectionListener p0);
	@Virtual @Overload void removeSelectionInterval(int p0, int p1);
	@Virtual @Overload void setCellRenderer(Javax_swing_ListCellRenderer p0);
	@Virtual @Overload void setDragEnabled(boolean p0);
	@Virtual @Overload void setDropMode(Javax_swing_DropMode p0);
	@Virtual @Overload void setFixedCellHeight(int p0);
	@Virtual @Overload void setFixedCellWidth(int p0);
	@Virtual @Overload void setLayoutOrientation(int p0);
	@Virtual @Overload void setListData(Java_util_Vector p0);
	@Virtual @Overload void setListData(Object[] p0);
	@Virtual @Overload void setModel(Javax_swing_ListModel p0);
	@Virtual @Overload void setPrototypeCellValue(Object p0);
	@Virtual @Overload void setSelectedIndex(int p0);
	@Virtual @Overload void setSelectedIndices(int[] p0);
	@Virtual @Overload void setSelectedValue(Object p0, boolean p1);
	@Virtual @Overload void setSelectionBackground(Java_awt_Color p0);
	@Virtual @Overload void setSelectionForeground(Java_awt_Color p0);
	@Virtual @Overload void setSelectionInterval(int p0, int p1);
	@Virtual @Overload void setSelectionMode(int p0);
	@Virtual @Overload void setSelectionModel(Javax_swing_ListSelectionModel p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ListUI p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
	@Virtual @Overload void setVisibleRowCount(int p0);
}
@Overload Javax_swing_JList Javax_swing_JList.new(Javax_swing_ListModel p0);
@Overload Javax_swing_JList Javax_swing_JList.new(Object[] p0);
@Overload Javax_swing_JList Javax_swing_JList.new(Java_util_Vector p0);
@Overload Javax_swing_JList Javax_swing_JList.new();

/* class javax.swing.JMenu */
class Javax_swing_JMenu extends Javax_swing_JMenuItem {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getMenuComponent(int p0);
	@Virtual @Overload Java_awt_Component[] getMenuComponents();
	@Virtual @Overload Javax_swing_JMenuItem add(Javax_swing_Action p0);
	@Virtual @Overload Javax_swing_JMenuItem add(Javax_swing_JMenuItem p0);
	@Virtual @Overload Javax_swing_JMenuItem add(String p0);
	@Virtual @Overload Javax_swing_JMenuItem getItem(int p0);
	@Virtual @Overload Javax_swing_JMenuItem insert(Javax_swing_Action p0, int p1);
	@Virtual @Overload Javax_swing_JMenuItem insert(Javax_swing_JMenuItem p0, int p1);
	@Virtual @Overload Javax_swing_JPopupMenu getPopupMenu();
	@Virtual @Overload Javax_swing_event_MenuListener[] getMenuListeners();
	@Virtual @Overload boolean isMenuComponent(Java_awt_Component p0);
	@Virtual @Overload boolean isPopupMenuVisible();
	@Virtual @Overload boolean isTearOff();
	@Virtual @Overload boolean isTopLevelMenu();
	@Virtual @Overload int getDelay();
	@Virtual @Overload int getItemCount();
	@Virtual @Overload int getMenuComponentCount();
	@Virtual @Overload void addMenuListener(Javax_swing_event_MenuListener p0);
	@Virtual @Overload void addSeparator();
	@Virtual @Overload void insert(String p0, int p1);
	@Virtual @Overload void insertSeparator(int p0);
	@Virtual @Overload void remove(Javax_swing_JMenuItem p0);
	@Virtual @Overload void removeMenuListener(Javax_swing_event_MenuListener p0);
	@Virtual @Overload void setDelay(int p0);
	@Virtual @Overload void setMenuLocation(int p0, int p1);
	@Virtual @Overload void setPopupMenuVisible(boolean p0);
}
@Overload Javax_swing_JMenu Javax_swing_JMenu.new();
@Overload Javax_swing_JMenu Javax_swing_JMenu.new(String p0);
@Overload Javax_swing_JMenu Javax_swing_JMenu.new(Javax_swing_Action p0);
@Overload Javax_swing_JMenu Javax_swing_JMenu.new(String p0, boolean p1);

/* class javax.swing.JMenuBar */
class Javax_swing_JMenuBar extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Java_awt_Insets getMargin();
	@Virtual @Overload Javax_swing_JMenu add(Javax_swing_JMenu p0);
	@Virtual @Overload Javax_swing_JMenu getHelpMenu();
	@Virtual @Overload Javax_swing_JMenu getMenu(int p0);
	@Virtual @Overload Javax_swing_MenuElement[] getSubElements();
	@Virtual @Overload Javax_swing_SingleSelectionModel getSelectionModel();
	@Virtual @Overload Javax_swing_plaf_MenuBarUI getUI();
	@Virtual @Overload boolean isBorderPainted();
	@Virtual @Overload boolean isSelected();
	@Virtual @Overload int getComponentIndex(Java_awt_Component p0);
	@Virtual @Overload int getMenuCount();
	@Virtual @Overload void menuSelectionChanged(boolean p0);
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void processMouseEvent(Java_awt_event_MouseEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void setBorderPainted(boolean p0);
	@Virtual @Overload void setHelpMenu(Javax_swing_JMenu p0);
	@Virtual @Overload void setMargin(Java_awt_Insets p0);
	@Virtual @Overload void setSelected(Java_awt_Component p0);
	@Virtual @Overload void setSelectionModel(Javax_swing_SingleSelectionModel p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_MenuBarUI p0);
}
Javax_swing_JMenuBar Javax_swing_JMenuBar.new();

/* class javax.swing.JOptionPane */
class Javax_swing_JOptionPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Static @Overload Java_awt_Frame getFrameForComponent(Java_awt_Component p0);
	@Static @Overload Java_awt_Frame getRootFrame();
	@Static @Overload Javax_swing_JDesktopPane getDesktopPaneForComponent(Java_awt_Component p0);
	@Static @Overload Object showInputDialog(Java_awt_Component p0, Object p1, String p2, int p3, Javax_swing_Icon p4, Object[] p5, Object p6);
	@Static @Overload Object showInternalInputDialog(Java_awt_Component p0, Object p1, String p2, int p3, Javax_swing_Icon p4, Object[] p5, Object p6);
	@Static @Overload String showInputDialog(Java_awt_Component p0, Object p1);
	@Static @Overload String showInputDialog(Java_awt_Component p0, Object p1, Object p2);
	@Static @Overload String showInputDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload String showInputDialog(Object p0);
	@Static @Overload String showInputDialog(Object p0, Object p1);
	@Static @Overload String showInternalInputDialog(Java_awt_Component p0, Object p1);
	@Static @Overload String showInternalInputDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload int showConfirmDialog(Java_awt_Component p0, Object p1);
	@Static @Overload int showConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload int showConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4);
	@Static @Overload int showConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4, Javax_swing_Icon p5);
	@Static @Overload int showInternalConfirmDialog(Java_awt_Component p0, Object p1);
	@Static @Overload int showInternalConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload int showInternalConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4);
	@Static @Overload int showInternalConfirmDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4, Javax_swing_Icon p5);
	@Static @Overload int showInternalOptionDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4, Javax_swing_Icon p5, Object[] p6, Object p7);
	@Static @Overload int showOptionDialog(Java_awt_Component p0, Object p1, String p2, int p3, int p4, Javax_swing_Icon p5, Object[] p6, Object p7);
	@Static @Overload void setRootFrame(Java_awt_Frame p0);
	@Static @Overload void showInternalMessageDialog(Java_awt_Component p0, Object p1);
	@Static @Overload void showInternalMessageDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload void showInternalMessageDialog(Java_awt_Component p0, Object p1, String p2, int p3, Javax_swing_Icon p4);
	@Static @Overload void showMessageDialog(Java_awt_Component p0, Object p1);
	@Static @Overload void showMessageDialog(Java_awt_Component p0, Object p1, String p2, int p3);
	@Static @Overload void showMessageDialog(Java_awt_Component p0, Object p1, String p2, int p3, Javax_swing_Icon p4);
	@Virtual @Overload Javax_swing_Icon getIcon();
	@Virtual @Overload Javax_swing_JDialog createDialog(Java_awt_Component p0, String p1);
	@Virtual @Overload Javax_swing_JDialog createDialog(String p0);
	@Virtual @Overload Javax_swing_JInternalFrame createInternalFrame(Java_awt_Component p0, String p1);
	@Virtual @Overload Javax_swing_plaf_OptionPaneUI getUI();
	@Virtual @Overload Object getInitialSelectionValue();
	@Virtual @Overload Object getInitialValue();
	@Virtual @Overload Object getInputValue();
	@Virtual @Overload Object getMessage();
	@Virtual @Overload Object getValue();
	@Virtual @Overload Object[] getOptions();
	@Virtual @Overload Object[] getSelectionValues();
	@Virtual @Overload boolean getWantsInput();
	@Virtual @Overload int getMaxCharactersPerLineCount();
	@Virtual @Overload int getMessageType();
	@Virtual @Overload int getOptionType();
	@Virtual @Overload void selectInitialValue();
	@Virtual @Overload void setIcon(Javax_swing_Icon p0);
	@Virtual @Overload void setInitialSelectionValue(Object p0);
	@Virtual @Overload void setInitialValue(Object p0);
	@Virtual @Overload void setInputValue(Object p0);
	@Virtual @Overload void setMessage(Object p0);
	@Virtual @Overload void setMessageType(int p0);
	@Virtual @Overload void setOptionType(int p0);
	@Virtual @Overload void setOptions(Object[] p0);
	@Virtual @Overload void setSelectionValues(Object[] p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_OptionPaneUI p0);
	@Virtual @Overload void setValue(Object p0);
	@Virtual @Overload void setWantsInput(boolean p0);
}
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new();
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0);
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0, int p1);
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0, int p1, int p2);
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0, int p1, int p2, Javax_swing_Icon p3);
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0, int p1, int p2, Javax_swing_Icon p3, Object[] p4);
@Overload Javax_swing_JOptionPane Javax_swing_JOptionPane.new(Object p0, int p1, int p2, Javax_swing_Icon p3, Object[] p4, Object p5);

/* class javax.swing.JPanel */
class Javax_swing_JPanel extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_plaf_PanelUI getUI();
	@Virtual @Overload void setUI(Javax_swing_plaf_PanelUI p0);
}
@Overload Javax_swing_JPanel Javax_swing_JPanel.new(Java_awt_LayoutManager p0, boolean p1);
@Overload Javax_swing_JPanel Javax_swing_JPanel.new(Java_awt_LayoutManager p0);
@Overload Javax_swing_JPanel Javax_swing_JPanel.new(boolean p0);
@Overload Javax_swing_JPanel Javax_swing_JPanel.new();

/* class javax.swing.JPasswordField */
class Javax_swing_JPasswordField extends Javax_swing_JTextField {
	/*-- Method --*/
	@Virtual @Overload boolean echoCharIsSet();
	@Virtual @Overload int getEchoChar();
	@Virtual @Overload int[] getPassword();
	@Virtual @Overload void setEchoChar(int p0);
}
@Overload Javax_swing_JPasswordField Javax_swing_JPasswordField.new();
@Overload Javax_swing_JPasswordField Javax_swing_JPasswordField.new(String p0);
@Overload Javax_swing_JPasswordField Javax_swing_JPasswordField.new(int p0);
@Overload Javax_swing_JPasswordField Javax_swing_JPasswordField.new(String p0, int p1);
@Overload Javax_swing_JPasswordField Javax_swing_JPasswordField.new(Javax_swing_text_Document p0, String p1, int p2);

/* class javax.swing.JPopupMenu */
class Javax_swing_JPopupMenu extends Javax_swing_JComponent {
	/*-- Method --*/
	@Static @Overload boolean getDefaultLightWeightPopupEnabled();
	@Static @Overload void setDefaultLightWeightPopupEnabled(boolean p0);
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Java_awt_Component getInvoker();
	@Virtual @Overload Java_awt_Insets getMargin();
	@Virtual @Overload Javax_swing_JMenuItem add(Javax_swing_Action p0);
	@Virtual @Overload Javax_swing_JMenuItem add(Javax_swing_JMenuItem p0);
	@Virtual @Overload Javax_swing_JMenuItem add(String p0);
	@Virtual @Overload Javax_swing_MenuElement[] getSubElements();
	@Virtual @Overload Javax_swing_SingleSelectionModel getSelectionModel();
	@Virtual @Overload Javax_swing_event_MenuKeyListener[] getMenuKeyListeners();
	@Virtual @Overload Javax_swing_event_PopupMenuListener[] getPopupMenuListeners();
	@Virtual @Overload Javax_swing_plaf_PopupMenuUI getUI();
	@Virtual @Overload String getLabel();
	@Virtual @Overload boolean isBorderPainted();
	@Virtual @Overload boolean isLightWeightPopupEnabled();
	@Virtual @Overload boolean isPopupTrigger(Java_awt_event_MouseEvent p0);
	@Virtual @Overload int getComponentIndex(Java_awt_Component p0);
	@Virtual @Overload void addMenuKeyListener(Javax_swing_event_MenuKeyListener p0);
	@Virtual @Overload void addPopupMenuListener(Javax_swing_event_PopupMenuListener p0);
	@Virtual @Overload void addSeparator();
	@Virtual @Overload void insert(Java_awt_Component p0, int p1);
	@Virtual @Overload void insert(Javax_swing_Action p0, int p1);
	@Virtual @Overload void menuSelectionChanged(boolean p0);
	@Virtual @Overload void pack();
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void processMouseEvent(Java_awt_event_MouseEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void removeMenuKeyListener(Javax_swing_event_MenuKeyListener p0);
	@Virtual @Overload void removePopupMenuListener(Javax_swing_event_PopupMenuListener p0);
	@Virtual @Overload void setBorderPainted(boolean p0);
	@Virtual @Overload void setInvoker(Java_awt_Component p0);
	@Virtual @Overload void setLabel(String p0);
	@Virtual @Overload void setLightWeightPopupEnabled(boolean p0);
	@Virtual @Overload void setPopupSize(Java_awt_Dimension p0);
	@Virtual @Overload void setPopupSize(int p0, int p1);
	@Virtual @Overload void setSelected(Java_awt_Component p0);
	@Virtual @Overload void setSelectionModel(Javax_swing_SingleSelectionModel p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_PopupMenuUI p0);
	@Virtual @Overload void show(Java_awt_Component p0, int p1, int p2);
}
@Overload Javax_swing_JPopupMenu Javax_swing_JPopupMenu.new();
@Overload Javax_swing_JPopupMenu Javax_swing_JPopupMenu.new(String p0);

/* class javax.swing.JProgressBar */
class Javax_swing_JProgressBar extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_BoundedRangeModel getModel();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_ProgressBarUI getUI();
	@Virtual @Overload String getString();
	@Virtual @Overload boolean isBorderPainted();
	@Virtual @Overload boolean isIndeterminate();
	@Virtual @Overload boolean isStringPainted();
	@Virtual @Overload float getPercentComplete();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload int getValue();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setBorderPainted(boolean p0);
	@Virtual @Overload void setIndeterminate(boolean p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setModel(Javax_swing_BoundedRangeModel p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setString(String p0);
	@Virtual @Overload void setStringPainted(boolean p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ProgressBarUI p0);
	@Virtual @Overload void setValue(int p0);
}
@Overload Javax_swing_JProgressBar Javax_swing_JProgressBar.new();
@Overload Javax_swing_JProgressBar Javax_swing_JProgressBar.new(int p0);
@Overload Javax_swing_JProgressBar Javax_swing_JProgressBar.new(int p0, int p1);
@Overload Javax_swing_JProgressBar Javax_swing_JProgressBar.new(int p0, int p1, int p2);
@Overload Javax_swing_JProgressBar Javax_swing_JProgressBar.new(Javax_swing_BoundedRangeModel p0);

/* class javax.swing.JRadioButton */
class Javax_swing_JRadioButton extends Javax_swing_JToggleButton {
}
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new();
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(Javax_swing_Icon p0);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(Javax_swing_Action p0);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(Javax_swing_Icon p0, boolean p1);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(String p0);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(String p0, boolean p1);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JRadioButton Javax_swing_JRadioButton.new(String p0, Javax_swing_Icon p1, boolean p2);

/* class javax.swing.JRadioButtonMenuItem */
class Javax_swing_JRadioButtonMenuItem extends Javax_swing_JMenuItem {
}
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new();
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(Javax_swing_Icon p0);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(String p0);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(Javax_swing_Action p0);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(String p0, Javax_swing_Icon p1);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(String p0, boolean p1);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(Javax_swing_Icon p0, boolean p1);
@Overload Javax_swing_JRadioButtonMenuItem Javax_swing_JRadioButtonMenuItem.new(String p0, Javax_swing_Icon p1, boolean p2);

/* class javax.swing.JRootPane */
class Javax_swing_JRootPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JButton getDefaultButton();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JMenuBar getJMenuBar();
	@Virtual @Overload Javax_swing_plaf_RootPaneUI getUI();
	@Virtual @Overload int getWindowDecorationStyle();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setDefaultButton(Javax_swing_JButton p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setJMenuBar(Javax_swing_JMenuBar p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_RootPaneUI p0);
	@Virtual @Overload void setWindowDecorationStyle(int p0);
}
Javax_swing_JRootPane Javax_swing_JRootPane.new();

/* class javax.swing.JScrollBar */
class Javax_swing_JScrollBar extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_event_AdjustmentListener[] getAdjustmentListeners();
	@Virtual @Overload Javax_swing_BoundedRangeModel getModel();
	@Virtual @Overload Javax_swing_plaf_ScrollBarUI getUI();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload int getBlockIncrement();
	@Virtual @Overload int getBlockIncrement(int p0);
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload int getUnitIncrement();
	@Virtual @Overload int getUnitIncrement(int p0);
	@Virtual @Overload int getValue();
	@Virtual @Overload int getVisibleAmount();
	@Virtual @Overload void addAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void removeAdjustmentListener(Java_awt_event_AdjustmentListener p0);
	@Virtual @Overload void setBlockIncrement(int p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setModel(Javax_swing_BoundedRangeModel p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ScrollBarUI p0);
	@Virtual @Overload void setUnitIncrement(int p0);
	@Virtual @Overload void setValue(int p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
	@Virtual @Overload void setValues(int p0, int p1, int p2, int p3);
	@Virtual @Overload void setVisibleAmount(int p0);
}
@Overload Javax_swing_JScrollBar Javax_swing_JScrollBar.new(int p0, int p1, int p2, int p3, int p4);
@Overload Javax_swing_JScrollBar Javax_swing_JScrollBar.new(int p0);
@Overload Javax_swing_JScrollBar Javax_swing_JScrollBar.new();

/* class javax.swing.JScrollPane */
class Javax_swing_JScrollPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getCorner(String p0);
	@Virtual @Overload Java_awt_Rectangle getViewportBorderBounds();
	@Virtual @Overload Javax_swing_JScrollBar createHorizontalScrollBar();
	@Virtual @Overload Javax_swing_JScrollBar createVerticalScrollBar();
	@Virtual @Overload Javax_swing_JScrollBar getHorizontalScrollBar();
	@Virtual @Overload Javax_swing_JScrollBar getVerticalScrollBar();
	@Virtual @Overload Javax_swing_JViewport getColumnHeader();
	@Virtual @Overload Javax_swing_JViewport getRowHeader();
	@Virtual @Overload Javax_swing_JViewport getViewport();
	@Virtual @Overload Javax_swing_border_Border getViewportBorder();
	@Virtual @Overload Javax_swing_plaf_ScrollPaneUI getUI();
	@Virtual @Overload boolean isWheelScrollingEnabled();
	@Virtual @Overload int getHorizontalScrollBarPolicy();
	@Virtual @Overload int getVerticalScrollBarPolicy();
	@Virtual @Overload void setColumnHeader(Javax_swing_JViewport p0);
	@Virtual @Overload void setColumnHeaderView(Java_awt_Component p0);
	@Virtual @Overload void setCorner(String p0, Java_awt_Component p1);
	@Virtual @Overload void setHorizontalScrollBar(Javax_swing_JScrollBar p0);
	@Virtual @Overload void setHorizontalScrollBarPolicy(int p0);
	@Virtual @Overload void setRowHeader(Javax_swing_JViewport p0);
	@Virtual @Overload void setRowHeaderView(Java_awt_Component p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ScrollPaneUI p0);
	@Virtual @Overload void setVerticalScrollBar(Javax_swing_JScrollBar p0);
	@Virtual @Overload void setVerticalScrollBarPolicy(int p0);
	@Virtual @Overload void setViewport(Javax_swing_JViewport p0);
	@Virtual @Overload void setViewportBorder(Javax_swing_border_Border p0);
	@Virtual @Overload void setViewportView(Java_awt_Component p0);
	@Virtual @Overload void setWheelScrollingEnabled(boolean p0);
}
@Overload Javax_swing_JScrollPane Javax_swing_JScrollPane.new(Java_awt_Component p0, int p1, int p2);
@Overload Javax_swing_JScrollPane Javax_swing_JScrollPane.new(Java_awt_Component p0);
@Overload Javax_swing_JScrollPane Javax_swing_JScrollPane.new(int p0, int p1);
@Overload Javax_swing_JScrollPane Javax_swing_JScrollPane.new();

/* class javax.swing.JSeparator */
class Javax_swing_JSeparator extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_plaf_SeparatorUI getUI();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_SeparatorUI p0);
}
@Overload Javax_swing_JSeparator Javax_swing_JSeparator.new();
@Overload Javax_swing_JSeparator Javax_swing_JSeparator.new(int p0);

/* class javax.swing.JSlider */
class Javax_swing_JSlider extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_util_Dictionary getLabelTable();
	@Virtual @Overload Java_util_Hashtable createStandardLabels(int p0);
	@Virtual @Overload Java_util_Hashtable createStandardLabels(int p0, int p1);
	@Virtual @Overload Javax_swing_BoundedRangeModel getModel();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_SliderUI getUI();
	@Virtual @Overload boolean getInverted();
	@Virtual @Overload boolean getPaintLabels();
	@Virtual @Overload boolean getPaintTicks();
	@Virtual @Overload boolean getPaintTrack();
	@Virtual @Overload boolean getSnapToTicks();
	@Virtual @Overload boolean getValueIsAdjusting();
	@Virtual @Overload int getExtent();
	@Virtual @Overload int getMajorTickSpacing();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload int getMinorTickSpacing();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload int getValue();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setExtent(int p0);
	@Virtual @Overload void setInverted(boolean p0);
	@Virtual @Overload void setLabelTable(Java_util_Dictionary p0);
	@Virtual @Overload void setMajorTickSpacing(int p0);
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setMinorTickSpacing(int p0);
	@Virtual @Overload void setModel(Javax_swing_BoundedRangeModel p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setPaintLabels(boolean p0);
	@Virtual @Overload void setPaintTicks(boolean p0);
	@Virtual @Overload void setPaintTrack(boolean p0);
	@Virtual @Overload void setSnapToTicks(boolean p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_SliderUI p0);
	@Virtual @Overload void setValue(int p0);
	@Virtual @Overload void setValueIsAdjusting(boolean p0);
}
@Overload Javax_swing_JSlider Javax_swing_JSlider.new();
@Overload Javax_swing_JSlider Javax_swing_JSlider.new(int p0);
@Overload Javax_swing_JSlider Javax_swing_JSlider.new(int p0, int p1);
@Overload Javax_swing_JSlider Javax_swing_JSlider.new(int p0, int p1, int p2);
@Overload Javax_swing_JSlider Javax_swing_JSlider.new(int p0, int p1, int p2, int p3);
@Overload Javax_swing_JSlider Javax_swing_JSlider.new(Javax_swing_BoundedRangeModel p0);

/* class javax.swing.JSpinner */
class Javax_swing_JSpinner extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_JComponent getEditor();
	@Virtual @Overload Javax_swing_SpinnerModel getModel();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_SpinnerUI getUI();
	@Virtual @Overload Object getNextValue();
	@Virtual @Overload Object getPreviousValue();
	@Virtual @Overload Object getValue();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void commitEdit();
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setEditor(Javax_swing_JComponent p0);
	@Virtual @Overload void setModel(Javax_swing_SpinnerModel p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_SpinnerUI p0);
	@Virtual @Overload void setValue(Object p0);
}
@Overload Javax_swing_JSpinner Javax_swing_JSpinner.new(Javax_swing_SpinnerModel p0);
@Overload Javax_swing_JSpinner Javax_swing_JSpinner.new();

/* class javax.swing.JSplitPane */
class Javax_swing_JSplitPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getBottomComponent();
	@Virtual @Overload Java_awt_Component getLeftComponent();
	@Virtual @Overload Java_awt_Component getRightComponent();
	@Virtual @Overload Java_awt_Component getTopComponent();
	@Virtual @Overload Javax_swing_plaf_SplitPaneUI getUI();
	@Virtual @Overload boolean isContinuousLayout();
	@Virtual @Overload boolean isOneTouchExpandable();
	@Virtual @Overload float getResizeWeight();
	@Virtual @Overload int getDividerLocation();
	@Virtual @Overload int getDividerSize();
	@Virtual @Overload int getLastDividerLocation();
	@Virtual @Overload int getMaximumDividerLocation();
	@Virtual @Overload int getMinimumDividerLocation();
	@Virtual @Overload int getOrientation();
	@Virtual @Overload void resetToPreferredSizes();
	@Virtual @Overload void setBottomComponent(Java_awt_Component p0);
	@Virtual @Overload void setContinuousLayout(boolean p0);
	@Virtual @Overload void setDividerLocation(float p0);
	@Virtual @Overload void setDividerLocation(int p0);
	@Virtual @Overload void setDividerSize(int p0);
	@Virtual @Overload void setLastDividerLocation(int p0);
	@Virtual @Overload void setLeftComponent(Java_awt_Component p0);
	@Virtual @Overload void setOneTouchExpandable(boolean p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setResizeWeight(float p0);
	@Virtual @Overload void setRightComponent(Java_awt_Component p0);
	@Virtual @Overload void setTopComponent(Java_awt_Component p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_SplitPaneUI p0);
}
@Overload Javax_swing_JSplitPane Javax_swing_JSplitPane.new();
@Overload Javax_swing_JSplitPane Javax_swing_JSplitPane.new(int p0);
@Overload Javax_swing_JSplitPane Javax_swing_JSplitPane.new(int p0, boolean p1);
@Overload Javax_swing_JSplitPane Javax_swing_JSplitPane.new(int p0, Java_awt_Component p1, Java_awt_Component p2);
@Overload Javax_swing_JSplitPane Javax_swing_JSplitPane.new(int p0, boolean p1, Java_awt_Component p2, Java_awt_Component p3);

/* class javax.swing.JTabbedPane */
class Javax_swing_JTabbedPane extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Color getBackgroundAt(int p0);
	@Virtual @Overload Java_awt_Color getForegroundAt(int p0);
	@Virtual @Overload Java_awt_Component getComponentAt(int p0);
	@Virtual @Overload Java_awt_Component getSelectedComponent();
	@Virtual @Overload Java_awt_Component getTabComponentAt(int p0);
	@Virtual @Overload Java_awt_Rectangle getBoundsAt(int p0);
	@Virtual @Overload Javax_swing_Icon getDisabledIconAt(int p0);
	@Virtual @Overload Javax_swing_Icon getIconAt(int p0);
	@Virtual @Overload Javax_swing_SingleSelectionModel getModel();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_TabbedPaneUI getUI();
	@Virtual @Overload String getTitleAt(int p0);
	@Virtual @Overload String getToolTipTextAt(int p0);
	@Virtual @Overload boolean isEnabledAt(int p0);
	@Virtual @Overload int getDisplayedMnemonicIndexAt(int p0);
	@Virtual @Overload int getMnemonicAt(int p0);
	@Virtual @Overload int getSelectedIndex();
	@Virtual @Overload int getTabCount();
	@Virtual @Overload int getTabLayoutPolicy();
	@Virtual @Overload int getTabPlacement();
	@Virtual @Overload int getTabRunCount();
	@Virtual @Overload int indexAtLocation(int p0, int p1);
	@Virtual @Overload int indexOfComponent(Java_awt_Component p0);
	@Virtual @Overload int indexOfTab(Javax_swing_Icon p0);
	@Virtual @Overload int indexOfTab(String p0);
	@Virtual @Overload int indexOfTabComponent(Java_awt_Component p0);
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void addTab(String p0, Java_awt_Component p1);
	@Virtual @Overload void addTab(String p0, Javax_swing_Icon p1, Java_awt_Component p2);
	@Virtual @Overload void addTab(String p0, Javax_swing_Icon p1, Java_awt_Component p2, String p3);
	@Virtual @Overload void insertTab(String p0, Javax_swing_Icon p1, Java_awt_Component p2, String p3, int p4);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeTabAt(int p0);
	@Virtual @Overload void setBackgroundAt(int p0, Java_awt_Color p1);
	@Virtual @Overload void setComponentAt(int p0, Java_awt_Component p1);
	@Virtual @Overload void setDisabledIconAt(int p0, Javax_swing_Icon p1);
	@Virtual @Overload void setDisplayedMnemonicIndexAt(int p0, int p1);
	@Virtual @Overload void setEnabledAt(int p0, boolean p1);
	@Virtual @Overload void setForegroundAt(int p0, Java_awt_Color p1);
	@Virtual @Overload void setIconAt(int p0, Javax_swing_Icon p1);
	@Virtual @Overload void setMnemonicAt(int p0, int p1);
	@Virtual @Overload void setModel(Javax_swing_SingleSelectionModel p0);
	@Virtual @Overload void setSelectedComponent(Java_awt_Component p0);
	@Virtual @Overload void setSelectedIndex(int p0);
	@Virtual @Overload void setTabComponentAt(int p0, Java_awt_Component p1);
	@Virtual @Overload void setTabLayoutPolicy(int p0);
	@Virtual @Overload void setTabPlacement(int p0);
	@Virtual @Overload void setTitleAt(int p0, String p1);
	@Virtual @Overload void setToolTipTextAt(int p0, String p1);
	@Virtual @Overload void setUI(Javax_swing_plaf_TabbedPaneUI p0);
}
@Overload Javax_swing_JTabbedPane Javax_swing_JTabbedPane.new();
@Overload Javax_swing_JTabbedPane Javax_swing_JTabbedPane.new(int p0);
@Overload Javax_swing_JTabbedPane Javax_swing_JTabbedPane.new(int p0, int p1);

/* class javax.swing.JTable */
class Javax_swing_JTable extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Class getColumnClass(int p0);
	@Virtual @Overload Java_awt_Color getGridColor();
	@Virtual @Overload Java_awt_Color getSelectionBackground();
	@Virtual @Overload Java_awt_Color getSelectionForeground();
	@Virtual @Overload Java_awt_Component getEditorComponent();
	@Virtual @Overload Java_awt_Component prepareEditor(Javax_swing_table_TableCellEditor p0, int p1, int p2);
	@Virtual @Overload Java_awt_Component prepareRenderer(Javax_swing_table_TableCellRenderer p0, int p1, int p2);
	@Virtual @Overload Java_awt_Dimension getIntercellSpacing();
	@Virtual @Overload Java_awt_Dimension getPreferredScrollableViewportSize();
	@Virtual @Overload Java_awt_Rectangle getCellRect(int p0, int p1, boolean p2);
	@Virtual @Overload Java_awt_print_Printable getPrintable(Javax_swing_JTable_PrintMode p0, Java_text_MessageFormat p1, Java_text_MessageFormat p2);
	@Virtual @Overload Javax_swing_DropMode getDropMode();
	@Virtual @Overload Javax_swing_JTable_DropLocation getDropLocation();
	@Virtual @Overload Javax_swing_ListSelectionModel getSelectionModel();
	@Virtual @Overload Javax_swing_RowSorter getRowSorter();
	@Virtual @Overload Javax_swing_plaf_TableUI getUI();
	@Virtual @Overload Javax_swing_table_JTableHeader getTableHeader();
	@Virtual @Overload Javax_swing_table_TableCellEditor getCellEditor();
	@Virtual @Overload Javax_swing_table_TableCellEditor getCellEditor(int p0, int p1);
	@Virtual @Overload Javax_swing_table_TableCellEditor getDefaultEditor(Class p0);
	@Virtual @Overload Javax_swing_table_TableCellRenderer getCellRenderer(int p0, int p1);
	@Virtual @Overload Javax_swing_table_TableCellRenderer getDefaultRenderer(Class p0);
	@Virtual @Overload Javax_swing_table_TableColumn getColumn(Object p0);
	@Virtual @Overload Javax_swing_table_TableColumnModel getColumnModel();
	@Virtual @Overload Javax_swing_table_TableModel getModel();
	@Virtual @Overload Object getValueAt(int p0, int p1);
	@Virtual @Overload String getColumnName(int p0);
	@Virtual @Overload boolean editCellAt(int p0, int p1);
	@Virtual @Overload boolean editCellAt(int p0, int p1, Java_util_EventObject p2);
	@Virtual @Overload boolean getAutoCreateColumnsFromModel();
	@Virtual @Overload boolean getAutoCreateRowSorter();
	@Virtual @Overload boolean getCellSelectionEnabled();
	@Virtual @Overload boolean getColumnSelectionAllowed();
	@Virtual @Overload boolean getDragEnabled();
	@Virtual @Overload boolean getFillsViewportHeight();
	@Virtual @Overload boolean getRowSelectionAllowed();
	@Virtual @Overload boolean getScrollableTracksViewportHeight();
	@Virtual @Overload boolean getScrollableTracksViewportWidth();
	@Virtual @Overload boolean getShowHorizontalLines();
	@Virtual @Overload boolean getShowVerticalLines();
	@Virtual @Overload boolean getSurrendersFocusOnKeystroke();
	@Virtual @Overload boolean getUpdateSelectionOnSort();
	@Virtual @Overload boolean isCellEditable(int p0, int p1);
	@Virtual @Overload boolean isCellSelected(int p0, int p1);
	@Virtual @Overload boolean isColumnSelected(int p0);
	@Virtual @Overload boolean isEditing();
	@Virtual @Overload boolean isRowSelected(int p0);
	@Virtual @Overload int columnAtPoint(Java_awt_Point p0);
	@Virtual @Overload int convertColumnIndexToModel(int p0);
	@Virtual @Overload int convertColumnIndexToView(int p0);
	@Virtual @Overload int convertRowIndexToModel(int p0);
	@Virtual @Overload int convertRowIndexToView(int p0);
	@Virtual @Overload int getAutoResizeMode();
	@Virtual @Overload int getColumnCount();
	@Virtual @Overload int getEditingColumn();
	@Virtual @Overload int getEditingRow();
	@Virtual @Overload int getRowCount();
	@Virtual @Overload int getRowHeight();
	@Virtual @Overload int getRowHeight(int p0);
	@Virtual @Overload int getRowMargin();
	@Virtual @Overload int getScrollableBlockIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getScrollableUnitIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getSelectedColumn();
	@Virtual @Overload int getSelectedColumnCount();
	@Virtual @Overload int getSelectedRow();
	@Virtual @Overload int getSelectedRowCount();
	@Virtual @Overload int rowAtPoint(Java_awt_Point p0);
	@Virtual @Overload int[] getSelectedColumns();
	@Virtual @Overload int[] getSelectedRows();
	@Virtual @Overload void addColumn(Javax_swing_table_TableColumn p0);
	@Virtual @Overload void addColumnSelectionInterval(int p0, int p1);
	@Virtual @Overload void addRowSelectionInterval(int p0, int p1);
	@Virtual @Overload void changeSelection(int p0, int p1, boolean p2, boolean p3);
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void columnAdded(Javax_swing_event_TableColumnModelEvent p0);
	@Virtual @Overload void columnMarginChanged(Javax_swing_event_ChangeEvent p0);
	@Virtual @Overload void columnMoved(Javax_swing_event_TableColumnModelEvent p0);
	@Virtual @Overload void columnRemoved(Javax_swing_event_TableColumnModelEvent p0);
	@Virtual @Overload void columnSelectionChanged(Javax_swing_event_ListSelectionEvent p0);
	@Virtual @Overload void createDefaultColumnsFromModel();
	@Virtual @Overload void editingCanceled(Javax_swing_event_ChangeEvent p0);
	@Virtual @Overload void editingStopped(Javax_swing_event_ChangeEvent p0);
	@Virtual @Overload void moveColumn(int p0, int p1);
	@Virtual @Overload void removeColumn(Javax_swing_table_TableColumn p0);
	@Virtual @Overload void removeColumnSelectionInterval(int p0, int p1);
	@Virtual @Overload void removeEditor();
	@Virtual @Overload void removeRowSelectionInterval(int p0, int p1);
	@Virtual @Overload void selectAll();
	@Virtual @Overload void setAutoCreateColumnsFromModel(boolean p0);
	@Virtual @Overload void setAutoCreateRowSorter(boolean p0);
	@Virtual @Overload void setAutoResizeMode(int p0);
	@Virtual @Overload void setCellEditor(Javax_swing_table_TableCellEditor p0);
	@Virtual @Overload void setCellSelectionEnabled(boolean p0);
	@Virtual @Overload void setColumnModel(Javax_swing_table_TableColumnModel p0);
	@Virtual @Overload void setColumnSelectionAllowed(boolean p0);
	@Virtual @Overload void setColumnSelectionInterval(int p0, int p1);
	@Virtual @Overload void setDefaultEditor(Class p0, Javax_swing_table_TableCellEditor p1);
	@Virtual @Overload void setDefaultRenderer(Class p0, Javax_swing_table_TableCellRenderer p1);
	@Virtual @Overload void setDragEnabled(boolean p0);
	@Virtual @Overload void setDropMode(Javax_swing_DropMode p0);
	@Virtual @Overload void setEditingColumn(int p0);
	@Virtual @Overload void setEditingRow(int p0);
	@Virtual @Overload void setFillsViewportHeight(boolean p0);
	@Virtual @Overload void setGridColor(Java_awt_Color p0);
	@Virtual @Overload void setIntercellSpacing(Java_awt_Dimension p0);
	@Virtual @Overload void setModel(Javax_swing_table_TableModel p0);
	@Virtual @Overload void setPreferredScrollableViewportSize(Java_awt_Dimension p0);
	@Virtual @Overload void setRowHeight(int p0);
	@Virtual @Overload void setRowHeight(int p0, int p1);
	@Virtual @Overload void setRowMargin(int p0);
	@Virtual @Overload void setRowSelectionAllowed(boolean p0);
	@Virtual @Overload void setRowSelectionInterval(int p0, int p1);
	@Virtual @Overload void setRowSorter(Javax_swing_RowSorter p0);
	@Virtual @Overload void setSelectionBackground(Java_awt_Color p0);
	@Virtual @Overload void setSelectionForeground(Java_awt_Color p0);
	@Virtual @Overload void setSelectionMode(int p0);
	@Virtual @Overload void setSelectionModel(Javax_swing_ListSelectionModel p0);
	@Virtual @Overload void setShowGrid(boolean p0);
	@Virtual @Overload void setShowHorizontalLines(boolean p0);
	@Virtual @Overload void setShowVerticalLines(boolean p0);
	@Virtual @Overload void setSurrendersFocusOnKeystroke(boolean p0);
	@Virtual @Overload void setTableHeader(Javax_swing_table_JTableHeader p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_TableUI p0);
	@Virtual @Overload void setUpdateSelectionOnSort(boolean p0);
	@Virtual @Overload void setValueAt(Object p0, int p1, int p2);
	@Virtual @Overload void sizeColumnsToFit(int p0);
	@Virtual @Overload void sorterChanged(Javax_swing_event_RowSorterEvent p0);
	@Virtual @Overload void tableChanged(Javax_swing_event_TableModelEvent p0);
	@Virtual @Overload void valueChanged(Javax_swing_event_ListSelectionEvent p0);
}
@Overload Javax_swing_JTable Javax_swing_JTable.new();
@Overload Javax_swing_JTable Javax_swing_JTable.new(Javax_swing_table_TableModel p0);
@Overload Javax_swing_JTable Javax_swing_JTable.new(Javax_swing_table_TableModel p0, Javax_swing_table_TableColumnModel p1);
@Overload Javax_swing_JTable Javax_swing_JTable.new(Javax_swing_table_TableModel p0, Javax_swing_table_TableColumnModel p1, Javax_swing_ListSelectionModel p2);
@Overload Javax_swing_JTable Javax_swing_JTable.new(int p0, int p1);
@Overload Javax_swing_JTable Javax_swing_JTable.new(Java_util_Vector p0, Java_util_Vector p1);
@Overload Javax_swing_JTable Javax_swing_JTable.new(Object[][] p0, Object[] p1);

/* class javax.swing.JTextArea */
class Javax_swing_JTextArea extends Javax_swing_text_JTextComponent {
	/*-- Method --*/
	@Virtual @Overload boolean getLineWrap();
	@Virtual @Overload boolean getWrapStyleWord();
	@Virtual @Overload int getColumns();
	@Virtual @Overload int getLineCount();
	@Virtual @Overload int getLineEndOffset(int p0);
	@Virtual @Overload int getLineOfOffset(int p0);
	@Virtual @Overload int getLineStartOffset(int p0);
	@Virtual @Overload int getRows();
	@Virtual @Overload int getTabSize();
	@Virtual @Overload void append(String p0);
	@Virtual @Overload void insert(String p0, int p1);
	@Virtual @Overload void replaceRange(String p0, int p1, int p2);
	@Virtual @Overload void setColumns(int p0);
	@Virtual @Overload void setLineWrap(boolean p0);
	@Virtual @Overload void setRows(int p0);
	@Virtual @Overload void setTabSize(int p0);
	@Virtual @Overload void setWrapStyleWord(boolean p0);
}
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new();
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new(String p0);
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new(int p0, int p1);
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new(String p0, int p1, int p2);
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new(Javax_swing_text_Document p0);
@Overload Javax_swing_JTextArea Javax_swing_JTextArea.new(Javax_swing_text_Document p0, String p1, int p2, int p3);

/* class javax.swing.JTextPane */
class Javax_swing_JTextPane extends Javax_swing_JEditorPane {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_text_AttributeSet getCharacterAttributes();
	@Virtual @Overload Javax_swing_text_AttributeSet getParagraphAttributes();
	@Virtual @Overload Javax_swing_text_MutableAttributeSet getInputAttributes();
	@Virtual @Overload Javax_swing_text_Style addStyle(String p0, Javax_swing_text_Style p1);
	@Virtual @Overload Javax_swing_text_Style getLogicalStyle();
	@Virtual @Overload Javax_swing_text_Style getStyle(String p0);
	@Virtual @Overload Javax_swing_text_StyledDocument getStyledDocument();
	@Virtual @Overload void insertComponent(Java_awt_Component p0);
	@Virtual @Overload void insertIcon(Javax_swing_Icon p0);
	@Virtual @Overload void removeStyle(String p0);
	@Virtual @Overload void setCharacterAttributes(Javax_swing_text_AttributeSet p0, boolean p1);
	@Virtual @Overload void setLogicalStyle(Javax_swing_text_Style p0);
	@Virtual @Overload void setParagraphAttributes(Javax_swing_text_AttributeSet p0, boolean p1);
	@Virtual @Overload void setStyledDocument(Javax_swing_text_StyledDocument p0);
}
@Overload Javax_swing_JTextPane Javax_swing_JTextPane.new();
@Overload Javax_swing_JTextPane Javax_swing_JTextPane.new(Javax_swing_text_StyledDocument p0);

/* class javax.swing.JToolBar */
class Javax_swing_JToolBar extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponentAtIndex(int p0);
	@Virtual @Overload Java_awt_Insets getMargin();
	@Virtual @Overload Javax_swing_JButton add(Javax_swing_Action p0);
	@Virtual @Overload Javax_swing_plaf_ToolBarUI getUI();
	@Virtual @Overload boolean isBorderPainted();
	@Virtual @Overload boolean isFloatable();
	@Virtual @Overload boolean isRollover();
	@Virtual @Overload int getComponentIndex(Java_awt_Component p0);
	@Virtual @Overload int getOrientation();
	@Virtual @Overload void addSeparator();
	@Virtual @Overload void addSeparator(Java_awt_Dimension p0);
	@Virtual @Overload void setBorderPainted(boolean p0);
	@Virtual @Overload void setFloatable(boolean p0);
	@Virtual @Overload void setMargin(Java_awt_Insets p0);
	@Virtual @Overload void setOrientation(int p0);
	@Virtual @Overload void setRollover(boolean p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ToolBarUI p0);
}
@Overload Javax_swing_JToolBar Javax_swing_JToolBar.new();
@Overload Javax_swing_JToolBar Javax_swing_JToolBar.new(int p0);
@Overload Javax_swing_JToolBar Javax_swing_JToolBar.new(String p0);
@Overload Javax_swing_JToolBar Javax_swing_JToolBar.new(String p0, int p1);

/* class javax.swing.JToolTip */
class Javax_swing_JToolTip extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_JComponent getComponent();
	@Virtual @Overload Javax_swing_plaf_ToolTipUI getUI();
	@Virtual @Overload String getTipText();
	@Virtual @Overload void setComponent(Javax_swing_JComponent p0);
	@Virtual @Overload void setTipText(String p0);
}
Javax_swing_JToolTip Javax_swing_JToolTip.new();

/* class javax.swing.JTree */
class Javax_swing_JTree extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getPreferredScrollableViewportSize();
	@Virtual @Overload Java_awt_Rectangle getPathBounds(Javax_swing_tree_TreePath p0);
	@Virtual @Overload Java_awt_Rectangle getRowBounds(int p0);
	@Virtual @Overload Java_util_Enumeration getExpandedDescendants(Javax_swing_tree_TreePath p0);
	@Virtual @Overload Javax_swing_DropMode getDropMode();
	@Virtual @Overload Javax_swing_JTree_DropLocation getDropLocation();
	@Virtual @Overload Javax_swing_event_TreeExpansionListener[] getTreeExpansionListeners();
	@Virtual @Overload Javax_swing_event_TreeSelectionListener[] getTreeSelectionListeners();
	@Virtual @Overload Javax_swing_event_TreeWillExpandListener[] getTreeWillExpandListeners();
	@Virtual @Overload Javax_swing_plaf_TreeUI getUI();
	@Virtual @Overload Javax_swing_tree_TreeCellEditor getCellEditor();
	@Virtual @Overload Javax_swing_tree_TreeCellRenderer getCellRenderer();
	@Virtual @Overload Javax_swing_tree_TreeModel getModel();
	@Virtual @Overload Javax_swing_tree_TreePath getAnchorSelectionPath();
	@Virtual @Overload Javax_swing_tree_TreePath getClosestPathForLocation(int p0, int p1);
	@Virtual @Overload Javax_swing_tree_TreePath getEditingPath();
	@Virtual @Overload Javax_swing_tree_TreePath getLeadSelectionPath();
	@Virtual @Overload Javax_swing_tree_TreePath getNextMatch(String p0, int p1, Javax_swing_text_Position_Bias p2);
	@Virtual @Overload Javax_swing_tree_TreePath getPathForLocation(int p0, int p1);
	@Virtual @Overload Javax_swing_tree_TreePath getPathForRow(int p0);
	@Virtual @Overload Javax_swing_tree_TreePath getSelectionPath();
	@Virtual @Overload Javax_swing_tree_TreePath[] getSelectionPaths();
	@Virtual @Overload Javax_swing_tree_TreeSelectionModel getSelectionModel();
	@Virtual @Overload Object getLastSelectedPathComponent();
	@Virtual @Overload String convertValueToText(Object p0, boolean p1, boolean p2, boolean p3, int p4, boolean p5);
	@Virtual @Overload boolean getDragEnabled();
	@Virtual @Overload boolean getExpandsSelectedPaths();
	@Virtual @Overload boolean getInvokesStopCellEditing();
	@Virtual @Overload boolean getScrollableTracksViewportHeight();
	@Virtual @Overload boolean getScrollableTracksViewportWidth();
	@Virtual @Overload boolean getScrollsOnExpand();
	@Virtual @Overload boolean getShowsRootHandles();
	@Virtual @Overload boolean hasBeenExpanded(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean isCollapsed(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean isCollapsed(int p0);
	@Virtual @Overload boolean isEditable();
	@Virtual @Overload boolean isEditing();
	@Virtual @Overload boolean isExpanded(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean isExpanded(int p0);
	@Virtual @Overload boolean isFixedRowHeight();
	@Virtual @Overload boolean isLargeModel();
	@Virtual @Overload boolean isPathEditable(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean isPathSelected(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean isRootVisible();
	@Virtual @Overload boolean isRowSelected(int p0);
	@Virtual @Overload boolean isSelectionEmpty();
	@Virtual @Overload boolean isVisible(Javax_swing_tree_TreePath p0);
	@Virtual @Overload boolean stopEditing();
	@Virtual @Overload int getClosestRowForLocation(int p0, int p1);
	@Virtual @Overload int getLeadSelectionRow();
	@Virtual @Overload int getMaxSelectionRow();
	@Virtual @Overload int getMinSelectionRow();
	@Virtual @Overload int getRowCount();
	@Virtual @Overload int getRowForLocation(int p0, int p1);
	@Virtual @Overload int getRowForPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload int getRowHeight();
	@Virtual @Overload int getScrollableBlockIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getScrollableUnitIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getSelectionCount();
	@Virtual @Overload int getToggleClickCount();
	@Virtual @Overload int getVisibleRowCount();
	@Virtual @Overload int[] getSelectionRows();
	@Virtual @Overload void addSelectionInterval(int p0, int p1);
	@Virtual @Overload void addSelectionPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void addSelectionPaths(Javax_swing_tree_TreePath[] p0);
	@Virtual @Overload void addSelectionRow(int p0);
	@Virtual @Overload void addSelectionRows(int[] p0);
	@Virtual @Overload void addTreeExpansionListener(Javax_swing_event_TreeExpansionListener p0);
	@Virtual @Overload void addTreeSelectionListener(Javax_swing_event_TreeSelectionListener p0);
	@Virtual @Overload void addTreeWillExpandListener(Javax_swing_event_TreeWillExpandListener p0);
	@Virtual @Overload void cancelEditing();
	@Virtual @Overload void clearSelection();
	@Virtual @Overload void collapsePath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void collapseRow(int p0);
	@Virtual @Overload void expandPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void expandRow(int p0);
	@Virtual @Overload void fireTreeCollapsed(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void fireTreeExpanded(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void fireTreeWillCollapse(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void fireTreeWillExpand(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void makeVisible(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void removeSelectionInterval(int p0, int p1);
	@Virtual @Overload void removeSelectionPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void removeSelectionPaths(Javax_swing_tree_TreePath[] p0);
	@Virtual @Overload void removeSelectionRow(int p0);
	@Virtual @Overload void removeSelectionRows(int[] p0);
	@Virtual @Overload void removeTreeExpansionListener(Javax_swing_event_TreeExpansionListener p0);
	@Virtual @Overload void removeTreeSelectionListener(Javax_swing_event_TreeSelectionListener p0);
	@Virtual @Overload void removeTreeWillExpandListener(Javax_swing_event_TreeWillExpandListener p0);
	@Virtual @Overload void scrollPathToVisible(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void scrollRowToVisible(int p0);
	@Virtual @Overload void setAnchorSelectionPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void setCellEditor(Javax_swing_tree_TreeCellEditor p0);
	@Virtual @Overload void setCellRenderer(Javax_swing_tree_TreeCellRenderer p0);
	@Virtual @Overload void setDragEnabled(boolean p0);
	@Virtual @Overload void setDropMode(Javax_swing_DropMode p0);
	@Virtual @Overload void setEditable(boolean p0);
	@Virtual @Overload void setExpandsSelectedPaths(boolean p0);
	@Virtual @Overload void setInvokesStopCellEditing(boolean p0);
	@Virtual @Overload void setLargeModel(boolean p0);
	@Virtual @Overload void setLeadSelectionPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void setModel(Javax_swing_tree_TreeModel p0);
	@Virtual @Overload void setRootVisible(boolean p0);
	@Virtual @Overload void setRowHeight(int p0);
	@Virtual @Overload void setScrollsOnExpand(boolean p0);
	@Virtual @Overload void setSelectionInterval(int p0, int p1);
	@Virtual @Overload void setSelectionModel(Javax_swing_tree_TreeSelectionModel p0);
	@Virtual @Overload void setSelectionPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void setSelectionPaths(Javax_swing_tree_TreePath[] p0);
	@Virtual @Overload void setSelectionRow(int p0);
	@Virtual @Overload void setSelectionRows(int[] p0);
	@Virtual @Overload void setShowsRootHandles(boolean p0);
	@Virtual @Overload void setToggleClickCount(int p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_TreeUI p0);
	@Virtual @Overload void setVisibleRowCount(int p0);
	@Virtual @Overload void startEditingAtPath(Javax_swing_tree_TreePath p0);
	@Virtual @Overload void treeDidChange();
}
@Overload Javax_swing_JTree Javax_swing_JTree.new();
@Overload Javax_swing_JTree Javax_swing_JTree.new(Object[] p0);
@Overload Javax_swing_JTree Javax_swing_JTree.new(Java_util_Vector p0);
@Overload Javax_swing_JTree Javax_swing_JTree.new(Java_util_Hashtable p0);
@Overload Javax_swing_JTree Javax_swing_JTree.new(Javax_swing_tree_TreeNode p0);
@Overload Javax_swing_JTree Javax_swing_JTree.new(Javax_swing_tree_TreeNode p0, boolean p1);
@Overload Javax_swing_JTree Javax_swing_JTree.new(Javax_swing_tree_TreeModel p0);

/* class javax.swing.JViewport */
class Javax_swing_JViewport extends Javax_swing_JComponent {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getView();
	@Virtual @Overload Java_awt_Dimension getExtentSize();
	@Virtual @Overload Java_awt_Dimension getViewSize();
	@Virtual @Overload Java_awt_Dimension toViewCoordinates(Java_awt_Dimension p0);
	@Virtual @Overload Java_awt_Point getViewPosition();
	@Virtual @Overload Java_awt_Point toViewCoordinates(Java_awt_Point p0);
	@Virtual @Overload Java_awt_Rectangle getViewRect();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload Javax_swing_plaf_ViewportUI getUI();
	@Virtual @Overload int getScrollMode();
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setExtentSize(Java_awt_Dimension p0);
	@Virtual @Overload void setScrollMode(int p0);
	@Virtual @Overload void setUI(Javax_swing_plaf_ViewportUI p0);
	@Virtual @Overload void setView(Java_awt_Component p0);
	@Virtual @Overload void setViewPosition(Java_awt_Point p0);
	@Virtual @Overload void setViewSize(Java_awt_Dimension p0);
}
Javax_swing_JViewport Javax_swing_JViewport.new();

/* class javax.swing.JWindow */
class Javax_swing_JWindow extends Java_awt_Window {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload Javax_swing_TransferHandler getTransferHandler();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
	@Virtual @Overload void setTransferHandler(Javax_swing_TransferHandler p0);
}
@Overload Javax_swing_JWindow Javax_swing_JWindow.new();
@Overload Javax_swing_JWindow Javax_swing_JWindow.new(Java_awt_GraphicsConfiguration p0);
@Overload Javax_swing_JWindow Javax_swing_JWindow.new(Java_awt_Frame p0);
@Overload Javax_swing_JWindow Javax_swing_JWindow.new(Java_awt_Window p0);
@Overload Javax_swing_JWindow Javax_swing_JWindow.new(Java_awt_Window p0, Java_awt_GraphicsConfiguration p1);

/* class javax.swing.KeyStroke */
class Javax_swing_KeyStroke extends Java_awt_AWTKeyStroke {
	/*-- Method --*/
	@Static @Overload Javax_swing_KeyStroke getKeyStroke(Java_lang_Character p0, int p1);
	@Static @Overload Javax_swing_KeyStroke getKeyStroke(String p0);
	@Static @Overload Javax_swing_KeyStroke getKeyStroke(int p0);
	@Static @Overload Javax_swing_KeyStroke getKeyStroke(int p0, int p1);
	@Static @Overload Javax_swing_KeyStroke getKeyStroke(int p0, int p1, boolean p2);
	@Static @Overload Javax_swing_KeyStroke getKeyStrokeForEvent(Java_awt_event_KeyEvent p0);
}

/* class javax.swing.SortingFocusTraversalPolicy */
class Javax_swing_SortingFocusTraversalPolicy extends Javax_swing_InternalFrameFocusTraversalPolicy {
	/*-- Method --*/
	@Virtual @Overload boolean getImplicitDownCycleTraversal();
	@Virtual @Overload void setImplicitDownCycleTraversal(boolean p0);
}
Javax_swing_SortingFocusTraversalPolicy Javax_swing_SortingFocusTraversalPolicy.new(Java_util_Comparator p0);

/* class javax.swing.LayoutFocusTraversalPolicy */
class Javax_swing_LayoutFocusTraversalPolicy extends Javax_swing_SortingFocusTraversalPolicy {
}
Javax_swing_LayoutFocusTraversalPolicy Javax_swing_LayoutFocusTraversalPolicy.new();

/* class javax.swing.LayoutStyle */
class Javax_swing_LayoutStyle {
	/*-- Method --*/
	@Static @Overload Javax_swing_LayoutStyle getInstance();
	@Static @Overload void setInstance(Javax_swing_LayoutStyle p0);
	@Virtual @Overload int getContainerGap(Javax_swing_JComponent p0, int p1, Java_awt_Container p2);
	@Virtual @Overload int getPreferredGap(Javax_swing_JComponent p0, Javax_swing_JComponent p1, Javax_swing_LayoutStyle_ComponentPlacement p2, int p3, Java_awt_Container p4);
}
Javax_swing_LayoutStyle Javax_swing_LayoutStyle.new();

/* interface javax.swing.ListCellRenderer */
class Javax_swing_ListCellRenderer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getListCellRendererComponent(Javax_swing_JList p0, Object p1, int p2, boolean p3, boolean p4);
}

/* class javax.swing.LookAndFeel */
class Javax_swing_LookAndFeel {
	/*-- Method --*/
	@Static @Overload Javax_swing_ComponentInputMap makeComponentInputMap(Javax_swing_JComponent p0, Object[] p1);
	@Static @Overload Javax_swing_InputMap makeInputMap(Object[] p0);
	@Static @Overload Javax_swing_text_JTextComponent_KeyBinding[] makeKeyBindings(Object[] p0);
	@Static @Overload Object getDesktopPropertyValue(String p0, Object p1);
	@Static @Overload Object makeIcon(Class p0, String p1);
	@Static @Overload void installBorder(Javax_swing_JComponent p0, String p1);
	@Static @Overload void installColors(Javax_swing_JComponent p0, String p1, String p2);
	@Static @Overload void installColorsAndFont(Javax_swing_JComponent p0, String p1, String p2, String p3);
	@Static @Overload void installProperty(Javax_swing_JComponent p0, String p1, Object p2);
	@Static @Overload void loadKeyBindings(Javax_swing_InputMap p0, Object[] p1);
	@Static @Overload void uninstallBorder(Javax_swing_JComponent p0);
	@Virtual @Overload Javax_swing_Icon getDisabledIcon(Javax_swing_JComponent p0, Javax_swing_Icon p1);
	@Virtual @Overload Javax_swing_Icon getDisabledSelectedIcon(Javax_swing_JComponent p0, Javax_swing_Icon p1);
	@Virtual @Overload Javax_swing_LayoutStyle getLayoutStyle();
	@Virtual @Overload Javax_swing_UIDefaults getDefaults();
	@Virtual @Overload String getDescription();
	@Virtual @Overload String getID();
	@Virtual @Overload String getName();
	@Virtual @Overload String toString();
	@Virtual @Overload boolean getSupportsWindowDecorations();
	@Virtual @Overload boolean isNativeLookAndFeel();
	@Virtual @Overload boolean isSupportedLookAndFeel();
	@Virtual @Overload void initialize();
	@Virtual @Overload void provideErrorFeedback(Java_awt_Component p0);
	@Virtual @Overload void uninitialize();
}
Javax_swing_LookAndFeel Javax_swing_LookAndFeel.new();

/* interface javax.swing.MenuElement */
class Javax_swing_MenuElement {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload Javax_swing_MenuElement[] getSubElements();
	@Virtual @Overload void menuSelectionChanged(boolean p0);
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
	@Virtual @Overload void processMouseEvent(Java_awt_event_MouseEvent p0, Javax_swing_MenuElement[] p1, Javax_swing_MenuSelectionManager p2);
}

/* class javax.swing.MenuSelectionManager */
class Javax_swing_MenuSelectionManager {
	/*-- Method --*/
	@Static @Overload Javax_swing_MenuSelectionManager defaultManager();
	@Virtual @Overload Java_awt_Component componentForPoint(Java_awt_Component p0, Java_awt_Point p1);
	@Virtual @Overload Javax_swing_MenuElement[] getSelectedPath();
	@Virtual @Overload Javax_swing_event_ChangeListener[] getChangeListeners();
	@Virtual @Overload boolean isComponentPartOfCurrentMenu(Java_awt_Component p0);
	@Virtual @Overload void addChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void clearSelectedPath();
	@Virtual @Overload void processKeyEvent(Java_awt_event_KeyEvent p0);
	@Virtual @Overload void processMouseEvent(Java_awt_event_MouseEvent p0);
	@Virtual @Overload void removeChangeListener(Javax_swing_event_ChangeListener p0);
	@Virtual @Overload void setSelectedPath(Javax_swing_MenuElement[] p0);
}
Javax_swing_MenuSelectionManager Javax_swing_MenuSelectionManager.new();

/* interface javax.swing.MutableComboBoxModel */
class Javax_swing_MutableComboBoxModel extends Javax_swing_ComboBoxModel {
	/*-- Method --*/
	@Virtual @Overload void addElement(Object p0);
	@Virtual @Overload void insertElementAt(Object p0, int p1);
	@Virtual @Overload void removeElement(Object p0);
	@Virtual @Overload void removeElementAt(int p0);
}

/* class javax.swing.OverlayLayout */
class Javax_swing_OverlayLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Container getTarget();
}
Javax_swing_OverlayLayout Javax_swing_OverlayLayout.new(Java_awt_Container p0);

/* interface javax.swing.Painter */
class Javax_swing_Painter {
	/*-- Method --*/
	@Virtual @Overload void paint(Java_awt_Graphics2D p0, Object p1, int p2, int p3);
}

/* class javax.swing.Popup */
class Javax_swing_Popup {
	/*-- Method --*/
	@Virtual @Overload void hide();
	@Virtual @Overload void show();
}

/* class javax.swing.PopupFactory */
class Javax_swing_PopupFactory {
	/*-- Method --*/
	@Static @Overload Javax_swing_PopupFactory getSharedInstance();
	@Static @Overload void setSharedInstance(Javax_swing_PopupFactory p0);
	@Virtual @Overload Javax_swing_Popup getPopup(Java_awt_Component p0, Java_awt_Component p1, int p2, int p3);
}
Javax_swing_PopupFactory Javax_swing_PopupFactory.new();

/* class javax.swing.ProgressMonitor */
class Javax_swing_ProgressMonitor extends Javax_accessibility_Accessible {
	/*-- Method --*/
	@Virtual @Overload String getNote();
	@Virtual @Overload boolean isCanceled();
	@Virtual @Overload int getMaximum();
	@Virtual @Overload int getMillisToDecideToPopup();
	@Virtual @Overload int getMillisToPopup();
	@Virtual @Overload int getMinimum();
	@Virtual @Overload void close();
	@Virtual @Overload void setMaximum(int p0);
	@Virtual @Overload void setMillisToDecideToPopup(int p0);
	@Virtual @Overload void setMillisToPopup(int p0);
	@Virtual @Overload void setMinimum(int p0);
	@Virtual @Overload void setNote(String p0);
	@Virtual @Overload void setProgress(int p0);
}
Javax_swing_ProgressMonitor Javax_swing_ProgressMonitor.new(Java_awt_Component p0, Object p1, String p2, int p3, int p4);

/* class javax.swing.ProgressMonitorInputStream */
class Javax_swing_ProgressMonitorInputStream extends Java_io_FilterInputStream {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_ProgressMonitor getProgressMonitor();
}
Javax_swing_ProgressMonitorInputStream Javax_swing_ProgressMonitorInputStream.new(Java_awt_Component p0, Object p1, Java_io_InputStream p2);

/* interface javax.swing.Renderer */
class Javax_swing_Renderer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getComponent();
	@Virtual @Overload void setValue(Object p0, boolean p1);
}

/* class javax.swing.RepaintManager */
class Javax_swing_RepaintManager {
	/*-- Method --*/
	@Static @Overload Javax_swing_RepaintManager currentManager(Java_awt_Component p0);
	@Static @Overload Javax_swing_RepaintManager currentManager(Javax_swing_JComponent p0);
	@Static @Overload void setCurrentManager(Javax_swing_RepaintManager p0);
	@Virtual @Overload Java_awt_Dimension getDoubleBufferMaximumSize();
	@Virtual @Overload Java_awt_Image getOffscreenBuffer(Java_awt_Component p0, int p1, int p2);
	@Virtual @Overload Java_awt_Image getVolatileOffscreenBuffer(Java_awt_Component p0, int p1, int p2);
	@Virtual @Overload Java_awt_Rectangle getDirtyRegion(Javax_swing_JComponent p0);
	@Virtual @Overload String toString();
	@Virtual @Overload boolean isCompletelyDirty(Javax_swing_JComponent p0);
	@Virtual @Overload boolean isDoubleBufferingEnabled();
	@Virtual @Overload void addDirtyRegion(Java_applet_Applet p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void addDirtyRegion(Java_awt_Window p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void addDirtyRegion(Javax_swing_JComponent p0, int p1, int p2, int p3, int p4);
	@Virtual @Overload void addInvalidComponent(Javax_swing_JComponent p0);
	@Virtual @Overload void markCompletelyClean(Javax_swing_JComponent p0);
	@Virtual @Overload void markCompletelyDirty(Javax_swing_JComponent p0);
	@Virtual @Overload void paintDirtyRegions();
	@Virtual @Overload void removeInvalidComponent(Javax_swing_JComponent p0);
	@Virtual @Overload void setDoubleBufferMaximumSize(Java_awt_Dimension p0);
	@Virtual @Overload void setDoubleBufferingEnabled(boolean p0);
	@Virtual @Overload void validateInvalidComponents();
}
Javax_swing_RepaintManager Javax_swing_RepaintManager.new();

/* interface javax.swing.RootPaneContainer */
class Javax_swing_RootPaneContainer {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getGlassPane();
	@Virtual @Overload Java_awt_Container getContentPane();
	@Virtual @Overload Javax_swing_JLayeredPane getLayeredPane();
	@Virtual @Overload Javax_swing_JRootPane getRootPane();
	@Virtual @Overload void setContentPane(Java_awt_Container p0);
	@Virtual @Overload void setGlassPane(Java_awt_Component p0);
	@Virtual @Overload void setLayeredPane(Javax_swing_JLayeredPane p0);
}

/* class javax.swing.RowFilter */
class Javax_swing_RowFilter {
	/*-- Method --*/
	@Static @Overload Javax_swing_RowFilter andFilter(Java_lang_Iterable p0);
	@Static @Overload Javax_swing_RowFilter dateFilter(Javax_swing_RowFilter_ComparisonType p0, Java_util_Date p1, int[] p2);
	@Static @Overload Javax_swing_RowFilter notFilter(Javax_swing_RowFilter p0);
	@Static @Overload Javax_swing_RowFilter numberFilter(Javax_swing_RowFilter_ComparisonType p0, Java_lang_Number p1, int[] p2);
	@Static @Overload Javax_swing_RowFilter orFilter(Java_lang_Iterable p0);
	@Static @Overload Javax_swing_RowFilter regexFilter(String p0, int[] p1);
}
Javax_swing_RowFilter Javax_swing_RowFilter.new();

/* interface javax.swing.ScrollPaneConstants */
class Javax_swing_ScrollPaneConstants {
}

/* class javax.swing.ScrollPaneLayout */
class Javax_swing_ScrollPaneLayout extends Java_awt_LayoutManager {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Component getCorner(String p0);
	@Virtual @Overload Javax_swing_JScrollBar getHorizontalScrollBar();
	@Virtual @Overload Javax_swing_JScrollBar getVerticalScrollBar();
	@Virtual @Overload Javax_swing_JViewport getColumnHeader();
	@Virtual @Overload Javax_swing_JViewport getRowHeader();
	@Virtual @Overload Javax_swing_JViewport getViewport();
	@Virtual @Overload int getHorizontalScrollBarPolicy();
	@Virtual @Overload int getVerticalScrollBarPolicy();
	@Virtual @Overload void setHorizontalScrollBarPolicy(int p0);
	@Virtual @Overload void setVerticalScrollBarPolicy(int p0);
	@Virtual @Overload void syncWithScrollPane(Javax_swing_JScrollPane p0);
}
Javax_swing_ScrollPaneLayout Javax_swing_ScrollPaneLayout.new();

/* interface javax.swing.Scrollable */
class Javax_swing_Scrollable {
	/*-- Method --*/
	@Virtual @Overload Java_awt_Dimension getPreferredScrollableViewportSize();
	@Virtual @Overload boolean getScrollableTracksViewportHeight();
	@Virtual @Overload boolean getScrollableTracksViewportWidth();
	@Virtual @Overload int getScrollableBlockIncrement(Java_awt_Rectangle p0, int p1, int p2);
	@Virtual @Overload int getScrollableUnitIncrement(Java_awt_Rectangle p0, int p1, int p2);
}

/* class javax.swing.SizeRequirements */
class Javax_swing_SizeRequirements extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Javax_swing_SizeRequirements getAlignedSizeRequirements(Javax_swing_SizeRequirements[] p0);
	@Static @Overload Javax_swing_SizeRequirements getTiledSizeRequirements(Javax_swing_SizeRequirements[] p0);
	@Static @Overload int[] adjustSizes(int p0, Javax_swing_SizeRequirements[] p1);
	@Static @Overload void calculateAlignedPositions(int p0, Javax_swing_SizeRequirements p1, Javax_swing_SizeRequirements[] p2, int[] p3, int[] p4);
	@Static @Overload void calculateAlignedPositions(int p0, Javax_swing_SizeRequirements p1, Javax_swing_SizeRequirements[] p2, int[] p3, int[] p4, boolean p5);
	@Static @Overload void calculateTiledPositions(int p0, Javax_swing_SizeRequirements p1, Javax_swing_SizeRequirements[] p2, int[] p3, int[] p4);
	@Static @Overload void calculateTiledPositions(int p0, Javax_swing_SizeRequirements p1, Javax_swing_SizeRequirements[] p2, int[] p3, int[] p4, boolean p5);
	@Virtual @Overload String toString();
}
@Overload Javax_swing_SizeRequirements Javax_swing_SizeRequirements.new();
@Overload Javax_swing_SizeRequirements Javax_swing_SizeRequirements.new(int p0, int p1, int p2, float p3);

/* class javax.swing.SizeSequence */
class Javax_swing_SizeSequence {
	/*-- Method --*/
	@Virtual @Overload int getIndex(int p0);
	@Virtual @Overload int getPosition(int p0);
	@Virtual @Overload int getSize(int p0);
	@Virtual @Overload int[] getSizes();
	@Virtual @Overload void insertEntries(int p0, int p1, int p2);
	@Virtual @Overload void removeEntries(int p0, int p1);
	@Virtual @Overload void setSize(int p0, int p1);
	@Virtual @Overload void setSizes(int[] p0);
}
@Overload Javax_swing_SizeSequence Javax_swing_SizeSequence.new();
@Overload Javax_swing_SizeSequence Javax_swing_SizeSequence.new(int p0);
@Overload Javax_swing_SizeSequence Javax_swing_SizeSequence.new(int p0, int p1);
@Overload Javax_swing_SizeSequence Javax_swing_SizeSequence.new(int[] p0);

/* class javax.swing.SortOrder */
class Javax_swing_SortOrder extends Java_lang_Enum {
	/*-- Method --*/
	@Static @Overload Javax_swing_SortOrder valueOf(String p0);
	@Static @Overload Javax_swing_SortOrder[] values();
}

/* class javax.swing.SpinnerDateModel */
class Javax_swing_SpinnerDateModel extends Javax_swing_AbstractSpinnerModel {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Comparable getEnd();
	@Virtual @Overload Java_lang_Comparable getStart();
	@Virtual @Overload Java_util_Date getDate();
	@Virtual @Overload int getCalendarField();
	@Virtual @Overload void setCalendarField(int p0);
	@Virtual @Overload void setEnd(Java_lang_Comparable p0);
	@Virtual @Overload void setStart(Java_lang_Comparable p0);
}
@Overload Javax_swing_SpinnerDateModel Javax_swing_SpinnerDateModel.new(Java_util_Date p0, Java_lang_Comparable p1, Java_lang_Comparable p2, int p3);
@Overload Javax_swing_SpinnerDateModel Javax_swing_SpinnerDateModel.new();

/* class javax.swing.SpinnerListModel */
class Javax_swing_SpinnerListModel extends Javax_swing_AbstractSpinnerModel {
	/*-- Method --*/
	@Virtual @Overload Java_util_List getList();
	@Virtual @Overload void setList(Java_util_List p0);
}
@Overload Javax_swing_SpinnerListModel Javax_swing_SpinnerListModel.new(Java_util_List p0);
@Overload Javax_swing_SpinnerListModel Javax_swing_SpinnerListModel.new(Object[] p0);
@Overload Javax_swing_SpinnerListModel Javax_swing_SpinnerListModel.new();

/* class javax.swing.SpinnerNumberModel */
class Javax_swing_SpinnerNumberModel extends Javax_swing_AbstractSpinnerModel {
	/*-- Method --*/
	@Virtual @Overload Java_lang_Comparable getMaximum();
	@Virtual @Overload Java_lang_Comparable getMinimum();
	@Virtual @Overload Java_lang_Number getNumber();
	@Virtual @Overload Java_lang_Number getStepSize();
	@Virtual @Overload void setMaximum(Java_lang_Comparable p0);
	@Virtual @Overload void setMinimum(Java_lang_Comparable p0);
	@Virtual @Overload void setStepSize(Java_lang_Number p0);
}
@Overload Javax_swing_SpinnerNumberModel Javax_swing_SpinnerNumberModel.new(Java_lang_Number p0, Java_lang_Comparable p1, Java_lang_Comparable p2, Java_lang_Number p3);
@Overload Javax_swing_SpinnerNumberModel Javax_swing_SpinnerNumberModel.new(int p0, int p1, int p2, int p3);
@Overload Javax_swing_SpinnerNumberModel Javax_swing_SpinnerNumberModel.new(float p0, float p1, float p2, float p3);
@Overload Javax_swing_SpinnerNumberModel Javax_swing_SpinnerNumberModel.new();

/* class javax.swing.Spring */
class Javax_swing_Spring {
	/*-- Method --*/
	@Static @Overload Javax_swing_Spring constant(int p0);
	@Static @Overload Javax_swing_Spring constant(int p0, int p1, int p2);
	@Static @Overload Javax_swing_Spring height(Java_awt_Component p0);
	@Static @Overload Javax_swing_Spring max(Javax_swing_Spring p0, Javax_swing_Spring p1);
	@Static @Overload Javax_swing_Spring minus(Javax_swing_Spring p0);
	@Static @Overload Javax_swing_Spring scale(Javax_swing_Spring p0, float p1);
	@Static @Overload Javax_swing_Spring sum(Javax_swing_Spring p0, Javax_swing_Spring p1);
	@Static @Overload Javax_swing_Spring width(Java_awt_Component p0);
	@Virtual @Overload int getMaximumValue();
	@Virtual @Overload int getMinimumValue();
	@Virtual @Overload int getPreferredValue();
	@Virtual @Overload int getValue();
	@Virtual @Overload void setValue(int p0);
}

/* class javax.swing.SpringLayout */
class Javax_swing_SpringLayout extends Java_awt_LayoutManager2 {
	/*-- Method --*/
	@Virtual @Overload Javax_swing_Spring getConstraint(String p0, Java_awt_Component p1);
	@Virtual @Overload Javax_swing_SpringLayout_Constraints getConstraints(Java_awt_Component p0);
	@Virtual @Overload void putConstraint(String p0, Java_awt_Component p1, Javax_swing_Spring p2, String p3, Java_awt_Component p4);
	@Virtual @Overload void putConstraint(String p0, Java_awt_Component p1, int p2, String p3, Java_awt_Component p4);
}
Javax_swing_SpringLayout Javax_swing_SpringLayout.new();

/* interface javax.swing.SwingConstants */
class Javax_swing_SwingConstants {
}

/* class javax.swing.SwingUtilities */
class Javax_swing_SwingUtilities extends Javax_swing_SwingConstants {
	/*-- Method --*/
	@Static @Overload Java_awt_Component getDeepestComponentAt(Java_awt_Component p0, int p1, int p2);
	@Static @Overload Java_awt_Component getRoot(Java_awt_Component p0);
	@Static @Overload Java_awt_Component getUnwrappedView(Javax_swing_JViewport p0);
	@Static @Overload Java_awt_Container getAncestorNamed(String p0, Java_awt_Component p1);
	@Static @Overload Java_awt_Container getAncestorOfClass(Class p0, Java_awt_Component p1);
	@Static @Overload Java_awt_Container getUnwrappedParent(Java_awt_Component p0);
	@Static @Overload Java_awt_Point convertPoint(Java_awt_Component p0, Java_awt_Point p1, Java_awt_Component p2);
	@Static @Overload Java_awt_Point convertPoint(Java_awt_Component p0, int p1, int p2, Java_awt_Component p3);
	@Static @Overload Java_awt_Rectangle calculateInnerArea(Javax_swing_JComponent p0, Java_awt_Rectangle p1);
	@Static @Overload Java_awt_Rectangle computeIntersection(int p0, int p1, int p2, int p3, Java_awt_Rectangle p4);
	@Static @Overload Java_awt_Rectangle computeUnion(int p0, int p1, int p2, int p3, Java_awt_Rectangle p4);
	@Static @Overload Java_awt_Rectangle convertRectangle(Java_awt_Component p0, Java_awt_Rectangle p1, Java_awt_Component p2);
	@Static @Overload Java_awt_Rectangle getLocalBounds(Java_awt_Component p0);
	@Static @Overload Java_awt_Rectangle[] computeDifference(Java_awt_Rectangle p0, Java_awt_Rectangle p1);
	@Static @Overload Java_awt_Window getWindowAncestor(Java_awt_Component p0);
	@Static @Overload Java_awt_Window windowForComponent(Java_awt_Component p0);
	@Static @Overload Java_awt_event_MouseEvent convertMouseEvent(Java_awt_Component p0, Java_awt_event_MouseEvent p1, Java_awt_Component p2);
	@Static @Overload Javax_accessibility_Accessible getAccessibleAt(Java_awt_Component p0, Java_awt_Point p1);
	@Static @Overload Javax_accessibility_Accessible getAccessibleChild(Java_awt_Component p0, int p1);
	@Static @Overload Javax_accessibility_AccessibleStateSet getAccessibleStateSet(Java_awt_Component p0);
	@Static @Overload Javax_swing_ActionMap getUIActionMap(Javax_swing_JComponent p0);
	@Static @Overload Javax_swing_InputMap getUIInputMap(Javax_swing_JComponent p0, int p1);
	@Static @Overload Javax_swing_JRootPane getRootPane(Java_awt_Component p0);
	@Static @Overload String layoutCompoundLabel(Java_awt_FontMetrics p0, String p1, Javax_swing_Icon p2, int p3, int p4, int p5, int p6, Java_awt_Rectangle p7, Java_awt_Rectangle p8, Java_awt_Rectangle p9, int p10);
	@Static @Overload String layoutCompoundLabel(Javax_swing_JComponent p0, Java_awt_FontMetrics p1, String p2, Javax_swing_Icon p3, int p4, int p5, int p6, int p7, Java_awt_Rectangle p8, Java_awt_Rectangle p9, Java_awt_Rectangle p10, int p11);
	@Static @Overload boolean isDescendingFrom(Java_awt_Component p0, Java_awt_Component p1);
	@Static @Overload boolean isEventDispatchThread();
	@Static @Overload boolean isLeftMouseButton(Java_awt_event_MouseEvent p0);
	@Static @Overload boolean isMiddleMouseButton(Java_awt_event_MouseEvent p0);
	@Static @Overload boolean isRectangleContainingRectangle(Java_awt_Rectangle p0, Java_awt_Rectangle p1);
	@Static @Overload boolean isRightMouseButton(Java_awt_event_MouseEvent p0);
	@Static @Overload boolean notifyAction(Javax_swing_Action p0, Javax_swing_KeyStroke p1, Java_awt_event_KeyEvent p2, Object p3, int p4);
	@Static @Overload boolean processKeyBindings(Java_awt_event_KeyEvent p0);
	@Static @Overload int computeStringWidth(Java_awt_FontMetrics p0, String p1);
	@Static @Overload int getAccessibleChildrenCount(Java_awt_Component p0);
	@Static @Overload int getAccessibleIndexInParent(Java_awt_Component p0);
	@Static @Overload void convertPointFromScreen(Java_awt_Point p0, Java_awt_Component p1);
	@Static @Overload void convertPointToScreen(Java_awt_Point p0, Java_awt_Component p1);
	@Static @Overload void invokeAndWait(Java_lang_Runnable p0);
	@Static @Overload void invokeLater(Java_lang_Runnable p0);
	@Static @Overload void paintComponent(Java_awt_Graphics p0, Java_awt_Component p1, Java_awt_Container p2, Java_awt_Rectangle p3);
	@Static @Overload void paintComponent(Java_awt_Graphics p0, Java_awt_Component p1, Java_awt_Container p2, int p3, int p4, int p5, int p6);
	@Static @Overload void replaceUIActionMap(Javax_swing_JComponent p0, Javax_swing_ActionMap p1);
	@Static @Overload void replaceUIInputMap(Javax_swing_JComponent p0, int p1, Javax_swing_InputMap p2);
	@Static @Overload void updateComponentTreeUI(Java_awt_Component p0);
}

/* class javax.swing.SwingWorker */
class Javax_swing_SwingWorker extends Java_util_concurrent_RunnableFuture {
	/*-- Method --*/
	@Virtual @Overload Java_beans_PropertyChangeSupport getPropertyChangeSupport();
	@Virtual @Overload Javax_swing_SwingWorker_StateValue getState();
	@Virtual @Overload int getProgress();
	@Virtual @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void execute();
	@Virtual @Overload void firePropertyChange(String p0, Object p1, Object p2);
	@Virtual @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
}
Javax_swing_SwingWorker Javax_swing_SwingWorker.new();

/* class javax.swing.Timer */
class Javax_swing_Timer extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload boolean getLogTimers();
	@Static @Overload void setLogTimers(boolean p0);
	@Virtual @Overload Java_awt_event_ActionListener[] getActionListeners();
	@Virtual @Overload Java_util_EventListener[] getListeners(Class p0);
	@Virtual @Overload String getActionCommand();
	@Virtual @Overload boolean isCoalesce();
	@Virtual @Overload boolean isRepeats();
	@Virtual @Overload boolean isRunning();
	@Virtual @Overload int getDelay();
	@Virtual @Overload int getInitialDelay();
	@Virtual @Overload void addActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void removeActionListener(Java_awt_event_ActionListener p0);
	@Virtual @Overload void restart();
	@Virtual @Overload void setActionCommand(String p0);
	@Virtual @Overload void setCoalesce(boolean p0);
	@Virtual @Overload void setDelay(int p0);
	@Virtual @Overload void setInitialDelay(int p0);
	@Virtual @Overload void setRepeats(boolean p0);
	@Virtual @Overload void start();
	@Virtual @Overload void stop();
}
Javax_swing_Timer Javax_swing_Timer.new(int p0, Java_awt_event_ActionListener p1);

/* class javax.swing.ToolTipManager */
class Javax_swing_ToolTipManager extends Java_awt_event_MouseAdapter {
	/*-- Method --*/
	@Static @Overload Javax_swing_ToolTipManager sharedInstance();
	@Virtual @Overload boolean isEnabled();
	@Virtual @Overload boolean isLightWeightPopupEnabled();
	@Virtual @Overload int getDismissDelay();
	@Virtual @Overload int getInitialDelay();
	@Virtual @Overload int getReshowDelay();
	@Virtual @Overload void registerComponent(Javax_swing_JComponent p0);
	@Virtual @Overload void setDismissDelay(int p0);
	@Virtual @Overload void setEnabled(boolean p0);
	@Virtual @Overload void setInitialDelay(int p0);
	@Virtual @Overload void setLightWeightPopupEnabled(boolean p0);
	@Virtual @Overload void setReshowDelay(int p0);
	@Virtual @Overload void unregisterComponent(Javax_swing_JComponent p0);
}

/* class javax.swing.TransferHandler */
class Javax_swing_TransferHandler extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Javax_swing_Action getCopyAction();
	@Static @Overload Javax_swing_Action getCutAction();
	@Static @Overload Javax_swing_Action getPasteAction();
	@Virtual @Overload Java_awt_Image getDragImage();
	@Virtual @Overload Java_awt_Point getDragImageOffset();
	@Virtual @Overload Javax_swing_Icon getVisualRepresentation(Java_awt_datatransfer_Transferable p0);
	@Virtual @Overload boolean canImport(Javax_swing_JComponent p0, Java_awt_datatransfer_DataFlavor[] p1);
	@Virtual @Overload boolean canImport(Javax_swing_TransferHandler_TransferSupport p0);
	@Virtual @Overload boolean importData(Javax_swing_JComponent p0, Java_awt_datatransfer_Transferable p1);
	@Virtual @Overload boolean importData(Javax_swing_TransferHandler_TransferSupport p0);
	@Virtual @Overload int getSourceActions(Javax_swing_JComponent p0);
	@Virtual @Overload void exportAsDrag(Javax_swing_JComponent p0, Java_awt_event_InputEvent p1, int p2);
	@Virtual @Overload void exportToClipboard(Javax_swing_JComponent p0, Java_awt_datatransfer_Clipboard p1, int p2);
	@Virtual @Overload void setDragImage(Java_awt_Image p0);
	@Virtual @Overload void setDragImageOffset(Java_awt_Point p0);
}
Javax_swing_TransferHandler Javax_swing_TransferHandler.new(String p0);

/* class javax.swing.UIDefaults */
class Javax_swing_UIDefaults extends Java_util_Hashtable {
	/*-- Method --*/
	@Virtual @Overload Class getUIClass(String p0);
	@Virtual @Overload Class getUIClass(String p0, Java_lang_ClassLoader p1);
	@Virtual @Overload Java_awt_Color getColor(Object p0);
	@Virtual @Overload Java_awt_Color getColor(Object p0, Java_util_Locale p1);
	@Virtual @Overload Java_awt_Dimension getDimension(Object p0);
	@Virtual @Overload Java_awt_Dimension getDimension(Object p0, Java_util_Locale p1);
	@Virtual @Overload Java_awt_Font getFont(Object p0);
	@Virtual @Overload Java_awt_Font getFont(Object p0, Java_util_Locale p1);
	@Virtual @Overload Java_awt_Insets getInsets(Object p0);
	@Virtual @Overload Java_awt_Insets getInsets(Object p0, Java_util_Locale p1);
	@Virtual @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Virtual @Overload Java_util_Locale getDefaultLocale();
	@Virtual @Overload Javax_swing_Icon getIcon(Object p0);
	@Virtual @Overload Javax_swing_Icon getIcon(Object p0, Java_util_Locale p1);
	@Virtual @Overload Javax_swing_border_Border getBorder(Object p0);
	@Virtual @Overload Javax_swing_border_Border getBorder(Object p0, Java_util_Locale p1);
	@Virtual @Overload Javax_swing_plaf_ComponentUI getUI(Javax_swing_JComponent p0);
	@Virtual @Overload Object get(Object p0, Java_util_Locale p1);
	@Virtual @Overload String getString(Object p0);
	@Virtual @Overload String getString(Object p0, Java_util_Locale p1);
	@Virtual @Overload boolean getBoolean(Object p0);
	@Virtual @Overload boolean getBoolean(Object p0, Java_util_Locale p1);
	@Virtual @Overload int getInt(Object p0);
	@Virtual @Overload int getInt(Object p0, Java_util_Locale p1);
	@Virtual @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void addResourceBundle(String p0);
	@Virtual @Overload void putDefaults(Object[] p0);
	@Virtual @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Virtual @Overload void removeResourceBundle(String p0);
	@Virtual @Overload void setDefaultLocale(Java_util_Locale p0);
}
@Overload Javax_swing_UIDefaults Javax_swing_UIDefaults.new();
@Overload Javax_swing_UIDefaults Javax_swing_UIDefaults.new(int p0, float p1);
@Overload Javax_swing_UIDefaults Javax_swing_UIDefaults.new(Object[] p0);

/* class javax.swing.UIManager */
class Javax_swing_UIManager extends Java_io_Serializable {
	/*-- Method --*/
	@Static @Overload Java_awt_Color getColor(Object p0);
	@Static @Overload Java_awt_Color getColor(Object p0, Java_util_Locale p1);
	@Static @Overload Java_awt_Dimension getDimension(Object p0);
	@Static @Overload Java_awt_Dimension getDimension(Object p0, Java_util_Locale p1);
	@Static @Overload Java_awt_Font getFont(Object p0);
	@Static @Overload Java_awt_Font getFont(Object p0, Java_util_Locale p1);
	@Static @Overload Java_awt_Insets getInsets(Object p0);
	@Static @Overload Java_awt_Insets getInsets(Object p0, Java_util_Locale p1);
	@Static @Overload Java_beans_PropertyChangeListener[] getPropertyChangeListeners();
	@Static @Overload Javax_swing_Icon getIcon(Object p0);
	@Static @Overload Javax_swing_Icon getIcon(Object p0, Java_util_Locale p1);
	@Static @Overload Javax_swing_LookAndFeel getLookAndFeel();
	@Static @Overload Javax_swing_LookAndFeel[] getAuxiliaryLookAndFeels();
	@Static @Overload Javax_swing_UIDefaults getDefaults();
	@Static @Overload Javax_swing_UIDefaults getLookAndFeelDefaults();
	@Static @Overload Javax_swing_UIManager_LookAndFeelInfo[] getInstalledLookAndFeels();
	@Static @Overload Javax_swing_border_Border getBorder(Object p0);
	@Static @Overload Javax_swing_border_Border getBorder(Object p0, Java_util_Locale p1);
	@Static @Overload Javax_swing_plaf_ComponentUI getUI(Javax_swing_JComponent p0);
	@Static @Overload Object get(Object p0);
	@Static @Overload Object get(Object p0, Java_util_Locale p1);
	@Static @Overload Object put(Object p0, Object p1);
	@Static @Overload String getCrossPlatformLookAndFeelClassName();
	@Static @Overload String getString(Object p0);
	@Static @Overload String getString(Object p0, Java_util_Locale p1);
	@Static @Overload String getSystemLookAndFeelClassName();
	@Static @Overload boolean getBoolean(Object p0);
	@Static @Overload boolean getBoolean(Object p0, Java_util_Locale p1);
	@Static @Overload boolean removeAuxiliaryLookAndFeel(Javax_swing_LookAndFeel p0);
	@Static @Overload int getInt(Object p0);
	@Static @Overload int getInt(Object p0, Java_util_Locale p1);
	@Static @Overload void addAuxiliaryLookAndFeel(Javax_swing_LookAndFeel p0);
	@Static @Overload void addPropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Static @Overload void installLookAndFeel(Javax_swing_UIManager_LookAndFeelInfo p0);
	@Static @Overload void installLookAndFeel(String p0, String p1);
	@Static @Overload void removePropertyChangeListener(Java_beans_PropertyChangeListener p0);
	@Static @Overload void setInstalledLookAndFeels(Javax_swing_UIManager_LookAndFeelInfo[] p0);
	@Static @Overload void setLookAndFeel(Javax_swing_LookAndFeel p0);
	@Static @Overload void setLookAndFeel(String p0);
}
Javax_swing_UIManager Javax_swing_UIManager.new();

/* class javax.swing.UnsupportedLookAndFeelException */
class Javax_swing_UnsupportedLookAndFeelException extends Java_lang_Exception {
}
Javax_swing_UnsupportedLookAndFeelException Javax_swing_UnsupportedLookAndFeelException.new(String p0);

/* class javax.swing.ViewportLayout */
class Javax_swing_ViewportLayout extends Java_awt_LayoutManager {
}
Javax_swing_ViewportLayout Javax_swing_ViewportLayout.new();

/* interface javax.swing.WindowConstants */
class Javax_swing_WindowConstants {
}

